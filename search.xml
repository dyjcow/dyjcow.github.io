<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>观察者模式及其应用|设计模式</title>
      <link href="/2023/05/25/guan-cha-zhe-mo-shi-ji-qi-ying-yong/"/>
      <url>/2023/05/25/guan-cha-zhe-mo-shi-ji-qi-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式及其应用"><a href="#观察者模式及其应用" class="headerlink" title="观察者模式及其应用"></a>观察者模式及其应用</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>软件设计模式是软件开发中最为精华的一部分，它可以给困难问题带去指引，也可以延续软件的生命。本文将从软件设计模式的概念出发，介绍何为设计模式和设计原则，继而介绍观察者模式和其实际应用。</p><p>关键词：设计模式、观察者模式、解耦</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>软件设计模式是一种经过验证的、可重复使用的解决方案，用于解决软件设计中常见的问题。它是基于面向对象编程的思想，通过提供一系列的模板来帮助开发人员解决软件设计中的常见问题。这些模板包括如何组织代码、如何处理数据、如何管理对象之间的关系等。软件设计模式旨在提高代码的可重用性、可维护性和可扩展性。</p><h2 id="设计模式相关知识"><a href="#设计模式相关知识" class="headerlink" title="设计模式相关知识"></a>设计模式相关知识</h2><p>软件设计模式发展至今已经是已经出现各式各样模式，用于解决软件设计过程中的种种问题，其中最为基础通用的则是 GoF 在其《设计模式》一书中提出的 23 种设计模式。这23种设计模式现今成为了设计模式的经典，也是最为基础的设计模式。</p><p>23 种经典的设计模式分为三类：创建型、结构型、行为型。其中他们的主要作用如下：</p><ul><li><p><strong>创建型设计模式</strong>主要解决“对象的创建”问题。</p></li><li><p><strong>结构型设计模式</strong>主要解决“类或对象的组合或组装”问题。</p></li><li><p><strong>行为型设计模式</strong>主要解决的是“类或对象之间的交互”问题。</p></li></ul><p>这几种类型的设计模式，即使他们功能各异，解决的问题各有不同。但是它们是遵循着最基本的 7 种<strong>设计原则</strong>，继而演化成通用的模板代码的。如果是设计模式是解决问题的模板，那么设计原则则是解决问题的根本有效条约。这几种设计原则共有7条，分别如下：</p><ol><li><p>单一职责原则（Single Responsibility Principle，SRP）：一个类只应该有一个引起它变化的原因。</p></li><li><p>开放封闭原则（Open Closed Principle，OCP）：一个软件实体应该对扩展开放，对修改关闭。</p></li><li><p>里氏替换原则（Liskov Substitution Principle，LSP）：子类可以替换父类并且不会影响程序的正确性。</p></li><li><p>接口隔离原则（Interface Segregation Principle，ISP）：不应该强迫客户端依赖于它们不使用的接口。</p></li><li><p>依赖倒置原则（Dependency Inversion Principle，DIP）：高层模块不应该依赖于底层模块，二者都应该依赖于抽象。</p></li><li><p>迪米特法则（Law of Demeter，LoD）：一个对象应该对其他对象有最少的了解。</p></li><li><p>组合/聚合复用原则（Composition/Aggregate Reuse Principle, CARP）：尽量使用对象组合，而不是继承来达到复用的目的。</p></li></ol><p>这些设计原则都是为了提高软件的可维护性、可扩展性、可重用性和灵活性，同时也能够降低代码的复杂度和耦合度。解决这些根本性问题，也就是在顺势解决软件设计中对应场景的不同问题了。</p><p>而在软件开发的需求场景中，有这么一种情况，当需要实现一对多的依赖关系，且需要实现一个对象的状态变化能够通知其他对象进行相应的处理，而这些被通知的对象数量可能是不固定的时候，我们需要一种设计模式可以来解决这个问题。这个问题是类或对象中的交互问题，那么自然是需要一种行为型设计模式，而这种设计模式就是观察者模式。</p><p>观察者模式的核心思想是将观察者（也就是被通知的对象）与被观察者（也就是状态发生变化的对象）进行解耦，让它们相互独立地变化。这样当被观察者的状态发生变化时，它只需要通知它所维护的观察者列表中的对象即可，而不需要知道这些对象的具体实现细节。</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）。</p><p>在 GoF 的《设计模式》一书中，它的定义是这样的：Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p><p>翻译成中文就是：在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。</p><p>被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。即定义中的”一“就是被观察者，定义中”多“就是被观察者。不过，在实际的项目开发中，这两种对象的称呼是比较灵活的，有各种不同的叫法，比如：Subject-Observer、Publisher-Subscriber、Producer-Consumer、EventEmitter-EventListener、Dispatcher-Listener。</p><p>如何形象的理解这个模式呢？可以从”订阅-发布模式“这个定义形象理解。现以一个订阅杂志的过程为例子，高三(8)班的同学需要订阅《作文通讯》这个杂志，所以每个人都去邮政报务员那里交钱填写信息进行登记订阅；而到了每月的中旬发版的日子，邮政都会把最新一期的《作文通讯》送到每一个订阅同学的手中。这个过程就是一个较为形象的观察者模式，其中行为和定义的对应如下：</p><ul><li>同学们交钱登记订阅 –&gt; 定义一对多依赖</li><li>每月中旬发版时 –&gt; 一个对象(被观察者)状态改变时</li><li>杂志送到每一个订阅同学的手中 –&gt; 所有依赖的对象(观察者)都会自动收到通知</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="https://pic.lxtlovely.top/blog/202305250120384.png" alt="image-20230525012036608"></p><p>观察者模式的定义如图所示，其中包括两个接口，以及对接口的实现类，其具体解释如下：</p><p>抽象主题（Subject）角色：也叫抽象目标类(抽象被观察者)，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。</p><p>具体主题（Concrete Subject）角色：也叫具体目标类(具体被观察者)，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</p><p>抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</p><p>具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</p><p>依照这个类结构图，我们可以进行如下的编码实现。</p><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteObserverOne</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//TODO: 获取消息通知，执行自己的逻辑...</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteObserverOne is notified."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteObserverTwo</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//TODO: 获取消息通知，执行自己的逻辑...</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteObserverTwo is notified."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ConcreteSubject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subject<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteObserverOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subject<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteObserverTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subject<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依照这个编码实现，我们可以简单的模拟观察者模式，代码中实现好观察者和被观察者后，只需要在被观察者中订阅注册观察者的信息，那么就可以实现对观察者的消息分发了。在真实的软件开发中，并不需要照搬上面的简单代码，且往往是更加复杂变化多样的。观察者模式的实现方法各式各样，函数、类的命名等会根据业务场景的不同有很大的差别，比如 register 函数还可以叫作 attach，remove 函数还可以叫作 detach 等。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>观察者模式适用场景如下：</p><ol><li><p>当一个对象的状态发生变化时，需要通知其他对象进行相应的处理。</p></li><li><p>当一个对象需要将自己的状态变化通知给其他多个对象，而且这些对象的数量不固定时。</p></li><li><p>当一个对象需要将自己的状态变化通知给其他对象，但是它并不知道这些对象的具体实现细节时。</p></li><li><p>当一个对象的状态变化会引起其他对象的联动，而且这些联动需要根据具体的情况动态地进行调整时。</p></li><li><p>当一个对象的状态变化需要触发一系列的业务流程时，而这些业务流程又需要根据具体的情况动态地进行调整时。</p></li></ol><p>特别注意的是，对于第二点应用场景，其中提到的”这些对象的数量不固定时“这个条件是指观察者模式一定会遵循开闭原则——对拓展开放，对修改关闭，让该模式松耦合、可维护和可拓展。</p><p>观察者模式适用于需要实现一对多的依赖关系的场景，同时也适用于需要实现松耦合的系统设计的场景。实际应用中，观察者模式有着广泛的应用，比如 GUI 设计、事件驱动系统、消息队列系统等。</p><h2 id="观察者模式的实际应用"><a href="#观察者模式的实际应用" class="headerlink" title="观察者模式的实际应用"></a>观察者模式的实际应用</h2><p>本文中的上述代码只是简单的演示，其中的被观察者处对消息的分发是同步阻塞的，对于所有消息是在主线程中排队一个个发布的。这种方式显然不满足当下多数系统的实际需求。而观察者模式的更多应用可以是：异步非阻塞的实现方式、跨进程的实现方式等。</p><h3 id="跨进程的实现方式"><a href="#跨进程的实现方式" class="headerlink" title="跨进程的实现方式"></a>跨进程的实现方式</h3><p>如果提供了发送用户注册信息的 <strong>RPC</strong> 接口，我们仍然可以在 notifyObservers() 函数中调用 RPC 接口来发送数据。但是，我们还有更加优雅、更加常用的一种实现方式，那就是基于<strong>消息队列</strong>（Message Queue，比如 ActiveMQ）来实现。</p><p>但是这也会有新的问题出现，我们必须引入一个新的系统（消息队列），其增加了维护成本。但其好处是解耦更加彻底，在原来的实现方式中，观察者需要注册到被观察者中，被观察者需要依次遍历观察者来发送消息。而基于消息队列的实现方式，被观察者和观察者解耦更加彻底，两部分的耦合更小。被观察者完全不感知观察者，同理，观察者也完全不感知被观察者。被观察者只管发送消息到消息队列，观察者只管从消息队列中读取消息来执行相应的逻辑。</p><h3 id="异步非阻塞的实现方式"><a href="#异步非阻塞的实现方式" class="headerlink" title="异步非阻塞的实现方式"></a>异步非阻塞的实现方式</h3><p>我们假设一个实际的场景，我们需要开发一个 P2P 投资理财系统，用户注册成功之后，我们会给用户发放投资体验金和欢迎信件。那么在同步阻塞的情况下，其实现如下。其中如果需要添加新的观察者时，UserController 类的 register() 函数完全不需要修改，只需要再添加一个实现了 RegObserver 接口的类，并且通过 setRegObservers() 函数将它注册到 UserController 类中即可。而 UserController 类则替代了被观察者这一角色。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RegObserver</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">handleRegSuccess</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegPromotionObserver</span> <span class="token keyword">implements</span> <span class="token class-name">RegObserver</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">PromotionService</span> promotionService<span class="token punctuation">;</span> <span class="token comment">// 依赖注入</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegSuccess</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    promotionService<span class="token punctuation">.</span><span class="token function">issueNewUserExperienceCash</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegNotificationObserver</span> <span class="token keyword">implements</span> <span class="token class-name">RegObserver</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">NotificationService</span> notificationService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegSuccess</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    notificationService<span class="token punctuation">.</span><span class="token function">sendInboxMessage</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token string">"Welcome..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span> <span class="token comment">// 依赖注入</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegObserver</span><span class="token punctuation">&gt;</span></span> regObservers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 一次性设置好，之后也不可能动态的修改</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRegObservers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegObserver</span><span class="token punctuation">&gt;</span></span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    regObservers<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>observers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> telephone<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//省略输入参数的校验代码</span>    <span class="token comment">//省略userService.register()异常的try-catch代码</span>    <span class="token keyword">long</span> userId <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>telephone<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RegObserver</span> observer <span class="token operator">:</span> regObservers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">handleRegSuccess</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> userId<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若想将其改造成异步非阻塞的实现方式，有两种方法。其中一种是：在每个 handleRegSuccess() 函数中创建一个新的线程执行代码逻辑；另一种是：在 UserController 的 register() 函数中使用线程池来执行每个观察者的 handleRegSuccess() 函数。两种实现方式的具体代码如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 第一种实现方式，其他类代码不变，就没有再重复罗列</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegPromotionObserver</span> <span class="token keyword">implements</span> <span class="token class-name">RegObserver</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">PromotionService</span> promotionService<span class="token punctuation">;</span> <span class="token comment">// 依赖注入</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegSuccess</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        promotionService<span class="token punctuation">.</span><span class="token function">issueNewUserExperienceCash</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 第二种实现方式，其他类代码不变，就没有再重复罗列</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span> <span class="token comment">// 依赖注入</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegObserver</span><span class="token punctuation">&gt;</span></span> regObservers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRegObservers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RegObserver</span><span class="token punctuation">&gt;</span></span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    regObservers<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>observers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> telephone<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//省略输入参数的校验代码</span>    <span class="token comment">//省略userService.register()异常的try-catch代码</span>    <span class="token keyword">long</span> userId <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>telephone<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RegObserver</span> observer <span class="token operator">:</span> regObservers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          observer<span class="token punctuation">.</span><span class="token function">handleRegSuccess</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> userId<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于第一种实现方式，频繁地创建和销毁线程比较耗时，并且并发线程数无法控制，创建过多的线程会导致堆栈溢出。第二种实现方式，尽管利用了线程池解决了第一种实现方式的问题，但线程池、异步执行逻辑都耦合在了 register() 函数中，增加了这部分业务代码的维护成本。</p><h4 id="EventBus框架"><a href="#EventBus框架" class="headerlink" title="EventBus框架"></a>EventBus框架</h4><p>使用 EventBus 框架可以解决上述两种方式的弊端，且隐藏实现细节，降低开发难度。EventBus 翻译为“事件总线”，它提供了实现观察者模式的骨架代码。我们可以基于此框架，非常容易地在自己的业务场景中实现观察者模式，不需要从零开始开发。其中，Google Guava EventBus 就是一个比较著名的 EventBus 框架，它不仅仅支持异步非阻塞模式，同时也支持同步阻塞模式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span> <span class="token comment">// 依赖注入</span>  <span class="token keyword">private</span> <span class="token class-name">EventBus</span> eventBus<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_EVENTBUS_THREAD_POOL_SIZE <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//eventBus = new EventBus(); // 同步阻塞模式</span>    eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncEventBus</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>DEFAULT_EVENTBUS_THREAD_POOL_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 异步非阻塞模式</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRegObservers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> telephone<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//省略输入参数的校验代码</span>    <span class="token comment">//省略userService.register()异常的try-catch代码</span>    <span class="token keyword">long</span> userId <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>telephone<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    eventBus<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userId<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegPromotionObserver</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">PromotionService</span> promotionService<span class="token punctuation">;</span> <span class="token comment">// 依赖注入</span>  <span class="token annotation punctuation">@Subscribe</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegSuccess</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    promotionService<span class="token punctuation">.</span><span class="token function">issueNewUserExperienceCash</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegNotificationObserver</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">NotificationService</span> notificationService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Subscribe</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRegSuccess</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    notificationService<span class="token punctuation">.</span><span class="token function">sendInboxMessage</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用 EventBus 框架实现的观察者模式，跟从零开始编写的观察者模式相比，从大的流程上来说，实现思路大致一样，都需要定义 Observer，并且通过 register() 函数注册 Observer，也都需要通过调用某个函数（比如，EventBus 中的 post() 函数）来给 Observer 发送消息（在 EventBus 中消息被称作事件 event）。</p><p>但在实现细节方面，它们又有些区别。基于 EventBus，我们不需要定义 Observer 接口，任意类型的对象都可以注册到 EventBus 中，通过 @Subscribe 注解来标明类中哪个函数可以接收被观察者发送的消息。</p><h4 id="EventBus框架原理解释"><a href="#EventBus框架原理解释" class="headerlink" title="EventBus框架原理解释"></a>EventBus框架原理解释</h4><p><img src="https://static001.geekbang.org/resource/image/c3/e1/c3760c7f5ff8d93e0e42e5ce1a4376e1.jpg?wh=2473x1393" alt="img"></p><p>EventBus 通过 @Subscribe 注解来标明，某个函数能接收哪种类型的消息。然后将这些对应的信息放置到 Observer 注册表中。等待被观察者发送消息。</p><p><img src="https://static001.geekbang.org/resource/image/8d/1a/8d5c765ed641a89fe80fd64aa61be31a.jpg?wh=2528x953" alt="img"></p><p>当 EventBus 调用 post() 方法发送消息的时候，就结合 Observer 注册表和Java的反射机制，将对应的消息发送到对应的可接收函数中。对于同步阻塞模式，EventBus 在一个线程内依次执行相应的函数。对于异步非阻塞模式，EventBus 通过一个线程池来执行相应的函数。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>通过使用观察者模式，可以实现松耦合的系统设计，提高系统的可维护性和扩展性。在合适的情况下，使用观察者模式可以大大提高开发人员的开发效率以及减少后期升级维护的付出。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《设计模式之美》——王争</p><p>Pree W. Design patterns for object-oriented software development[M]. ACM Press/Addison-Wesley Publishing Co., 1995.</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 23种常用设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式|设计模式</title>
      <link href="/2023/05/22/gong-han-fang-fa-mo-shi/"/>
      <url>/2023/05/22/gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><blockquote><p>引言：</p><p>顾名思义，工厂方法模式，指的就是使用工厂类，让工厂类代替创建一些产品类实例。</p></blockquote><p>在讲述工厂方法之前，先来认识一下简单工厂模式。</p><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>简单工厂模式不属于23种模式之一，但是其较为直接简单，利与我们对工厂方法模式的理解。我们可以先查看其类图。</p><p><img src="https://pic.lxtlovely.top/blog/202305212348245.png" alt="image-20230521234808761"></p><p>简单工厂模式十分的直接，只需要定义一个通用的创建接口或者是抽象类，让具体产品类去实现它。继而，定义一个工厂，让工厂做出判断是需要创建某种产品类。最后客户端调用者直接调用工厂来创建即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义抽象产品类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 定义具体产品类A</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductA</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用产品A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 定义具体产品类B</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductB</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用产品B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 定义工厂类</span><span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 客户端代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Product</span> productA <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productA<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：使用产品A</span>        <span class="token class-name">Product</span> productB <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productB<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：使用产品B</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单工厂使用场景如下：</p><ul><li>工厂负责创建的对象较为少</li><li>客户无需关心创建逻辑</li></ul><p>优点：避免直接创建实体类，减低耦合性   缺点：违反开闭原则，不利于做产品类的拓展。</p><h2 id="工厂方法模式-1"><a href="#工厂方法模式-1" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>在上述简单工厂模式的基础下，我们让其符合开闭原则，并变得易于拓展，即为工厂方法模式了。</p><p>具体类图如下：</p><p><img src="https://pic.lxtlovely.top/blog/202305220007255.png" alt="image-20230522000711718"></p><p>工厂方法模式，在工厂处也使用到抽象，这样子使得客户端在调用的时候，连输入值都无需传入了，也使得类与类之间更加的解耦。这么处理让各其符合了开闭原则，需要做出拓展时候，再创建一个新的工厂类即可，而依旧禁止对修改的处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义抽象产品类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 定义具体产品类A</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductA</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用产品A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 定义具体产品类B</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProductB</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用产品B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 定义抽象工厂类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 定义具体工厂类A</span><span class="token keyword">class</span> <span class="token class-name">ConcreteFactoryA</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 定义具体工厂类B</span><span class="token keyword">class</span> <span class="token class-name">ConcreteFactoryB</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 客户端代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Factory</span> factoryA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFactoryA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> productA <span class="token operator">=</span> factoryA<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productA<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：使用产品A</span>        <span class="token class-name">Factory</span> factoryB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFactoryB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> productB <span class="token operator">=</span> factoryB<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productB<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：使用产品B</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂模式在继承简单工厂模式的优点，把不符合开闭原则的缺点解决了，使其成为一个典型的设计模式。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Android进阶之光》</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 23种常用设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式|设计模式</title>
      <link href="/2023/05/20/dan-li-mo-shi/"/>
      <url>/2023/05/20/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="什么是单例"><a href="#什么是单例" class="headerlink" title="什么是单例"></a>什么是单例</h2><p>何为单例模式，通俗的讲就是：让整个程序中，只有单一的一个实例。也就是说，我们在程序中不会创建多次对象实例，只会创建一次对象实例，且该单一的对象对整个程序共享。</p><p>所以，我们可以得出，单例模式的基本类图如下：</p><p><img src="https://pic.lxtlovely.top/blog/202305202239634.png" alt="image-20230520223914222"></p><p>而在实际运用中，我们有 6 种单例模式的写法。下面我们具体来讲一下。</p><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>饿汉模式在类加载时候就完成初始化了，所以后续需要访问时候，他都是已经存在的了，这避免了线程同步的问题，使得其是线程安全的。</p><h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><p>懒汉模式指的是懒加载，让单例需要被使用到的时候再去加载，避免不必要的浪费。</p><h3 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么这种是线程不安全的呢？因为可能存在两个线程同时判断该 instance 为空的情况，然后破坏了单例模式。</p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处的代码相对于上述不安全的代码，多了一个在 <code>getInstance()</code> 方法中加入同步锁的代码，这样子理论上就可以实现线程安全了。</p><h2 id="双重检查模式"><a href="#双重检查模式" class="headerlink" title="双重检查模式"></a>双重检查模式</h2><p>上述懒汉模式中，在 <code>getInstance()</code> 中加入同步锁，会使得每次使用都同步，但是实际上，同步的情况是较少的。这样子会造成不必要的同步开销。并且，其同步并不一定真的同步了。</p><blockquote><p>在基于<code>偏序关系</code>的<code>Happens-Before内存模型</code>中，指令重排技术大大提高了程序执行效率，但同时也引入了一些问题。</p><p><code>竞态条件</code>会导致<code>instance</code>引用被多次赋值，使用户得到两个不同的单例。</p><p><a href="https://www.cnblogs.com/monkeysayhi/p/7654460.html">volatile关键字的作用、原理 - 猴子007 - 博客园 (cnblogs.com)</a></p></blockquote><p>下面我们使用双重检查模式来解决上述的问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span> instance <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//当instance不为null时，仍可能指向一个“被部分初始化的对象”</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span> instance <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次检查是为了不必要的同步，第二次检查是线程同步后，Singleton 等于 null 时候才创建实例。</p><h2 id="静态内部类的单例模式"><a href="#静态内部类的单例模式" class="headerlink" title="静态内部类的单例模式"></a>静态内部类的单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>sInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个单例模式，既可以实现懒加载，又可以实现线程安全。是类加载和懒加载的融合。</p><h2 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举的肯定是单例且线程安全的，但是一般我们都不会用到这种方式。</p><p>综上，我们学习了六种单例模式，其中只有一类基本的懒加载是线程不安全的，我们要避免使用这种懒加载。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/monkeysayhi/p/7654460.html">volatile关键字的作用、原理 - 猴子007 - 博客园 (cnblogs.com)</a></p><p>《Android进阶之光》</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 23种常用设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪米特原则|设计原则</title>
      <link href="/2023/05/11/di-mi-te-yuan-ze/"/>
      <url>/2023/05/11/di-mi-te-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="迪米特原则-设计原则"><a href="#迪米特原则-设计原则" class="headerlink" title="迪米特原则|设计原则"></a>迪米特原则|设计原则</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第8天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>设计原则系列文章</p><p><a href="https://juejin.cn/post/7149189472368721934">单一职责原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149927872331776031">里氏替换原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150923846386712612">迪米特原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152528995723149326">六大原则之外的设计原则|设计原则 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>了解单一职责原则</li><li>了解接口隔离原则</li><li>了解封装特性</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是讲述 <strong>六大设计原则</strong> 的最后一篇，为大家讲述 <strong>迪米特原则</strong> </p><p>迪米特原则的英文释义如下</p><blockquote><p>Each unit should have only limited knowledge about other units: only units “closely” related to the current unit. Or: Each unit should only talk to its friends; Don’t talk to strangers.</p></blockquote><p>翻译出来，有点拗口，我们可以直接看百度的释义</p><blockquote><p>迪米特法则（Law of Demeter）又叫作最少知识原则（The Least Knowledge Principle），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。</p></blockquote><p>总结出来就是：<strong>不该有直接依赖关系的模块不要有依赖。有依赖关系的模块之间，尽量只依赖必要的接口</strong>。</p><p>这个原则和单一职责原则类似，也和接口隔离原则类似。</p><p>下面为大家简述迪米特原则的重点，以及与其他原则的不同所在</p><h2 id="如何用好迪米特原则"><a href="#如何用好迪米特原则" class="headerlink" title="如何用好迪米特原则"></a>如何用好迪米特原则</h2><p>我们总结的迪米特原则有两句话，事实上分别把这两句话用好，就可以用好迪米特原则了。</p><p>第一句话是：<strong>不该有直接依赖关系的模块不要有依赖</strong></p><p>对于这一句话，我们需要分析大致有哪几种无需依赖关系的情况，我们却使用了依赖。</p><ol><li>A类需要B类相关的某些属性，却把B类全部传入</li><li>从业务含义上，A类无需依赖B类，只是依赖其它类的时候，借助了B类做一个工具</li><li>业务上，A需要依赖B的函数，但无需依赖属性</li></ol><p>以上的两种情况，都是依赖了无直接关系模块，就是违背了迪米特原则。那我们要遵循好原则的第一句话，即把对应的错误情况解决即可。</p><ul><li><p>对于第一个错误，我们将传入的参数修改为对应的属性即可。</p></li><li><p>第二个错误，我们借助其他例如工厂模式，让工厂类依赖B类，使用工程类创建好A类即可。</p></li><li><p>而第三个错误，处理得很简单，把属性私有化即可，如此依赖B的时候，也就不会无意间调用到属性了。可见封装的特性也是迪米特原则的关键。</p></li></ul><p>当然，违反迪米特原则的问题还有很多，我们需要善于 review 我们的代码，将违反对应原则的代码找出来，修复即可。</p><p>第二句话：<strong>有依赖关系的模块之间，尽量只依赖必要的接口</strong></p><p>当模块之间，类之间确切有业务依赖关系的时候，最好只依赖当前需要的接口。我们在前文 <a href="https://juejin.cn/post/7148822224533717028">继承和组合如何选择|设计模式基础 </a> 中有使用 <strong>组合+接口+委托</strong> 的方式让子类只依赖自身需要依赖的接口；在 <a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则</a> 中，也把多余的接口独立开来。</p><p>本文继续引用 <a href="https://juejin.cn/post/7148822224533717028">组合</a> 一文中的demo，为大家展示如何减少不必要的依赖。</p><p>具体代码如下(From:《设计模式之美》)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyAbility</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span><span class="token punctuation">}</span><span class="token comment">//省略Tweetable/TweetAbility/EggLayable/EggLayAbility</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ostrich</span> <span class="token keyword">implements</span> <span class="token class-name">Tweetable</span><span class="token punctuation">,</span> <span class="token class-name">EggLayable</span> <span class="token punctuation">{</span><span class="token comment">//鸵鸟</span>  <span class="token keyword">private</span> <span class="token class-name">TweetAbility</span> tweetAbility <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TweetAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组合</span>  <span class="token keyword">private</span> <span class="token class-name">EggLayAbility</span> eggLayAbility <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EggLayAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组合</span>  <span class="token comment">//... 省略其他属性和方法...</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tweet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tweetAbility<span class="token punctuation">.</span><span class="token function">tweet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">layEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eggLayAbility<span class="token punctuation">.</span><span class="token function">layEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上述的 <strong>Ostrich</strong> 只需依赖 <code>Tweetable</code> 和 <code>EggLayable</code>  两个接口的时候，我们就只继承这两个接口，当然，前提是我们要把接口颗粒度降低、细化。</p><h2 id="迪米特原则与其他原则的不同"><a href="#迪米特原则与其他原则的不同" class="headerlink" title="迪米特原则与其他原则的不同"></a>迪米特原则与其他原则的不同</h2><h3 id="迪米特原则与单一职责原则"><a href="#迪米特原则与单一职责原则" class="headerlink" title="迪米特原则与单一职责原则"></a>迪米特原则与单一职责原则</h3><p>迪米特注重 调用类与被调用类 之间的关系，主要让<strong>两者的联系最小</strong>，其<strong>重于实现低耦合</strong>；而单一职责更关系<strong>本身是否功能单一</strong>、涉及的业务单一，其<strong>重于实现高内聚</strong>。</p><h3 id="迪米特原则与接口隔离原则"><a href="#迪米特原则与接口隔离原则" class="headerlink" title="迪米特原则与接口隔离原则"></a>迪米特原则与接口隔离原则</h3><p>迪米特原则与接口隔离原则之间，有两点的不同，一是涉及的范围不同，二是目的不同。</p><p><strong>范围不同</strong></p><p>迪米特原则的范围包括类，属性，接口等，所有拥有依赖关系的都涉及到迪米特原则。</p><p>而接口隔离原则只涉及到接口，要求接口符合单一即可。</p><p><strong>目的不同</strong></p><p>迪米特原则的目的是：让依赖的模块间低耦合，其涉及初衷就是降低模块间的关联。</p><p>而接口隔离原则的目的是：让接口功能单一，以提升复用性和拓展性。这也间接的使得模块间变得低耦合。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6968673763218964493#heading-8">如何学好设计，做好架构？ - 掘金 (juejin.cn)</a></p><p><a href="https://time.geekbang.org/column/article/179615?screen=full">22 | 理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？ (geekbang.org)</a></p><p><a href="https://baike.baidu.com/item/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/2107000">迪米特法则_百度百科 (baidu.com)</a></p><p><a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7148822224533717028">继承和组合如何选择|设计模式基础 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPC机制</title>
      <link href="/2023/05/10/ipc-ji-zhi/"/>
      <url>/2023/05/10/ipc-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="IPC机制"><a href="#IPC机制" class="headerlink" title="IPC机制"></a>IPC机制</h1><blockquote><p><strong>引言</strong></p><p>在我们使用 Android 手机的时候，有时我们使用的软件会需要消耗比较大的内存，也经常会需要同时打开多个软件。这些时候，我们都会需要使用到多进程技术。作为 Android 开发者，相信我们都知道如何去开启应用的单个多进程，但是开启多进程之后，如何进行「进程间通信(IPC)」呢？进程通信的方法有很多，他们适用于不同的使用场景，下面我们来逐个了解。</p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>Android 四大组件</li><li>Java 序列化</li></ul><h2 id="IPC简介"><a href="#IPC简介" class="headerlink" title="IPC简介"></a>IPC简介</h2><p>相信学过大学「操作系统」这门课的同学都还记得  <code>进程间通信</code>  <code>信号量机制</code> 这些名词，今天我们学习的也是操作系统的通信，不过是针对以 Linux 为内核的 Android 操作系统。我们通常会以一个软件或者程序为进程。而 Android 是可以使用多进程的，对于稍微大型一些的软件也都会使用到多进程。使用多进程的目的有如下几个：</p><ol><li>进程隔离，以达到某些特殊的业务需求</li><li>扩大软件的内存大小。</li></ol><p>多进程的开启很简单，其唯一方法是给注册文件 <code>AndroidManifest.xml</code> 中的四大组件部分添加 <code>android:process</code> 属性即可</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>                <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qxy.potatos.module.mine.activity.WebViewActivity<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>configChanges</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orientation|screenSize|keyboardHidden<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:h5<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>screenOrientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/BlackTheme<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的 <code>android:process=":h5"</code> 指的是该程序下的私有进程，是 <code>com.qxy.potatos:h5</code> 的简写。如果属性值换为全局形式的 <code>com.qxy.potatos.h5</code>,则表示该进程是全局的，可共享给其他应用的。</p><p>而多进程出现后会导致如下的一些问题：</p><ol><li>静态成员和单例模式完全失效</li><li>线程同步机制完全失效</li><li>SharePreferences 的可靠性下降</li><li>Application 多次创建</li></ol><p>上述问题为何会出现呢？</p><p>由于 Android 为每个独立进程都分配了一个虚拟机，那么虚拟机的内存空间必然是不同的，所以不同的量在不同内存中都有一份副本，在不同进程中只能修改其内存下的副本。所以1和2中，无论是加何种锁，不作用在同一片内存空间中都是失效的。</p><p>而3则是由于 SharePreferences 是存储在 xml 文件中的，不同进程对该文件的并发读写时会导致数据出错的</p><p>4中则是由于 Android 的启动机制是每次都要由启动新的 Application，则每个进程都会有一个自己的 Application。我们也需要着重注意这个问题，在Application 中做好启动分类，在多进程启动阶段，防止不需要的资源多次加载</p><p>基于上述的原因和问题，我们需要深入了解 IPC 机制，让跨进程通信更好的服务于我们，解决多进程所带来的问题。</p><h2 id="IPC基础知识"><a href="#IPC基础知识" class="headerlink" title="IPC基础知识"></a>IPC基础知识</h2><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>在谈论序列化与反序列化问题之前，我们需要先了解他们是什么，且作用有哪些。</p><p>序列化的意思就是将<strong>对象转化为字节序列的过程</strong></p><p>反序列化则是将<strong>字节序列恢复为对象的过程</strong></p><p>那么将对象序列化为字节序列有什么用呢？</p><p>将对象序列化为字节序列，可以在传递和保存对象的时候，保证对象的<strong>完整性和可传递性</strong>。使其易于保存在本地或者在网络空间中传输。</p><p>而反序列化，可以将字节流中保存的对象<strong>重建为对象</strong></p><p>所以，其最核心的作用就是，<strong>对象状态的保存和重建</strong></p><h5 id="序列化优点"><a href="#序列化优点" class="headerlink" title="序列化优点"></a>序列化优点</h5><ol><li>序列化后的为字节流的对象，存储在硬盘中方便JVM重启调用</li><li>序列化后的二进制序列能够减少存储空间，方便永久性保存对象</li><li>序列化成二进制字节流的对象方便进行网络传输</li><li>序列化后的对象可以进行进程间通信</li></ol><h5 id="Android中的序列化手段"><a href="#Android中的序列化手段" class="headerlink" title="Android中的序列化手段"></a>Android中的序列化手段</h5><p>基于上述的讨论，我们知道了何为序列化以及序列化的作用和优点。这其中提到序列化的一大特性就是用于<strong>进程间通信</strong>，而在后续提到的进程间通信手段中，他们共同的点都是传递信息时将对象序列化，接收信息时则是将对象反序列化。</p><p>在Android中需要学习使用到的序列化手段有两个，分别是 <code>Serializable</code> 和 <code>Parcelable</code> </p><ul><li><p>Serializable</p><p><code>Serializable</code> 是 Java 自带的序列化接口，我们使用者只需要继承 <code>Serializable</code> 接口即可实现对该对象的序列化了。而具体去调用对其序列化和反序列化过程的也是 Java 提供的API。<code>ObjectOutputStream</code> 可以实现对象的序列化，<code>ObjectInputStream</code> 实现对象的反序列化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//序列化</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>                            <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"cache.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反序列化</span><span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"cache.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会在此处进行检查，是否同一 serialVersionUID</span>objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，被序列化的 <code>User</code> 类一般情况下需要指定一个 <code>serialVersionUID</code>，其作用是对该类做唯一标识，在反序列化时候会进行 serialVersionUID 的比对，如果不一致则会认为版本不同出现报错。</p><p>但是，如果不指定该 ID 也是可以正常实现序列化和反序列化的，因为系统会自动生成该类的 hash 值赋给 serialVersionUID 。那么为什么我们还要建议手动复制呢？因为 hash 值是根据类的变化在变化的，如果 ID 是 hash 值的话，我们在序列化对象后<strong>更改了对象的结构</strong>就会导致前后 ID 不一致，使得该对象无法被反序列化。但是手动指定的 ID 可以让被更改过的对象依旧可以被反序列化，<strong>可以最大限度地恢复其内容</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">519067123721295773L</span><span class="token punctuation">;</span><span class="token comment">//静态成员不参与序列化过程，代表类的状态</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> hhhhh<span class="token punctuation">;</span><span class="token comment">//被 transient 关键字修饰不参与序列化过程，代表对象的临时数据</span>        <span class="token keyword">public</span> <span class="token class-name">Book</span> book<span class="token punctuation">;</span><span class="token comment">//该类必须可以被序列化，即继承了 Serializable 接口，否则会报错。每个成员变量都必须可被序列化。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Parcelable</p><p><code>Parcelable</code> 是 Android 特有的序列化方法。他也是一个接口，实现该接口比 Serializable 要<strong>复杂一些</strong>。由于他是 Android 自带的序列化方法，所以对 Android 更加友好，实现该接口后的对象可以通过 Binder 来实现跨进程传递。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span> book<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isMale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isMale <span class="token operator">=</span> isMale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** * 自定义构造函数，辅助反序列化过程，其中由于 book 是另一个可序列化对象 * 所以，反序列化过程需要传递当前线程的上下文类加载器 */</span>    <span class="token keyword">private</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userId <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userName <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isMale <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readParcelable</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/** * 内容描述，基本都返回 0  */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/** * 序列化过程 */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>isMale <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeParcelable</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** * 反序列化过程 */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Parcelable<span class="token punctuation">.</span>Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcelable<span class="token punctuation">.</span>Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用自写的构造函数</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>系统自带的实现了 Parcelable 接口的类有：Intent、Bundle、Bitmap…，其中 List 和 Map 也可以直接序列化，但是要保证其中的每个元素都是可序列化的。注意，基本数据类型是天然支持序列化的了。</p></li></ul><h5 id="优劣对比"><a href="#优劣对比" class="headerlink" title="优劣对比"></a>优劣对比</h5><p>Serializable：Java自带、操作简单，但是I/O操作多、开销大(多用于序列化到存储设备，以及网络传输中)</p><p>Parcelable：Android自带、效率高，使用稍微复杂些(Android 中首选，多用于内存序列化)</p><h3 id="Binder-AIDL"><a href="#Binder-AIDL" class="headerlink" title="Binder_AIDL"></a>Binder_AIDL</h3><p>上面提到过 Binder 可用于进程间通信。那么 Binder 是什么东西呢？我们该如何理解 Binder ?</p><p>Binder 实际上是 Android 内部的一个类，其实现了 IBinder 接口，主要作用是用于支持 Android 的跨进程通信。</p><p><img src="https://pic.lxtlovely.top/blog/9532e77f-04b4-414c-a196-d8ebb1ed1f45.png"></p><p>如上图所示，我们可以视 Binder 为一个驱动，其连接客户端(进程1)与服务端(进程2)，客户端和服务端绑定后就借助 Binder 驱动来通信和获取对应服务。而在 Android 的底层设计中，Binder 也是 ServiceManager 连接各种 Manager 的桥梁。</p><p>那标题的 AIDL 又是什么呢？AIDL 使用 Binder 进行进程间通信的较常用较典型的方法。查看一个简单的 AIDL 示例可以简单的了解它是如何使用 Binder 进行进程间通信的。</p><p>AIDL 全称为：Android Interface Definition Language，即Android接口定义语言。它是一种模板，我们根据对应的规则写好我们需要的通信接口之后， AIDL 会为我们自动生成对应的 IPC 代码。</p><p>这里做一个示例，假设我们需要进行进程间通信的相关类为 Book，需要的通信服务为获得 Book 书单，以及向 Book 书单中添加书籍。那么我么可以以如下方式编写一个 AIDL 文件。</p><p>首先需要将 Book 类序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> bookId<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> bookName<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token keyword">int</span> bookId<span class="token punctuation">,</span> <span class="token class-name">String</span> bookName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bookId <span class="token operator">=</span> bookId<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>bookName <span class="token operator">=</span> bookName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>bookId <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bookName <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Describe the kinds of special objects contained in this Parcelable * instance's marshaled representation. For example, if the object will * include a file descriptor in the output of {@link #writeToParcel(Parcel, int)}, * the return value of this method must include the * {@link #CONTENTS_FILE_DESCRIPTOR} bit. * * @return a bitmask indicating the set of special object types marshaled * by this Parcelable object instance. */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Flatten this object in to a Parcel. * * @param dest  The Parcel in which the object should be written. * @param flags Additional flags about how the object should be written. *              May be 0 or {@link #PARCELABLE_WRITE_RETURN_VALUE}. */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>bookName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Parcelable<span class="token punctuation">.</span>Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/** * Create a new instance of the Parcelable class, instantiating it * from the given Parcel whose data had previously been written by * {@link Parcelable#writeToParcel Parcelable.writeToParcel()}. * * @param source The Parcel to read the object's data from. * @return Returns a new instance of the Parcelable class. */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Create a new array of the Parcelable class. * * @param size Size of the array. * @return Returns an array of the Parcelable class, with every entry * initialized to null. */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后要编写两个 AIDL 文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Book.aidl</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qxy<span class="token punctuation">.</span>potatos<span class="token punctuation">.</span>module<span class="token punctuation">.</span>test<span class="token punctuation">.</span>aidl</span><span class="token punctuation">;</span>parcelable <span class="token class-name">Book</span><span class="token punctuation">;</span><span class="token comment">// IBookManager.aidl</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qxy<span class="token punctuation">.</span>potatos<span class="token punctuation">.</span>module<span class="token punctuation">.</span>test<span class="token punctuation">.</span>aidl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qxy<span class="token punctuation">.</span>potatos<span class="token punctuation">.</span>module<span class="token punctuation">.</span>test<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span><span class="token class-name">Book</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IBookManager</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>in <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Book.aidl</code> 文件中，需要对自定义序列化的 Book 类进行序列化声明。然后在 <code>IBookManager.aidl</code> 文件中，声明两个方法，分别对应提出的两个需求，同时记得一定要手动导入 Book 类的路径。</p><p>编写好 AIDL 文件后，将项目 rebuild 一下，就可以在 build 的 generate 文件中看到生成的 <code>IBookManager</code> 类了。生成的这个类就可以用于辅助我们进行进程间通信了。</p><p>由于生成的文件较长，这里就不放出生成的文件源码了。我们看其生成的模板代码，可以得知，在不同进程时候，调用的是 Stub 内部的代理类 Proxy 来执行跨进程功能。同一进程的时候，则不会走这种跨进程的 transact 功能。</p><p>其中，几类方法或者成员变量值得关注</p><ul><li>DESCRIPTOR：Binder 唯一标识，一般是类名</li><li>asInterface：负责将服务端的 Binder 对象转化为该接口类型。根据是否同一进程有不同转换返回值。</li><li>asBinder：返回当前 Binder 值</li><li>onTransact：运行在服务端线程池中，从 data 中提出参数，执行 code 的目标，然后再 reply 中返回。该方法是 Boolean 类型，返回值为 <code>true</code> 表示执行成功， <code>false</code> 表示请求执行失败，可以控制这个返回值做权限隔离。</li><li>Proxy#getBookList   Proxy#addBook：这两个接口的实现方法运行在客户端线程池中。把参数信息写入 data 中，然后通过序列化、Binder 等手段发送给服务端去执行，然后线程挂起等待执行结果。如果有结果返回后，在 reply 中取出结果。</li></ul><p>由上述可知，这样的 Binder 过程是耗时的，不应执行在 UI 线程中；同时，由于其运行规则，我们需要采取同步的方式来进行，即使它很耗时，都需要客户端挂起等待服务端响应。</p><p><img src="https://pic.lxtlovely.top/blog/202302252242217.jpg" alt="Image00019"></p><h2 id="IPC各类手段"><a href="#IPC各类手段" class="headerlink" title="IPC各类手段"></a>IPC各类手段</h2><h3 id="基于Binder的手段"><a href="#基于Binder的手段" class="headerlink" title="基于Binder的手段"></a>基于Binder的手段</h3><h4 id="Intent-Bundle"><a href="#Intent-Bundle" class="headerlink" title="Intent-Bundle"></a>Intent-Bundle</h4><p>使用 Intent 是可以在启动四大组件的时候携带数据传递过去的，即使是不同进程间的数据，因为 Intent 的底层是使用了 Binder 机制来传递数据的。而在传递数据的时候，需要考虑的一点是就是数据需要时可序列化的。，此时我们可以使用 Bundle 类型来装载数据，Bundle 是支持序列化的一类常用数据。</p><blockquote><p>大家都知道，通过intent是能够传递数据的，但是当传递的数据量过大是，会抛出TransactionTooLargeException的异常，这就证明我们用intent传递数据时，只能是一些很小的数据，以防应用崩溃。</p><p>安卓在TransactionTooLargeException异常的文档中，就已经进行了详细的说明。简单来说，是因为当使用Intent来传递数据时，用到了Binder机制，数据就存放在了Binder的事务缓冲区里面，而事务缓冲区是有大小限制的，在没有修改过ROM的手机里，一般都是1M的大小。但是这并不意味着小于1M的数据就是安全的，因为这个事务缓冲区，是当前整个进程共享，可能会同时有多个地方在传递数据。这也就是说我们用intent传递数据时，就一定要考虑数据的大小</p><p><strong>如何解决</strong></p><p>开发中如果activity之间要传递一个Bitmap图片、文件等内容，虽然Bitmap对象已经序列化，可以通过Bundle传递，但是Bitmap对象通常较大，很容易引发TransactionTooLargeException异常。所以我们可以只传递该图片的id、网址、文件路径等，然后在接收的activity通过这些参数去还原该图片或者文件，而不需要把Bitmap对象或文件给整体传过去。</p></blockquote><h4 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h4><p><code>Messenger</code> 是一种基于 AIDL 封装的轻量型 IPC 方式，其直译为信使，负责的就是在进程间传递 Message 信息。Messenger 作为一个单次传递的信使，一次只能出力一个请求，传递单份信件，无需做线程同步的处理。</p><p>由于 Messenger 基于 AIDL 封装的，所以它的实现思路也是基于 C/S 结构通信。我们可以在客户端进程中绑定服务端的 Service，利用服务端返回的 IBinder 来创建一个 Messenger 对象，然后再使用这个对象来进行通信。具体编写如下所示：</p><p>首先我们来看服务端，我们在 <code>onBinder</code> 中返回了当前创建的 Messenger 的底层 Binder 实例。而其中的 Messenger 则是由一个自定义的 Handler 来创建的，这个 Handler 中先是在接收到匹配的信息后，对其内容进行打印；然后 msg.replyTo 是客户端传过来的回复信使，使用其在服务端进行实例声明，接着使用回复信使发送 <code>relpyMessage</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessengerService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"MessengerService"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MessengerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token class-name">MyConstants</span><span class="token punctuation">.</span>MSG_FROM_CLIENT<span class="token operator">:</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"receive msg from Client:"</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Messenger</span> client <span class="token operator">=</span> msg<span class="token punctuation">.</span>replyTo<span class="token punctuation">;</span>                <span class="token class-name">Message</span> relpyMessage <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">MyConstants</span><span class="token punctuation">.</span>MSG_FROM_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bundle<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"reply"</span><span class="token punctuation">,</span> <span class="token string">"嗯，你的消息我已经收到，稍后会回复你。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                relpyMessage<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>relpyMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Messenger</span> mMessenger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessengerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mMessenger<span class="token punctuation">.</span><span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接者我们再看客户端，首先使用 ServiceConnection 来编写与服务端的连接逻辑，这部分逻辑中，使用了服务端返回的 IBinder 创建一个信使 mService，mService 发送的 Message 中，记得要设置 <code>replyTo</code> 参数，要跟着发送给服务端的。这个 replyTo 参数是一个新的信使，其也使用了一个新的 Handler 来处理服务端返回的信息，其作用是用于服务端传递返回的消息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessengerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"MessengerActivity"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Messenger</span> mService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Messenger</span> mGetReplyMessenger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessengerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MessengerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token class-name">MyConstants</span><span class="token punctuation">.</span>MSG_FROM_SERVICE<span class="token operator">:</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"receive msg from Service:"</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"reply"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> mConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> className<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"bind service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">MyConstants</span><span class="token punctuation">.</span>MSG_FROM_CLIENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Bundle</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"hello, this is client."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>replyTo <span class="token operator">=</span> mGetReplyMessenger<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mService<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_messenger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.ryg.MessengerService.launch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> mConnection<span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unbindService</span><span class="token punctuation">(</span>mConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上述的代码实践中，我们可以看到在发送消息和返回消息这两次的消息传递中，我们使用了两个 Messenger 信使，这也说明了<strong>这一种 IPC 方式不是高效的，无法并发处理消息</strong>。而且在 Message 中，我们最常用到的数据类型就是 Bundle 了，由于它是已支持序列化的，所以可以进程间通信，这一个字段支持大量的数据类型，让我们可以进行传递的类型也更加丰富。还有一点需要注意的是，Message 的 object 字段，只有系统实现了 Parcelable 接口的数据类型才可以利用这个字段进行进程间通信。</p><h4 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h4><p>那么，作为 Messenger 的底层实现，AIDL 和 Messenger 又有什么不同呢？他们的不同点其实在于使用和功能方面</p><p>Messenger：不用编写 AIDL 文件，支持直接创建实例调用通信；串行处理消息；只支持传递消息</p><p>AIDL：需要编写 AIDL 文件生成支持 Binder 的代码；可以处理大量的并发请求；支持调用服务端的方法，不止于传递信息</p><p>前面已经介绍过 AIDL 的基本结构组成和生成方法了，这里再补充一些<strong>编写 AIDL 文件的规则</strong></p><ul><li><p>支持的数据类型</p><blockquote><ol><li>基本数据类型，int、short等</li><li>String 和 CharSequence</li><li>List：只支持 ArrayList ，且每个元素都需要被 AIDL 支持</li><li>Map：只支持 HashMap ，且每个元素都需要被 AIDL 支持</li><li>Parcelable：所有实现了 Parcelabel 接口的方法</li><li>AIDL：所有 AIDL 接口文件本身</li></ol></blockquote><p><img src="https://pic.lxtlovely.top/blog/202303032041418.png" alt="image-20230226220239008"></p></li><li><p>import规则：所有自定义的 Parcelable 对象和 AIDL 对象都需要显式 import 进来</p></li><li><p>自定义 Parcelable 对象规则：如果使用到自定义的 Parcelable 对象，那么需要为每一个这样的对象新建一个与它同名的 AIDL 文件</p></li><li><p>参数标志：除了基本类型，其他类型的参数必须标上 <code>in</code>、<code>out</code> 或 <code>inout</code>。分别表示：输入型参数、输出型参数、输入输出型参数。不要乱用，因为各自开销不同，乱用影响性能</p></li><li><p>接口支持：AIDL 中可以定义接口，但是这种接口只支持方法，不支持声明静态常量</p></li><li><p>文件位置：为了让方便迁移 AIDL 文件，建议把所有的 AIDL 文件放在同一个包中。因为如果需要将客户端和服务端的实现分到不同工程包中，或者要在不同 APP 中做 AIDL 通信，需要在客户端和服务端保持 AIDL 的包结构一致。所以如果放在同一个包中就方便迁移了。保持结构一致的原因是为了让反序列化可以正常执行。当然，新版的 AS 中，新建 AIDL 文件就会自动帮你归纳到 aidl 包中了。</p></li></ul><p>下面我们看一个利用 AIDL 来进行进程间通信的例子，它一样使用的是 C/S 结构</p><p>这里要实现的功能是客户端进程从服务端中获取书籍的列表，以及对其添加新的书籍；并且需要实现一个观察者模式，在客户端订阅书籍之后，服务端定时检查书籍并向客户端发布最新的书籍内容。其中，AIDL 文件可以基于上文中提到的进行修改，首先，需要新建一个观察者模式中需要用到的监听接口。其次，在 <code>IBookManager.aidl</code> 中添加绑定监听和解绑监听的接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// IOnNewBookArrivedListener.aidl</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qxy<span class="token punctuation">.</span>potatos<span class="token punctuation">.</span>module<span class="token punctuation">.</span>test<span class="token punctuation">.</span>aidl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qxy<span class="token punctuation">.</span>potatos<span class="token punctuation">.</span>module<span class="token punctuation">.</span>test<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span><span class="token class-name">Book</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IOnNewBookArrivedListener</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onNewBookArrived</span><span class="token punctuation">(</span>in <span class="token class-name">Book</span> newBook<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// IBookManager.aidl</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qxy<span class="token punctuation">.</span>potatos<span class="token punctuation">.</span>module<span class="token punctuation">.</span>test<span class="token punctuation">.</span>aidl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qxy<span class="token punctuation">.</span>potatos<span class="token punctuation">.</span>module<span class="token punctuation">.</span>test<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span><span class="token class-name">Book</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>qxy<span class="token punctuation">.</span>potatos<span class="token punctuation">.</span>module<span class="token punctuation">.</span>test<span class="token punctuation">.</span>aidl<span class="token punctuation">.</span></span><span class="token class-name">IOnNewBookArrivedListener</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IBookManager</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span>in <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token class-name">IOnNewBookArrivedListener</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unRegisterListener</span><span class="token punctuation">(</span><span class="token class-name">IOnNewBookArrivedListener</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由 AIDL 文件生成 Binder 模板代码后，接下来就可以编写服务端的代码了。服务端的主要逻辑是实例化 <code>IBookManager.Stub()</code> 返回给连接它的客户端，并且设置了一个 5 秒向客户端启用一次回调的子线程服务。其中需要注意的是，<code>CopyOnWriteArrayList</code> 是 自适应支持<strong>并发</strong>的 ArrayList，所以无需担心其中的并发问题。而另一个的 <code>RemoteCallbackList</code> ，是用于专门用于提供来绑定和解绑跨进程 Listener 接口的类，由于跨进程通信使用到的序列化和反序列化出来的示例并非同一示例，所以 <code>RemoteCallbackList</code> 中以 IBinder 为 key 存储监听对象，就可以解决多次传递 Listener 不是同一 Listener 的问题了。</p><blockquote><p><code>CopyOnWrite</code> 容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p><p>这样做的好处是我们可以对 <code>CopyOnWrite</code> 容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以 <code>CopyOnWrite</code> 容器也是一种<strong>读写分离</strong>的思想，读和写不同的容器。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookManagerService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"BMS"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> mBookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">RemoteCallbackList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IOnNewBookArrivedListener</span><span class="token punctuation">&gt;</span></span> mListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteCallbackList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">AtomicBoolean</span> mIsServiceDestroyed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">BookManagerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/** * &lt;p&gt;根据 AIDL 生成的模板代码，建立一个 Binder 实例&lt;/p&gt; * * &lt;p&gt;里面实现了包括权限检查，以及四个接口&lt;/p&gt; */</span><span class="token keyword">private</span> <span class="token class-name">Binder</span> mBinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IBookManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/** * &lt;pre&gt; *     该方法是服务端用于处理客户端请求的方法，所以可以在这里进行权限的鉴别。 * &lt;/pre&gt; * * @param code 客户端请求的目标方法 * @param data 包含目标方法所需的参数 * @param reply 目标方法的返回值 * @param flags 标志 * @return 如果不允许通信，则返回 false，否则返回 true * @throws RemoteException 异常抛出 */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">Parcel</span> data<span class="token punctuation">,</span> <span class="token class-name">Parcel</span> reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span><span class="token keyword">int</span> check <span class="token operator">=</span> <span class="token function">checkCallingOrSelfPermission</span><span class="token punctuation">(</span><span class="token string">"com.qxy.potatos.permission.ACCESS_BOOK_SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onTransact check="</span> <span class="token operator">+</span> check<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">==</span> <span class="token class-name">PackageManager</span><span class="token punctuation">.</span>PERMISSION_DENIED<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span><span class="token keyword">return</span> mBookList<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>mBookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * &lt;p&gt; *     直接调用 RemoteCallbackList 的监听方法，该类专门为多进程监听而生 *     调用 RemoteCallbackList 的 beginBroadcast() 计数后，记得调用 finishBroadcast() 停止计数 * &lt;/p&gt; * * @param listener 传入的监听实例 * @throws RemoteException 异常抛出 */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token class-name">IOnNewBookArrivedListener</span> listener<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>mListeners<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> mListeners<span class="token punctuation">.</span><span class="token function">beginBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"current size :"</span> <span class="token operator">+</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mListeners<span class="token punctuation">.</span><span class="token function">finishBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unRegisterListener</span><span class="token punctuation">(</span><span class="token class-name">IOnNewBookArrivedListener</span> listener<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>mListeners<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> mListeners<span class="token punctuation">.</span><span class="token function">beginBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"current size :"</span> <span class="token operator">+</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mListeners<span class="token punctuation">.</span><span class="token function">finishBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @param intent 传递的 Intent 类 * @return 返回值是当下的 Binder 实例，供客户端调用 */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> check <span class="token operator">=</span> <span class="token function">checkCallingOrSelfPermission</span><span class="token punctuation">(</span><span class="token string">"com.qxy.potatos.permission.ACCESS_BOOK_SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onbind check="</span> <span class="token operator">+</span> check<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">==</span> <span class="token class-name">PackageManager</span><span class="token punctuation">.</span>PERMISSION_DENIED<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> mBinder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Called by the system when the service is first created.  Do not call this method directly. */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mBookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Android"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mBookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"IOS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServiceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Called by the system to notify a Service that it is no longer used and is being removed.  The * service should clean up any resources it holds (threads, registered * receivers, etc) at this point.  Upon return, there will be no more calls * in to this Service object and it is effectively dead.  Do not call this method directly. */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mIsServiceDestroyed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 在有新书之后，遍历所有以及进行注册的监听者，然后调用其中的回调方法，把书籍实例传递过去 * @param book 需要通知到客户端的书籍实例 * @throws RemoteException 抛出异常 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onNewBookArrived</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>mBookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> mListeners<span class="token punctuation">.</span><span class="token function">beginBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">IOnNewBookArrivedListener</span> l <span class="token operator">=</span> mListeners<span class="token punctuation">.</span><span class="token function">getBroadcastItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>l<span class="token punctuation">.</span><span class="token function">onNewBookArrived</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>mListeners<span class="token punctuation">.</span><span class="token function">finishBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 每隔5秒，启动一次处理回调的方法 */</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ServiceWorker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment">/** * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used * to create a thread, starting the thread causes the object's * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing * thread. * &lt;p&gt; * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may * take any action whatsoever. * * @see Thread#run() */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>mIsServiceDestroyed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> bookId <span class="token operator">=</span> mBookList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Book</span> newBook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>bookId<span class="token punctuation">,</span><span class="token string">"new book# "</span> <span class="token operator">+</span> bookId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">onNewBookArrived</span><span class="token punctuation">(</span>newBook<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设计好服务端后，我们来看一下客户端.客户端在 ServiceConnection 中获取到 IBookManager 的实例，接着就可以调用服务端中的代码了。而 onNewBookArrived 回调接收到的信息，则由 Handler 转换到 UI 线程中处理。还需要注意的一点是，客户端中使用 DeathRecipient 来设置死亡代理，可以在服务端死亡断联后，重新对其发起连接。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoupletsActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"BookManagerActivity"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MESSAGE_NEW_BOOK_ARRIVED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">IBookManager</span> mRemoteBookManager<span class="token punctuation">;</span><span class="token comment">/** * &lt;p&gt;使用了弱引用和静态类，防止内存泄漏&lt;/p&gt; * * &lt;p&gt;由于客户端接收到的消息后，一般是要使用 UI 线程将内容改变显示出来。但是监听接口是运行在客户端线程池中的，不是 UI * 线程，所以需要使用到 Handler 再将此消息传递到 UI 线程中使用&lt;/p&gt; */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SafeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CoupletsActivity</span><span class="token punctuation">&gt;</span></span> ref<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">SafeHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Looper</span> looper<span class="token punctuation">,</span><span class="token class-name">CoupletsActivity</span> activity<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Subclasses must implement this to receive messages. * * @param msg */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> MESSAGE_NEW_BOOK_ARRIVED<span class="token operator">:</span><span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"receive new book :"</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 当服务端意外死亡后，进行断连和重连 */</span><span class="token keyword">private</span> <span class="token class-name">IBinder<span class="token punctuation">.</span>DeathRecipient</span> mDeathRecipient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IBinder<span class="token punctuation">.</span>DeathRecipient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binderDied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mRemoteBookManager <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>mRemoteBookManager<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlinkToDeath</span><span class="token punctuation">(</span>mDeathRecipient<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mRemoteBookManager <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//重新绑定</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">CoupletsActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">BookManagerService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span>serviceConnection<span class="token punctuation">,</span>BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * &lt;p&gt;连接 service 的方法，运行在主线程中，是连接调用服务端的第一使用位置&lt;/p&gt; * * &lt;p&gt;在连接服务的方法中，可以接收到服务端返回的 Binder 实例，然后以此实例化用于通信的类，以及调用其中的接口方法&lt;/p&gt; * * &lt;p&gt;注意，这里还进行了死亡代理的设置&lt;/p&gt; */</span><span class="token keyword">private</span> <span class="token class-name">ServiceConnection</span> serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">IBookManager</span> bookManager <span class="token operator">=</span> <span class="token class-name">IBookManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>mRemoteBookManager <span class="token operator">=</span> bookManager<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>mRemoteBookManager<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">linkToDeath</span><span class="token punctuation">(</span>mDeathRecipient<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> bookManager<span class="token punctuation">.</span><span class="token function">getBookList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"list type: "</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"list: "</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bookName<span class="token punctuation">)</span><span class="token punctuation">;</span>bookManager<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span>mOnNewBookArrivedListener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>mRemoteBookManager <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * 使用 Handler，将调用转移到 UI 线程中进行 */</span><span class="token keyword">private</span> <span class="token class-name">IOnNewBookArrivedListener</span> mOnNewBookArrivedListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IOnNewBookArrivedListener<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/** * Demonstrates some basic types that you can use as parameters * and return values in AIDL. * * @param newBook */</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNewBookArrived</span><span class="token punctuation">(</span><span class="token class-name">Book</span> newBook<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">SafeHandler</span><span class="token punctuation">(</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">CoupletsActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MESSAGE_NEW_BOOK_ARRIVED<span class="token punctuation">,</span>newBook<span class="token punctuation">.</span>bookName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_couplets<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">BookManagerService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span>serviceConnection<span class="token punctuation">,</span>BIND_AUTO_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mRemoteBookManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token operator">&amp;&amp;</span> mRemoteBookManager<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBinderAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"unregister listener: "</span> <span class="token operator">+</span> mOnNewBookArrivedListener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>mRemoteBookManager<span class="token punctuation">.</span><span class="token function">unRegisterListener</span><span class="token punctuation">(</span>mOnNewBookArrivedListener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">unbindService</span><span class="token punctuation">(</span>serviceConnection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AIDL 调用服务端的方法时候，特别要<strong>注意线程耗时问题</strong>，因为服务端的执行跨进程方法的时候，<strong>客户端的方法也会挂起等待</strong>。所以这时客户端对该方法的调用不能运行在 UI 线程中，否则很容易出现 ANR。而客户端连接服务端的 <code>onServiceConnected</code> 和 <code>onServiceDisconnected</code> 正是运行在 UI 线程中的，所以如果服务端的方法是耗时的，记得手动切换客户端的调用到子线程中。</p><p>同理，服务端要调用客户端的监听方法 onNewBookArrived 的时候，也要注意 onNewBookArrived 是否为耗时方法，因为服务端调用客户端的时候也会挂起。我们需要保证服务端的调用运行在子线程中，否则容易出现无法响应的情况，因为 Service 默认运行在主线程中的。</p><h4 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h4><p><code>ContentProvider</code> 作为 Android 的四大组件之一，其功能是用于 Android 的不同程序间进行数据共享。它的底层实现也是 Binder ，但是由于 Android 的封装，我们对 ContentProvider 的使用就会简单方便很多。Android 的不同程序就是不同进程，所以 ContentProvider 就是用于进程间通信的官方手段。</p><p>由于 ContentProvider 是 Android 的基础内容，所以这里不做过多的基础使用介绍，需要复习的同学可以查看《第一行代码》，下面只做一些重点解释和需要注意的点。</p><p>ContentProvider 提供给开发者几个分别需要重写的抽象方法，其中最主要的分别是增删查改四个方法，这几个方法在涉及的结构上是很像数据库的四个操作方法。但是它所能支持的数据操作不限于数据库，图片、文本等都可以通过它提供给外界进行增删查改。下面的代码是一个内容提供器的实现，主要功能是提供给其他进程操作该进程的两个数据库，相信大家都能看懂下面的代码。</p><p>下面我们对一些重要的点做说明</p><ol><li>需要重写的6个方法中，只有 onCreate() 是运行在主线程中的，其他的5个方法都是运行在 Binder 线程池的。</li><li>在进行了数据更新的地方使用 <code>mContext.getContentResolver().notifyChange(uri, null);</code> 通知注册了观察者的客户端。而在客户端可以使用 <code>registerContentObserver(Uri uri, boolean notifyForDescendants, ContentObserver observer) unregisterContentObserver(ContentObserver observer)</code> 注册和解除其注册。</li><li>增删查改方法是并发执行的，所以要做好其同步操作。但是由于调用的 SQLiteDatebase 是自支持线程同步的，所以使用单个 SQLiteDatebase 操作的时候无需考虑同步操作，但是同时使用多个 SQLiteDatebase 操作的时候就会导致数据操作出错。</li><li>如果共享的数据底层是 List 这种，则需要考虑多线程带来的线程不安全问题，并发操作时候容易出现脏数据。那么可以使用 <code>Collection</code> 集合、<code>vector</code> 类或者是 <code>CopyOnWrite</code> 类来进行数据同步操作。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ContentProvider</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"BookProvider"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AUTHORITY <span class="token operator">=</span> <span class="token string">"com.ryg.chapter_2.book.provider"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Uri</span> BOOK_CONTENT_URI <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://"</span>            <span class="token operator">+</span> AUTHORITY <span class="token operator">+</span> <span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Uri</span> USER_CONTENT_URI <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://"</span>            <span class="token operator">+</span> AUTHORITY <span class="token operator">+</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BOOK_URI_CODE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> USER_URI_CODE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">UriMatcher</span> sUriMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UriMatcher</span><span class="token punctuation">(</span>            <span class="token class-name">UriMatcher</span><span class="token punctuation">.</span>NO_MATCH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        sUriMatcher<span class="token punctuation">.</span><span class="token function">addURI</span><span class="token punctuation">(</span>AUTHORITY<span class="token punctuation">,</span> <span class="token string">"book"</span><span class="token punctuation">,</span> BOOK_URI_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>        sUriMatcher<span class="token punctuation">.</span><span class="token function">addURI</span><span class="token punctuation">(</span>AUTHORITY<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">,</span> USER_URI_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> mContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SQLiteDatabase</span> mDb<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate, current thread:"</span>                <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mContext <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initProviderData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initProviderData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DbOpenHelper</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDb<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"delete from "</span> <span class="token operator">+</span> <span class="token class-name">DbOpenHelper</span><span class="token punctuation">.</span>BOOK_TABLE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDb<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"delete from "</span> <span class="token operator">+</span> <span class="token class-name">DbOpenHelper</span><span class="token punctuation">.</span>USER_TALBE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDb<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"insert into book values(3,'Android');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDb<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"insert into book values(4,'Ios');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDb<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"insert into book values(5,'Html5');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDb<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"insert into user values(1,'jake',1);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDb<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"insert into user values(2,'jasmine',0);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Cursor</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> projection<span class="token punctuation">,</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span> <span class="token class-name">String</span> sortOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"query, current thread:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token function">getTableName</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unsupported URI: "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mDb<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> projection<span class="token punctuation">,</span> selection<span class="token punctuation">,</span> selectionArgs<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> sortOrder<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"getType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Uri</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token class-name">ContentValues</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token function">getTableName</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unsupported URI: "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mDb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        mContext<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyChange</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> uri<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token function">getTableName</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unsupported URI: "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> mDb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> selection<span class="token punctuation">,</span> selectionArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyChange</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token class-name">ContentValues</span> values<span class="token punctuation">,</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token function">getTableName</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unsupported URI: "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> mDb<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> values<span class="token punctuation">,</span> selection<span class="token punctuation">,</span> selectionArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyChange</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> row<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> tableName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>sUriMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> BOOK_URI_CODE<span class="token operator">:</span>            tableName <span class="token operator">=</span> <span class="token class-name">DbOpenHelper</span><span class="token punctuation">.</span>BOOK_TABLE_NAME<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> USER_URI_CODE<span class="token operator">:</span>            tableName <span class="token operator">=</span> <span class="token class-name">DbOpenHelper</span><span class="token punctuation">.</span>USER_TALBE_NAME<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tableName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Binder之外的手段"><a href="#Binder之外的手段" class="headerlink" title="Binder之外的手段"></a>Binder之外的手段</h3><h4 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h4><p>使用文件共享来进行进程通信的方式为：在A进程中写入数据到文件中，然后在B进程中读取该文件的数据，这就完成了两个进程间的通信。而若是需要传递对象的话，可以将对象序列化存入文件当中，然后再由其他进程来反序列化读取该数据出来。</p><p>文件共享来传递数据对文件格式是没有要求的，可以是 xml，也可以是文本文件，只要协商好了同一的格式就可以了。由于 Android 的底层是 Linux，所以是不会在读写文件的时候加锁的，所以 Android 是有利于并发读写的。当然，这种方式只适合在对数据同步要求不高的进程之间使用。</p><p>虽说文件共享方式对于文件格式是没有要求的，但是却并不建议使用 SharedPreferences 来进行进程间通信。为什么呢？SP 的底层不是 xml 文件么？事实上，不建议的原因并不是因为文件格式问题，而是由于 SP 的<strong>读取缓存策略</strong>问题。SP 在读取文件的时候，不同进程会在内存中复制一份数据以便于快速读写，所以当使用多进程访问该文件的时候，就会很容易出现并发性导致的数据丢失问题，所以不建议使用 SP 做进程间通信。</p><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><p>Socket 是网络套接字，分为流式套接字和用户数据报套接字，分别对应 TCP 和 UDP 协议。TCP 提供稳定的双向通信，三次握手使得数据可以稳定传输；而 UDP 则是注重于效率，不能保证数据能够正确传输。</p><p>使用 Socket 借助 TCP 或者 UDP 在 Android 中开辟端口来提供数据和读取数据，一样也可以实现进程间的通信。</p><p>下面例子是实现一个客户端向服务端发送信息，然后服务端接收到后就随机回复一条信息的功能。下面给出服务端的实现例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPServerService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mIsServiceDestoryed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mDefinedMessages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token string">"你好啊，哈哈"</span><span class="token punctuation">,</span>            <span class="token string">"请问你叫什么名字呀？"</span><span class="token punctuation">,</span>            <span class="token string">"今天北京天气不错啊，shy"</span><span class="token punctuation">,</span>            <span class="token string">"你知道吗？我可是可以和多个人同时聊天的哦"</span><span class="token punctuation">,</span>            <span class="token string">"给你讲个笑话吧：据说爱笑的人运气不会太差，不知道真假。"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mIsServiceDestoryed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">TcpServer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8688</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"establish tcp server failed, port:8688"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>mIsServiceDestoryed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment">// 接受客户端请求</span>                    <span class="token keyword">final</span> <span class="token class-name">Socket</span> client <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                <span class="token function">responseClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">responseClient</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> client<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 用于接收客户端消息，接收到客户端消息后就直接发送消息</span>        <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>                client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 用于向客户端发送消息</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎来到聊天室！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>mIsServiceDestoryed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg from client:"</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>mDefinedMessages<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> msg <span class="token operator">=</span> mDefinedMessages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送消息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"send :"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client quit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭流</span>        <span class="token class-name">MyUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们来看一下客户端的实现例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPClientActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MESSAGE_RECEIVE_NEW_MSG <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MESSAGE_SOCKET_CONNECTED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Button</span> mSendButton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TextView</span> mMessageTextView<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">EditText</span> mMessageEditText<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PrintWriter</span> mPrintWriter<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> mClientSocket<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"HandlerLeak"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Handler</span> mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MESSAGE_RECEIVE_NEW_MSG<span class="token operator">:</span> <span class="token punctuation">{</span>                mMessageTextView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>mMessageTextView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> MESSAGE_SOCKET_CONNECTED<span class="token operator">:</span> <span class="token punctuation">{</span>                mSendButton<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_tcpclient<span class="token punctuation">)</span><span class="token punctuation">;</span>        mMessageTextView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>msg_container<span class="token punctuation">)</span><span class="token punctuation">;</span>        mSendButton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>send<span class="token punctuation">)</span><span class="token punctuation">;</span>        mSendButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mMessageEditText <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">TCPServerService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">connectTCPServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mClientSocket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mClientSocket<span class="token punctuation">.</span><span class="token function">shutdownInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mClientSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> mSendButton<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">String</span> msg <span class="token operator">=</span> mMessageEditText<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mPrintWriter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mPrintWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                mMessageEditText<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token function">formatDateTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token class-name">String</span> showedMsg <span class="token operator">=</span> <span class="token string">"self "</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>                mMessageTextView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>mMessageTextView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> showedMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"SimpleDateFormat"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">formatDateTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"(HH:mm:ss)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">connectTCPServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>socket <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8688</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mClientSocket <span class="token operator">=</span> socket<span class="token punctuation">;</span>                mPrintWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MESSAGE_SOCKET_CONNECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"connect server success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"connect tcp server failed, retry..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 接收服务器端的消息</span>            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>                    socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TCPClientActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFinishing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"receive :"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token function">formatDateTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token class-name">String</span> showedMsg <span class="token operator">=</span> <span class="token string">"server "</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg                            <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>                    mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MESSAGE_RECEIVE_NEW_MSG<span class="token punctuation">,</span> showedMsg<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"quit..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MyUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>mPrintWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MyUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>br<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 Socket 的跨进程通信是使用了设备的端口来连接通信的，所以它也可以实现跨设备的通信。而 Socket 的进程间通信方式开销太大了，在性能上不利于用于设备内部的进程通信，但是多用于与设备外部的进程通信。</p><h3 id="不同方式优缺点"><a href="#不同方式优缺点" class="headerlink" title="不同方式优缺点"></a>不同方式优缺点</h3><p><img src="https://pic.lxtlovely.top/blog/202303032047908.jpg" alt="Image00025"></p><h2 id="使用-Binder-连接池"><a href="#使用-Binder-连接池" class="headerlink" title="使用 Binder 连接池"></a>使用 Binder 连接池</h2><p>前面我们在使用 AIDL 来进行通信的时候，是一个 service 实现一个AIDL接口的功能，那么当一个进程中的 AIDL 很多的时候，应该怎么办呢？我们总不能使用很多个 service 来进行服务，这样子 App 的开销就太大了。所以这里使用 Binder 连接池来作一个服务化架构，Binder 连接池对服务端线程的所有的 AIDL 进行统一管理和统一分配，在服务端提供一个 queryBinder 接口返回相应 Binder 对象给服务端。这可以实现各功能的解耦、方便客户端调用以及易于功能的更新迭代。</p><p><img src="https://pic.lxtlovely.top/blog/202303032047087.jpg" alt="Image00024"></p><p>具体的实现来自于任玉刚老师的《Android开发艺术探索》，可以在此查看<a href="https://github.com/singwhatiwanna/android-art-res/tree/master/Chapter_2/src/com/ryg/chapter_2/binderpool">源码</a>。其中有几点做如下记录</p><ol><li><code>CountDownLatch</code> 可以阻塞线程，使得线程之间的执行同步化。保证线程池中方法的正确执行顺序</li><li><code>BinderPool</code> 运行在客户端进程中，其内部静态类 <code>BinderPoolImpl</code> 运行在服务端进程中，这点可以从各自调用以及静态内部类特性看出。</li><li>客户端访问 Binder 连接池获取对应 IBinder 的时候需要在子线程中执行，因为前面做了线程同步化工作，其有可能耗时，服务端调用 Binder 是在 Binder 线程池的，也可能是耗时的。</li><li>可以在 Application 中初始化 BinderPool，以减少初次加载耗时，优化体验</li><li>即使 BinderPool 中有死亡连接机制，断联后仍需在客户端获取最新的 IBinder</li></ol><h2 id="Binder-底层原理和优势"><a href="#Binder-底层原理和优势" class="headerlink" title="Binder 底层原理和优势"></a>Binder 底层原理和优势</h2><p>前面我们讲到了需要使用到 Binder 来进行进程间通信，但是为什么 Binder 可以进程间通信呢？不知道这个问题大家是否有思考过，下面我们就来看看 Binder 的底层通信原理，从原理上面来看一下其被 Android 所选择的优势是什么。</p><p>首先，我们先来看一下在 Linux 系统中的进程通信原理，在 Linux 中将寻址空间分为<strong>用户空间</strong>以及<strong>内核空间</strong>。内核空间是系统内核运行的空间，用户空间是用户程序运行的空间，为保证内核的安全性和系统的安全性，内核空间和系统空间是隔离的。</p><p>但是由于用户空间必然会需要和内核空间进行交流，所以就有一套在用户空间和内核空间的信息交流方式。两个空间突破隔离的方式就是使用<strong>系统调用</strong>，这样子可以保证所有访问内核空间的方式都是在内核的控制之下进行的，可以保证访问的安全性。而这个过程中，如果进程陷入了内核代码中执行的时候，那么进程就属于<strong>内核态</strong>中，如果是在执行用户程序自己的代码的时候，那么就是处于<strong>用户态</strong>中。</p><p>而在 Linux 中，就是利用系统调用，将需要发送的数据放到内核空间开辟的一块内核缓存区中，然后接收数据的进程则将内核缓存区中的数据又放到自己的一块内存缓存区中。这样子就完成了一次进程间通信。需要注意到的是，这一次通信，需要使用到两次的复制。</p><p><img src="https://pic.lxtlovely.top/blog/2612a42f-8ef4-4f8d-a9b4-a64d153e6ad0.png"></p><p>然后我们来看一下 Android 中的 Binder 的运行原理。Binder 的通信使用的是 <strong>Binder 驱动</strong>，这个驱动不是 Linux 内核里面的，是一个动态可加载的内核，是在 Android 系统中独有的。而 Binder 驱动使用到的数据传递方法是内存映射，这个内存映射是通过 mmap() 实现的。</p><blockquote><p>Binder IPC 机制中涉及到的内存映射通过 mmap() 来实现，mmap() 是操作系统中一种内存映射的方法。内存映射简单的讲就是将用户空间的一块内存区域映射到内核空间。映射关系建立后，用户对这块内存区域的修改可以直接反应到内核空间；反之内核空间对这段区域的修改也能直接反应到用户空间。</p><p>内存映射能减少数据拷贝次数，实现用户空间和内核空间的高效互动。两个空间各自的修改能直接反映在映射的内存区域，从而被对方空间及时感知。也正因为如此，内存映射能够提供对进程间通信的支持。</p><p>一次完整的 Binder IPC 通信过程通常是这样：</p><ol><li>首先 Binder 驱动在内核空间创建一个数据接收缓存区；</li><li>接着在内核空间开辟一块内核缓存区，建立<strong>内核缓存区</strong>和<strong>内核中数据接收缓存区</strong>之间的映射关系，以及<strong>内核中数据接收缓存区</strong>和<strong>接收进程用户空间地址</strong>的映射关系；</li><li>发送方进程通过系统调用 copy_from_user() 将数据 copy 到内核中的<strong>内核缓存区</strong>，由于内核缓存区和接收进程的用户空间存在内存映射，因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间的通信。</li></ol></blockquote><p><img src="https://pic.lxtlovely.top/blog/72ebf1e1-ecd9-4f59-ad6c-2749fc4cc281.png"></p><p>所以说，由于内存映射的存在，数据的拷贝次数就是只需要一次就可以了，比共享内存性能稍微差一些，但是 Binder 的 C/S 架构让进程通信机制更加的稳定、使用更加方便；而且 Binder 的安全性也是更好的，其为每个 APP 都分配 UID，让进程鉴定机制更加的完备。</p><p><img src="https://pic.lxtlovely.top/blog/dbf6e5a4-ce13-40ea-b941-248910610fcf.png"></p><p>最后提一点需要注意的地方，建立通信服务端(Service)的时候，是需要在 ServiceManager 处注册的，然后注册时候告知需要返回的 Binder 是哪个存入到注册表中，最后客户端(Client)再通过 ServiceManager 获取到注册表中对应的 Binder。但是需要注意的是，Service 与 ServiceManager 的通信也是使用 Binder 来通信的，而这里面的 Binder 是系统自动创建好的。</p><p><img src="https://pic.lxtlovely.top/blog/7155ffa5-bdbf-4f42-8bdf-b2c119a5df82.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_47465999/article/details/124885707">序列化和反序列化有什么作用？_java序列化和反序列化的作用_小官学长的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/goodlixueyong/article/details/90183321">关于Java中Serializable的一些问题_viclee108的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qing_gee/article/details/104388158/">教妹学Java(九)：一文搞懂Java中的基本数据类型_沉默王二的博客-CSDN博客_java基本数据类型</a></p><p><a href="https://blog.csdn.net/zzx752904457/article/details/102609006">Intent、Bundle传递数据的那些秘密_请叫我鲜鲜哥的博客-CSDN博客</a></p><p><a href="https://juejin.cn/post/6844903589635162126">写给 Android 应用工程师的 Binder 原理剖析 - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/weixin_42601136/article/details/107108818">Java中线程安全的集合_java线程安全的集合_Willing卡卡的博客-CSDN博客</a></p><p><img src="https://pic.lxtlovely.top/blog/12d2e626-df86-4abd-9d29-b3924fa1ec15.png"></p><p><img src="https://pic.lxtlovely.top/blog/81716969-1ca0-4e80-9d47-550995d73074.png"></p>]]></content>
      
      
      <categories>
          
          <category> IPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPC机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图+源码，读懂View的Measure方法</title>
      <link href="/2023/04/05/tu-yuan-ma-du-dong-view-de-measure-fang-fa/"/>
      <url>/2023/04/05/tu-yuan-ma-du-dong-view-de-measure-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="图-源码，读懂View的Measure方法"><a href="#图-源码，读懂View的Measure方法" class="headerlink" title="图+源码，读懂View的Measure方法"></a>图+源码，读懂View的Measure方法</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第14天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><strong>读懂 View 三大绘制方法的文章</strong></p><p><a href="https://juejin.cn/post/7152902416046751780">图+源码，读懂View的MeasureSpec - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7153157173525086244">图+源码，读懂View的Measure方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7153606917351604255">图+源码，读懂View的Layout方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154013916400451620">图+源码，读懂View的Draw方法 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解 View 体系</li><li>了解 View 的 <code>MeasureSpec</code> 方法</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇是 <strong>读懂View</strong> 系列的第二篇文章，本文将给大家正式开始讲解View绘制的三大方法，本篇将讲述第一个方法—— <strong>Measure 方法</strong>。</p><h2 id="Measure方法有何作用"><a href="#Measure方法有何作用" class="headerlink" title="Measure方法有何作用"></a>Measure方法有何作用</h2><p>讲到Measure方法的作用，我们需要回顾一下在<a href="https://juejin.cn/post/7125824443598766116">View体系(下)</a>一文中学到的页面绘制流程一图，为方便你查看，我把这个绘制流程图搬来这里。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b00d3fb54405463d8295edc9a8b11b36~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>通过此图，我们可以看到，在执行 <code>performTraversals()</code> 方法的时候，其方法内部会依次执行 <code>performMeasure()</code>、<code>performLayout</code>() 和 <code>performDraw</code>() 方法。下面 <code>performTraversals()</code> 的源码是经过的裁剪的，我们可以很清楚的看到三者的执行顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mStopped <span class="token operator">||</span> mReportNextDraw<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token function">performMeasure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>didLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">performLayout</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">performDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mSyncBufferCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mSyncBufferCallback<span class="token punctuation">.</span><span class="token function">onBufferReady</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上一篇文章中我们提到，在 <code>performMeasure</code> 方法内部，它是会执行 <code>measure()</code> 方法的。所以说，<code>measure()</code> 方法是三大绘制方法中首个执行的方法，<strong>其作用是测量 View 的宽和高</strong>。它的作用流程又两个，一个是 <code>View</code> 的作用流程，一个是 <code>ViewGroup</code> 的作用流程。两个流程有所不同，下面我们细细道来。</p><h2 id="View-的-measure-流程"><a href="#View-的-measure-流程" class="headerlink" title="View 的 measure 流程"></a>View 的 measure 流程</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>首先我们打开View的源码，找到 <code>onMeasure()</code> 方法，下面代码中，由于注释占据的篇幅较大，我删去了一些。注释中<strong>主要说的是</strong>，该段代码是用于测量View的宽度和高度，该方法会被 <code>measure()</code> 方法调用，如果继承View使用该方法的话，建议重写以提供更加准确的功能。并且写了一些重写的要求和哪种情况必须重写。</p><p>在 <code>onMeasure()</code> 方法中，我们可以看到传入的参数正是上一篇文章中我们讲的 <code>MeasureSpec</code> ，它的参数由 <code>measure()</code> 方法调用的时候传入，而 <code>measure()</code> 方法则是提供给 <code>performMeasure</code> 方法调用来测量的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * ...省略一大段注释，有兴趣的同学可查阅源码的注释 * @see #getMeasuredWidth() * @see #getMeasuredHeight() * @see #setMeasuredDimension(int, int) * @see #getSuggestedMinimumHeight() * @see #getSuggestedMinimumWidth() * @see android.view.View.MeasureSpec#getMode(int) * @see android.view.View.MeasureSpec#getSize(int) */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token function">getDefaultSize</span><span class="token punctuation">(</span><span class="token function">getSuggestedMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token function">getDefaultSize</span><span class="token punctuation">(</span><span class="token function">getSuggestedMinimumHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>forceLayout <span class="token operator">||</span> needsLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> sIgnoreMeasureCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// measure ourselves, this should set the measured dimension flag back</span>            <span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用onMeasure()</span>            mPrivateFlags3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现，<code>onMeasure()</code> 里面只有一个 <code>setMeasuredDimension()</code> 方法。我们接着看一下其代码，它需要传入两个参数，分别是<strong>测量的宽度和高度</strong>，看一下代码的执行过程，我们可以发现，<strong>这段代码是用来设置 View 的宽以及高的</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token keyword">int</span> measuredWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> measuredHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> optical <span class="token operator">=</span> <span class="token function">isLayoutModeOptical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>optical <span class="token operator">!=</span> <span class="token function">isLayoutModeOptical</span><span class="token punctuation">(</span>mParent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Insets</span> insets <span class="token operator">=</span> <span class="token function">getOpticalInsets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> opticalWidth  <span class="token operator">=</span> insets<span class="token punctuation">.</span>left <span class="token operator">+</span> insets<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">int</span> opticalHeight <span class="token operator">=</span> insets<span class="token punctuation">.</span>top  <span class="token operator">+</span> insets<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>        measuredWidth  <span class="token operator">+=</span> optical <span class="token operator">?</span> opticalWidth  <span class="token operator">:</span> <span class="token operator">-</span>opticalWidth<span class="token punctuation">;</span>        measuredHeight <span class="token operator">+=</span> optical <span class="token operator">?</span> opticalHeight <span class="token operator">:</span> <span class="token operator">-</span>opticalHeight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setMeasuredDimensionRaw</span><span class="token punctuation">(</span>measuredWidth<span class="token punctuation">,</span> measuredHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setMeasuredDimensionRaw</span><span class="token punctuation">(</span><span class="token keyword">int</span> measuredWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> measuredHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mMeasuredWidth <span class="token operator">=</span> measuredWidth<span class="token punctuation">;</span>    mMeasuredHeight <span class="token operator">=</span> measuredHeight<span class="token punctuation">;</span>    mPrivateFlags <span class="token operator">|=</span> PFLAG_MEASURED_DIMENSION_SET<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到这里，会发现，我们仍未看到 View 的<strong>宽以及高在何处进行测量</strong>的。</p><p>继续点开 <code>getDefaultSize()</code> 的代码，我们在此处可以看到代码中传入了 View 的大小(size)，View 的 <code>measureSpec</code> 数据。然后代码执行了以下的步骤。</p><ol><li>在注释1和2处，通过 <code>MeasureSpec</code> 类，获得了 <code>specMode</code> 和 <code>specSize</code> 两个数据</li><li>然后在注释3处，根据不同的模式，放回不同的size大小值</li></ol><p>但是在 AT_MOST 和 EXACTLY (就是wrap_content和match_parent)两种模式下，其返回值是一样的，这明显是不对的。所以说，当我们<strong>自定义 View 需要 wrap_content 属性时，需要重写 <code>onMeasure()</code> 方法，对该属性进行处理，否则使用 wrap_content 就相当于使用 match_parent</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Utility to return a default size. Uses the supplied size if the * MeasureSpec imposed no constraints. Will get larger if allowed * by the MeasureSpec. * * @param size Default size for this view * @param measureSpec Constraints imposed by the parent * @return The size this view should be. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDefaultSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">int</span> specMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token keyword">int</span> specSize <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>specMode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//3</span>        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>UNSPECIFIED<span class="token operator">:</span>            result <span class="token operator">=</span> size<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>EXACTLY<span class="token operator">:</span>            result <span class="token operator">=</span> specSize<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面 <code>getDefaultSize()</code> 的代码中，在 UNSPECIFIED 模式下，是直接返回传入的 <code>size</code> ，而这个 <code>size</code> 则是由 <code>getSuggestedMinimumWidth()</code> 或者是 <code>getSuggestedMinimumHeight()</code> 方法传递得出，两个方法的处理逻辑是一样的，我们分析其中一个就可。</p><p>查阅  <code>getSuggestedMinimumWidth()</code> 的代码，我们会发现，它的逻辑是：<strong>当无背景时，直接返回 <code>mMinWidth</code> ；而当有背景的时候，返回的是  <code>mMinWidth</code> 和 背景(Drawable)最小宽度两者之间的最大值</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Returns the suggested minimum width that the view should use. This * returns the maximum of the view's minimum width * and the background's minimum width *  ({@link android.graphics.drawable.Drawable#getMinimumWidth()}). * &lt;p&gt; * When being used in {@link #onMeasure(int, int)}, the caller should still * ensure the returned width is within the requirements of the parent. * * @return The suggested minimum width of the view. */</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getSuggestedMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>mBackground <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> mMinWidth <span class="token operator">:</span> <span class="token function">max</span><span class="token punctuation">(</span>mMinWidth<span class="token punctuation">,</span> mBackground<span class="token punctuation">.</span><span class="token function">getMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//getSuggestedMinimumHeight()同理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中的 <code>mMinWidth</code> ，是可以通过 <code>Android:minWidth</code> 这个属性设置，或者是通过 View 的 <code>setMinimumWidth()</code>这个方法来设置值，若不设置，则为默认值0 。下面给出其get和set代码供大家查看。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Returns the minimum height of the view. * * @return the minimum height the view will try to be, in pixels * * @see #setMinimumHeight(int) * * @attr ref android.R.styleable#View_minHeight */</span><span class="token annotation punctuation">@InspectableProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"minHeight"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMinimumHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> mMinHeight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Sets the minimum height of the view. It is not guaranteed the view will * be able to achieve this minimum height (for example, if its parent layout * constrains it with less available height). * * @param minHeight The minimum height the view will try to be, in pixels * * @see #getMinimumHeight() * * @attr ref android.R.styleable#View_minHeight */</span><span class="token annotation punctuation">@RemotableViewMethod</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMinimumHeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> minHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mMinHeight <span class="token operator">=</span> minHeight<span class="token punctuation">;</span>    <span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//对应的Width方法同理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，我们看一下 <code>mBackground.getMinimumWidth()</code> 这个背景宽度的获取代码，由于这个背景类是 <code>Drawable</code> 类型的，所以这个方法也是在  <code>Drawable</code> 类下面的。我们看到方法中对 <code>intrinsicWidth</code> 进行判断，而当他未被设置固有宽度的时候 <code>intrinsicWidth</code> 则为-1，那么返回的值将为0 。反之，则返回固有的宽度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Returns the minimum width suggested by this Drawable. If a View uses this * Drawable as a background, it is suggested that the View use at least this * value for its width. (There will be some scenarios where this will not be * possible.) This value should INCLUDE any padding. * * @return The minimum width suggested by this Drawable. If this Drawable *         doesn't have a suggested minimum width, 0 is returned. */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMinimumWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> intrinsicWidth <span class="token operator">=</span> <span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> intrinsicWidth <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> intrinsicWidth <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Returns the drawable's intrinsic width. * &lt;p&gt; * Intrinsic width is the width at which the drawable would like to be laid * out, including any inherent padding. If the drawable has no intrinsic * width, such as a solid color, this method returns -1. * * @return the intrinsic width, or -1 if no intrinsic width */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIntrinsicWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="View的Measure流程图"><a href="#View的Measure流程图" class="headerlink" title="View的Measure流程图"></a>View的Measure流程图</h3><p>根据上面的源码分析，得出该过程的图为</p><p><img src="https://pic.lxtlovely.top/blog/20221011140418.png"></p><h2 id="ViewGroup-的-measure-流程"><a href="#ViewGroup-的-measure-流程" class="headerlink" title="ViewGroup 的 measure 流程"></a>ViewGroup 的 measure 流程</h2><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>对于 ViewGroup 的 measure 流程，与 View 不同的地方就是：<strong>它不仅要测量自身，还要遍历的调用子元素的measure方法</strong>。</p><p>我们知道，<strong>ViewGroup 是继承自 View 的</strong>，所以，它可以使用 View(实际上让子类重写实现) 的 <code>measure()</code> 和 <code>onMeasure()</code> 方法。我们直接查看它实现遍历子类的方法即可。</p><p>其遍历子类的方法是 <code>measureChildren()</code> 。阅读其代码可发现，它遍历每一个子元素，调用的是 <code>measureChild()</code> 方法。而 <code>measureChild()</code> 方法内部，是获取到子元素(自身)的 <code>LayoutParams</code> (注释1)和父布局的 <code>parentWidthMeasureSpec()</code> (注释2)一同传入到 <code>getChildMeasureSpec()</code> 中，从而得出子布局的 <code>MeasureSpec</code> 信息。这和上一篇文章中，根布局(DecorView)获取 <code>MeasureSpec</code> 的条件是不同的。由此我们可知，<strong>除根布局外，其他View的 <code>MeasureSpec</code> 都与自身的 <code>LayoutParams</code> 和父布局的 <code>MeasureSpec</code> 有关。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Ask all of the children of this view to measure themselves, taking into * account both the MeasureSpec requirements for this view and its padding. * We skip children that are in the GONE state The heavy lifting is done in * getChildMeasureSpec. * * @param widthMeasureSpec The width requirements for this view * @param heightMeasureSpec The height requirements for this view */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">measureChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> mChildrenCount<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">View</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> mChildren<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">View</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>mViewFlags <span class="token operator">&amp;</span> VISIBILITY_MASK<span class="token punctuation">)</span> <span class="token operator">!=</span> GONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">measureChild</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Ask one of the children of this view to measure itself, taking into * account both the MeasureSpec requirements for this view and its padding. * The heavy lifting is done in getChildMeasureSpec. * * @param child The child to measure * @param parentWidthMeasureSpec The width requirements for this view * @param parentHeightMeasureSpec The height requirements for this view */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">measureChild</span><span class="token punctuation">(</span><span class="token class-name">View</span> child<span class="token punctuation">,</span> <span class="token keyword">int</span> parentWidthMeasureSpec<span class="token punctuation">,</span>                            <span class="token keyword">int</span> parentHeightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">LayoutParams</span> lp <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childWidthMeasureSpec <span class="token operator">=</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span>parentWidthMeasureSpec<span class="token punctuation">,</span>                                                          mPaddingLeft <span class="token operator">+</span> mPaddingRight<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childHeightMeasureSpec <span class="token operator">=</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span>parentHeightMeasureSpec<span class="token punctuation">,</span>                                                           mPaddingTop <span class="token operator">+</span> mPaddingBottom<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    child<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们来看一下，这里测量普通View的 <code>getChildMeasureSpec()</code> 方法，是如何执行的。</p><p>我们可以看到，其流程和获得 <code>DecorView</code> 的 <code>getRootMeasureSpec()</code> 方法是差不多的。有一个不同且需要注意的地方是下面注释1处，我们发现当父布局的模式为AT_MOST时，子元素无论是 <code>MATCH_PARENT</code> 还是 <code>WRAP_CONTENT</code> ，他们的返回值都是一模一样的。所以，当我们要在使用属性为 WRAP_CONTENT 时，指定默认的宽和高。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Does the hard part of measureChildren: figuring out the MeasureSpec to * pass to a particular child. This method figures out the right MeasureSpec * for one dimension (height or width) of one child view. * * The goal is to combine information from our MeasureSpec with the * LayoutParams of the child to get the best possible results. For example, * if the this view knows its size (because its MeasureSpec has a mode of * EXACTLY), and the child has indicated in its LayoutParams that it wants * to be the same size as the parent, the parent should ask the child to * layout given an exact size. * * @param spec The requirements for this view * @param padding The padding of this view for the current dimension and *        margins, if applicable * @param childDimension How big the child wants to be in the current *        dimension * @return a MeasureSpec integer for the child */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> spec<span class="token punctuation">,</span> <span class="token keyword">int</span> padding<span class="token punctuation">,</span> <span class="token keyword">int</span> childDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> specMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> specSize <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> specSize <span class="token operator">-</span> padding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> resultSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> resultMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>specMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Parent has imposed an exact size on us</span>        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>EXACTLY<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> <span class="token class-name">LayoutParams</span><span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Child wants to be our size. So be it.</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> <span class="token class-name">LayoutParams</span><span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Child wants to determine its own size. It can't be</span>                <span class="token comment">// bigger than us.</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">// Parent has imposed a maximum size on us</span>        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Child wants a specific size... so be it</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> <span class="token class-name">LayoutParams</span><span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Child wants to be our size, but our size is not fixed.</span>                <span class="token comment">// Constrain child to not be bigger than us.</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> <span class="token class-name">LayoutParams</span><span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Child wants to determine its own size. It can't be</span>                <span class="token comment">// bigger than us.</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span><span class="token comment">//1</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">// Parent asked to see how big we want to be</span>        <span class="token keyword">case</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>UNSPECIFIED<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Child wants a specific size... let them have it</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> <span class="token class-name">LayoutParams</span><span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Child wants to be our size... find out how big it should</span>                <span class="token comment">// be</span>                resultSize <span class="token operator">=</span> <span class="token class-name">View</span><span class="token punctuation">.</span>sUseZeroUnspecifiedMeasureSpec <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> <span class="token class-name">LayoutParams</span><span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Child wants to determine its own size.... find out how</span>                <span class="token comment">// big it should be</span>                resultSize <span class="token operator">=</span> <span class="token class-name">View</span><span class="token punctuation">.</span>sUseZeroUnspecifiedMeasureSpec <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//noinspection ResourceType</span>    <span class="token keyword">return</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>resultSize<span class="token punctuation">,</span> resultMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此就讲完 ViewGroup 源码的measure了，对其子类实现 <code>onMeasure()</code> 方法的感兴趣的同学，可以查看一下<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/LinearLayout.java?q=onMeasure&amp;ss=android/platform/superproject:frameworks/base/core/java/android/widget/&amp;start=21">源码</a></p><h3 id="ViewGroup的measure流程图"><a href="#ViewGroup的measure流程图" class="headerlink" title="ViewGroup的measure流程图"></a>ViewGroup的measure流程图</h3><p>给出 ViewGroup 的流程图，希望能更好的帮助理解</p><p><img src="https://pic.lxtlovely.top/blog/20221011153952.png"></p><h2 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h2><h3 id="自定义View时，如何设置-wrap-content-类型"><a href="#自定义View时，如何设置-wrap-content-类型" class="headerlink" title="自定义View时，如何设置 wrap_content 类型"></a>自定义View时，如何设置 wrap_content 类型</h3><p>前文讲到，在自定义 view 的时候，我们需要将重写 <code>onMeasure()</code> 方法，对 <code>wrap_content</code> 属性进行处理，否则使用 wrap_content 就相当于使用 <code>match_parent</code>。那么应该如何对其属性处理呢？</p><p>其实很简单，我们只需要对 View 指定一个默认的内部宽和高，并在判断到是该属性的时候设置此宽和高即可。对于其他属性，则使用内部测量的值即可。具体参考代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> widthSpecMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> widthSpecSize <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> heightSpecMode <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> heightSpecSize <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//宽和高都是 wrap_content 的时候，指定默认的宽高值即可。默认值是啥，自由衡量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widthSpecMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST            <span class="token operator">&amp;&amp;</span> heightSpecMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>widthSpecMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> heightSpecSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>heightSpecMode <span class="token operator">==</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>widthSpecSize<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何获取到真实宽高（measure-结果）"><a href="#如何获取到真实宽高（measure-结果）" class="headerlink" title="如何获取到真实宽高（measure 结果）"></a>如何获取到真实宽高（measure 结果）</h3><p>如何获取到真实 measure 值？这个问题怎么来的呢？难道还有假的值吗？</p><p>一般来说，使用 getMeasuredWidth() 就可以获取到对应的 Measure 值了，但是获取的时机不同的时候，可能会导致获取到的值是错误的，因为有的是需要多轮 Measure 才能得出最后的值的。所以要获取到最稳妥的 measure 值的话，是需要在 onLayout 中获取的。</p><h3 id="如何在-Activity-启动后就获取-measure-值"><a href="#如何在-Activity-启动后就获取-measure-值" class="headerlink" title="如何在 Activity 启动后就获取 measure 值"></a>如何在 Activity 启动后就获取 measure 值</h3><p>这个问题如果我们关注的是启动后就获取，那么就会得出答案是在 onCreate() 或者 onResume() 中获取。但是有一点我们不应该忽略的，那就是 measure 过程与 Activity 的生命周期过程并不是同步进行的。那么怎么办呢？实际上我们应该使用 View 中的一些特性方法，借助他们在 measure 流程结束的时候来获取到对应的值。</p><ul><li><p>Activity/View#onWindowFocusChanged</p><p>onWindowFocusChanged 方法是在 View 初始化结束之后执行的，那么自然 measure 流程也已经结束了，所以该方法下获取到的可以是正确测量后的值。但是要注意，这个方法会在聚焦和失焦后被调用，容易出现多次调用的情况。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> hasFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onWindowFocusChanged, width= "</span> <span class="token operator">+</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" height= "</span> <span class="token operator">+</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>view.post(runnable)</p><p>view.post 使用了 Handler，将消息投递到消息队列的尾部，当 Looper 调用执行的时候，View 已经初始化好了。</p><p>那么为什么调用的时候就初始化好了呢？</p><blockquote><p>通过 <strong>View.post</strong>() 添加的任务，是在 View 绘制流程的开始阶段，将所有任务重新发送到消息队列的<strong>尾部</strong>，此时相关任务的执行已经在 View 绘制任务之后，即 View 绘制流程已经结束，此时便可以正确获取到 View 的宽高了。</p><p><a href="https://blog.csdn.net/jdsjlzx/article/details/107397163">View.post() 原理深入理解_一叶飘舟的博客-CSDN博客</a></p></blockquote><p>具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    view<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> width <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> height <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ViewTreeObserver</p><p>使用 ViewTreeObserver 的众多接口都可以实现该功能，比如 OnGlobalLayoutListener() 接口，但是要注意 View 树可见性改变的时候，OnGlobalLayoutListener() 就会被回调，所以会出现多次被回调的可能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ViewTreeObserver</span> observer <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    observer<span class="token punctuation">.</span><span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeGlobalOnLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> width <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> height <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=26436?q=onMeasure&amp;ss=android/platform/superproject:frameworks/base/core/java/android/view/">View.java - Android Code Search</a></p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/drawable/Drawable.java;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;l=1090?q=getMinimumWidth&amp;ss=android/platform/superproject">Drawable.java - Android Code Search</a></p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/LinearLayout.java?q=onMeasure&amp;ss=android/platform/superproject:frameworks/base/core/java/android/widget/&amp;start=21">LinearLayout.java - Android Code Search</a></p><p>《Android进阶之光》</p><p><a href="https://blog.csdn.net/jdsjlzx/article/details/107397163">View.post() 原理深入理解_一叶飘舟的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> View的事件体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> View的工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解View的滑动冲突</title>
      <link href="/2023/04/05/shen-ru-liao-jie-view-de-hua-dong-chong-tu/"/>
      <url>/2023/04/05/shen-ru-liao-jie-view-de-hua-dong-chong-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="深入了解View的滑动冲突"><a href="#深入了解View的滑动冲突" class="headerlink" title="深入了解View的滑动冲突"></a>深入了解View的滑动冲突</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第21天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>了解 View 的分发事件</li><li>遇到过滑动冲突</li><li>有 Android 开发基础</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://juejin.cn/post/7155499400272281637">《与滑动冲突的首次邂逅》</a>一文中，笔者举了一个开发过程中出现的一个简单的滑动冲突问题，带大家直观的了解何为滑动冲突，并且使用了内部拦截法(内部解决法)来解决了这个滑动冲突。建议还不了解何为滑动冲突的同学先去阅读一下这篇文章。但是在上文中，我们并未全面的深入了解滑动冲突，以及学习它的各种解决方法。</p><p>本篇文章就继续接着上文，带大家深入了解滑动冲突。但是由于各种滑动冲突的场景复杂多样，本篇文章不会再引入新的 demo 讲述不同场景下的滑动冲突的解决，滑动冲突的解决思路基本是一致的，大家可以举一反三的应用到不同场景中。</p><h2 id="何为滑动冲突"><a href="#何为滑动冲突" class="headerlink" title="何为滑动冲突"></a>何为滑动冲突</h2><p>什么是滑动冲突？</p><p>滑动冲突较难使用语言进行直接描述，如果非要说，那就是：View体系中的滑动事件的实际处理和期望处理不一致，导致不同组件对事件的消费发生冲突。这个是笔者对滑动冲突的理解，需要更加直观理解的请查阅<a href="https://juejin.cn/post/7155499400272281637">上文</a></p><p>但是单单这样理解显然是不够的，下面我们便从滑动冲突事件的三大场景来分析和深入理解。</p><h3 id="滑动冲突的三大场景"><a href="#滑动冲突的三大场景" class="headerlink" title="滑动冲突的三大场景"></a>滑动冲突的三大场景</h3><p>滑动冲突的三大场景图如下，下面我们逐个对其进行分析。</p><p><img src="https://pic.lxtlovely.top/blog/1869441-be713eb901837662.png"></p><ul><li><p><strong>场景一：外部滑动方向与内部滑动方向不一致</strong></p><p>这个场景，就是我们在<a href="https://juejin.cn/post/7155499400272281637">《与滑动冲突的首次邂逅》</a>一文中提到的滑动冲突问题。其造成冲突的原因是，外部含有左右滑动的组件，内部含有上下滑动的组件，当触点(手指)在中间滑动的时候，系统无法自动判别这个滑动是需要交给外部组件还是交给内部组件来处理。所以<strong>往往会造成只有其中某一层能够滑动</strong>，当然上文中的 <code>NestedScrollView</code> 其实有做一些滑动冲突的处理的，所以表现出来的冲突并不是很明显。</p></li><li><p><strong>场景二：外部滑动方向与内部滑动方向一致</strong></p><p>这一个场景产生的原因往往是两个纵向滑动的组件嵌套了，导致触点上下滑的时候，系统不清楚需要让哪一个组件滑动。这也会造成只有某一层能够滑动或者说滑动得很卡顿。</p></li><li><p><strong>场景三：多层嵌套</strong></p><p>这一种场景就比前两个都要复杂了。它是指多个组件嵌套在一起，可能是最外层和中层都是横向滑动，里层纵向滑动。这种也是会导致只有其中某一层能够滑动或是滑动得很卡顿。但是这种解决方法也不是很难，就是两层两层之间解决滑动冲突就好。</p></li></ul><h2 id="如何解决滑动冲突"><a href="#如何解决滑动冲突" class="headerlink" title="如何解决滑动冲突"></a>如何解决滑动冲突</h2><h3 id="滑动冲突解决思路"><a href="#滑动冲突解决思路" class="headerlink" title="滑动冲突解决思路"></a>滑动冲突解决思路</h3><p>由上面对滑动冲突的解释，我们不难得出，滑动冲突产生的原因只是因为系统无法正确识别出我们期望的滑动是哪种。也就是说，期望与实际不符合，而造成不符合的根本原因是<strong>各层对滑动事件的获取和消费没有规律</strong>。那解决滑动冲突的方法，自然就是找出有滑动冲突的布局层，然后<strong>给他们加上事件的拦截规律即可</strong>。</p><p>而给组件附加上的拦截规律通常有以下几种：</p><ol><li><p><strong>对滑动轨迹进行测量</strong>，以其角度(dy/dx)或者宽高的差值(dy-dx)来判断该事件应该被哪一层拦截和消费。最经典的场景一大部分应用的就是这种拦截规律。</p><p>例如可以设定 dy-dx&gt;0 就判断滑动期望是上下滑，外层布局不做拦截，让里层布局消费；反之就判定期望为左右滑动，外层布局拦截自己消费。</p></li><li><p><strong>对滑动速度进行判定</strong>。这种对速度的检测和判定一般是作为辅助手段，用于优化滑动冲突的体验，而不是作为主要解决滑动冲突的方法。</p></li><li><p><strong>基于业务要求联动</strong>。这种拦截规律就很抽象了，他不是特指某一种执行逻辑，而是基于业务要求出发的，同时也是最复杂的一种。</p><p>例如场景二中，要求里层和外层需要有联动的效果，里层滑动到尽头之后，如果继续滑动就要执行外层的滑动。这种情况就需要对里层进行监测，监测到里层滑动到尽头之后就让外层对事件进行拦截和消费。</p></li></ol><p>下图是对滑动轨迹进行测量判断的示意图，dy 是滑动轨迹的纵向距离，dx 是滑动轨迹的横向距离。</p><p><img src="https://pic.lxtlovely.top/blog/20221018225346.png"></p><h3 id="滑动冲突解决法"><a href="#滑动冲突解决法" class="headerlink" title="滑动冲突解决法"></a>滑动冲突解决法</h3><p>基于上述的滑动思路，那么我们就会有两种滑动冲突的解决方法：<strong>外部拦截法</strong>和<strong>内部拦截法</strong>。名如其意，这两种方法分别是在<strong>外层 View <strong>中添加拦截规律和在</strong>内层 View</strong> 中添加拦截规律。</p><p>在讲解两种解决法的通用思路之前，我们继续来回顾一下View的分发机制，想要查看详细流程的请查看<a href="https://juejin.cn/post/7123962969095929893">View体系(上)</a></p><p>首先 <code>View</code> 层层分发下来，若是 <code>onInterceptTouchEvent()</code> 为 <code>true</code> 就拦截，为 <code>false</code> 就继续调用子类的 <code>dispatchTouchEvent()</code> 下发。</p><p>当某一层级拦截后，就调用 <code>onTouchEvent()</code> 来处理，若是该层无法处理，就会继续向上传递给父层的 <code>onTouchEvent()</code> 来处理。如此层层传递直到有对应可以处理的父层。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//伪代码</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> ev<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外部拦截法"><a href="#外部拦截法" class="headerlink" title="外部拦截法"></a>外部拦截法</h4><p>外部拦截法是在**外层 View **中添加拦截规律，主要拦截的方法是在外层布局中重写 <code>onInterceptTouchEvent()</code> 方法。在方法内添加拦截逻辑，主要判断拦截哪些滑动事件到本层，哪些不做拦截，继续下发。</p><p>其主要模板如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptHoverEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>            intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//1</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>外层<span class="token class-name">View</span>是否需要拦截<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//2</span>                intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>            intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mLastXIntercept <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//4</span>    mLastYIntercept <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> intercepted<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的代码中，有以下几个点需要注意：</p><ol><li><strong>注释1处</strong>，<strong>必须</strong>要把 <code>intercepted</code> 变量标注为 <code>false</code> ，因为如果在 <strong>ACTION_DOWN</strong> 返回 <code>true</code>，那么一按下就对事件进行拦截，后续的 <strong>ACTION_MOVE</strong> 和<strong>ACTION_UP</strong>事件都会直接交给父容器处理，这就没法将事件再传递给子元素了。</li><li><strong>注释2处</strong>，在这里做逻辑判断，判断是否要把事件拦截在外层View中。</li><li><strong>注释3处</strong>，此处必须返回 <code>false</code>，因为 <strong>ACTION_UP</strong> 本身已无意义，我们不可在此对事件进行拦截了</li><li><strong>注释4处</strong>，此处需要对上一个触点的位置进行更新。</li></ol><p>上述代码相信大家都能看懂，除了注释2处，其余地方皆为样板代码，所以说滑动冲突的解决其实是有套路的。外部拦截法其实是比较直观的一种方法，也是较为推荐的方法。</p><h4 id="内部拦截法"><a href="#内部拦截法" class="headerlink" title="内部拦截法"></a>内部拦截法</h4><p>内部拦截法是在**内层 View **中添加拦截规律，主要拦截的方法是在内层布局中重写 <code>dispatchTouchEvent</code> 方法。在方法内添加拦截逻辑，其借助 <code>requestDisallowInterceptTouchEvent()</code> 方法，判断父布局需要拦截哪些滑动事件不去下发到本层；如果需要父布局不做拦截，调用<code>getParent().requestDisallowInterceptTouchEvent(true)</code> 来让父布局继续下发事件到本层。</p><p>由上述说明可见，内部拦截法是较为复杂的，所以一般不使用内部拦截。但是当外部拦截无法使用的时候，自然就需要使用到内部拦截，例如 <a href="https://juejin.cn/post/7155499400272281637">与滑动冲突的首次邂逅</a> 一文中提到的例子就是没法使用外部拦截，所以使用内部拦截实现。</p><p>样板代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>            <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>            <span class="token keyword">int</span> deltaX <span class="token operator">=</span> x <span class="token operator">-</span> mLastX<span class="token punctuation">;</span>            <span class="token keyword">int</span> deltaY <span class="token operator">=</span> y <span class="token operator">-</span> mLastY<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>外层<span class="token class-name">View</span>是否需要拦截<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//1</span>                <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token punctuation">}</span>    mLastX <span class="token operator">=</span> x<span class="token punctuation">;</span>    mLastY <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码和外部拦截法的思路基本一致，只有 <strong>ACTION_MOVE</strong> 中需要做自定义的判断和修饰，其他地方也是样板代码。当然，只是大致规则上需要遵循，你想做更多的解决和判断，都是随你定义的。</p><p><strong>内部拦截法要点注意</strong></p><p>内部拦截法其实要设置两个点，一个是上述子 View 的 dispatchTouchEvent，还有一个就是父元素要默认拦截除了 ACTION_DOWN 之外的其他事件，这样子元素调用 <code>getParent().requestDisallowInterceptTouchEvent(false)</code> 才有用。</p><p>究其原因很简单，如果拦截了 ACTION_DOWN，那就一开始啥都无法传递给子元素了，就无法让他在 ACTION_DOWN 中设置父类不要拦截，也无法在后面再获取到位置数据来判断设置了。</p><p>所以内部拦截法需要设置<strong>两处</strong>，相对麻烦一些。</p><p>可以在父 View 中进行如下设置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> action <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLastX <span class="token operator">=</span> x<span class="token punctuation">;</span>        mLastY <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mScroller<span class="token punctuation">.</span><span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mScroller<span class="token punctuation">.</span><span class="token function">abortAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你还想看实战的解决，可以点击 <a href="https://juejin.cn/post/7155499400272281637">与滑动冲突的首次邂逅</a> 查阅。本篇的讲述就到此结束啦！感谢阅读，欢迎点赞！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/022f55384a1c?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">第七章 View的滑动冲突 - 简书 (jianshu.com)</a></p><p>《Android开发艺术探索》</p>]]></content>
      
      
      <categories>
          
          <category> View的事件体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> 滑动冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图+源码，读懂View的Draw方法</title>
      <link href="/2023/03/12/tu-yuan-ma-du-dong-view-de-draw-fang-fa/"/>
      <url>/2023/03/12/tu-yuan-ma-du-dong-view-de-draw-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="图-源码，读懂View的Draw方法"><a href="#图-源码，读懂View的Draw方法" class="headerlink" title="图+源码，读懂View的Draw方法"></a>图+源码，读懂View的Draw方法</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第16天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><strong>读懂 View 三大绘制方法的文章</strong></p><p><a href="https://juejin.cn/post/7152902416046751780">图+源码，读懂View的MeasureSpec - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7153157173525086244">图+源码，读懂View的Measure方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7153606917351604255">图+源码，读懂View的Layout方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154013916400451620">图+源码，读懂View的Draw方法 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解 View 体系</li><li>了解 View 的 <code>Measure</code> 和 <code>Layout</code> 方法</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章中，笔者带大家学习了 <code>View</code> 的 <code>Layout</code> 流程。这个流程很简单，当程序进到 <code>layout()</code> 方法，执行 <code>setFrame()</code> 和重写的 <code>onLayout()</code> 方法，使用 <code>onLayout()</code> 方法继续遍历其余子元素，就可以找出 <code>View</code> 树所有元素的位置。</p><p>本文将继续讲述 View 绘制三大方法的最后一个方法——<code>Draw</code> 方法。该方法不会很复杂，相信大家很快可以弄懂。</p><h2 id="Draw-方法的作用和入口"><a href="#Draw-方法的作用和入口" class="headerlink" title="Draw 方法的作用和入口"></a>Draw 方法的作用和入口</h2><p><code>Draw</code> 翻译为绘画。其方法的作用是绘制界面，是 <code>View</code> 绘制流程的最后一步。</p><p>我们依旧和<a href="https://juejin.cn/post/7153606917351604255">上文</a>一样，先来看一下该方法的入口是什么，从入口到 <code>draw</code> 方法又是怎么样的一个流程？</p><p>第一步依旧是在 <code>ViewRootImpl</code> 的类中找到 <code>performTraversals()</code> 方法，该方法调用的第三个重要的绘制方法就是 <code>performDraw()</code> 。关于这一点，大家感兴趣的话，可以到 <a href="https://juejin.cn/post/7153157173525086244">图+源码，读懂View的Measure方法 - 掘金 (juejin.cn)</a> 一文查看。 <code>performDraw()</code> 是 <code>draw</code> 方法的入口处，文章这一部分将讲述从 <code>performDraw()</code> 到 View 中 <code>draw()</code> 方法的流程。</p><p>首先，我们进入 <code>performDraw()</code> 方法，这里可以看到在下面代码的<strong>注释1</strong>处，调用了一个该类下的 <code>draw()</code> 方法。但是很显然，这个 <code>boolean</code> 类型的 <code>draw()</code> 方法并非我们所需要的 <code>View</code> 下面的 <code>draw()</code> 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">performDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> canUseAsync <span class="token operator">=</span> <span class="token function">draw</span><span class="token punctuation">(</span>fullRedrawNeeded<span class="token punctuation">,</span> usingAsyncReport <span class="token operator">&amp;&amp;</span> mSyncBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mIsDrawing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token class-name">Trace</span><span class="token punctuation">.</span>TRACE_TAG_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续在 <code>ViewRootImpl</code> 类下的查看这个 <code>boolean</code> 类型的 <code>draw()</code> 方法。我们忽略一些无关的代码，可以在下方的<strong>注释1</strong>处看到其调用了一个 <code>drawSoftware()</code> 方法。事实上，这个方法是和 View 中的 <code>draw()</code> 方法有关系的，我们继续往下边查看。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fullRedrawNeeded<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forceDraw<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirty<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> mIsAnimating <span class="token operator">||</span> accessibilityFocusDirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isHardwareEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">drawSoftware</span><span class="token punctuation">(</span>surface<span class="token punctuation">,</span> mAttachInfo<span class="token punctuation">,</span> xOffset<span class="token punctuation">,</span> yOffset<span class="token punctuation">,</span>                              scalingRequired<span class="token punctuation">,</span> dirty<span class="token punctuation">,</span> surfaceInsets<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> useAsyncReport<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次点击进去 <code>drawSoftware()</code> 方法查看，我们终于在下面<strong>注释2</strong>处，看到了 <code>mView.draw(canvas)</code> 字段。可见，View 中的 <code>draw()</code> 方法是在此处被调用的。由此，我们终于看到了 <code>draw</code> 流程的入口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @return true if drawing was successful, false if an error occurred */</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">drawSoftware</span><span class="token punctuation">(</span><span class="token class-name">Surface</span> surface<span class="token punctuation">,</span> <span class="token class-name">AttachInfo</span> attachInfo<span class="token punctuation">,</span> <span class="token keyword">int</span> xoff<span class="token punctuation">,</span> <span class="token keyword">int</span> yoff<span class="token punctuation">,</span>                             <span class="token keyword">boolean</span> scalingRequired<span class="token punctuation">,</span> <span class="token class-name">Rect</span> dirty<span class="token punctuation">,</span> <span class="token class-name">Rect</span> surfaceInsets<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        mView<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>        <span class="token function">drawAccessibilityFocusedDrawableIfNeeded</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的流程，我们可以用一张图来展示，希望对你的理解有帮助。</p><p><img src="https://pic.lxtlovely.top/blog/20221014111114.png"></p><h2 id="Draw流程"><a href="#Draw流程" class="headerlink" title="Draw流程"></a>Draw流程</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>点进 View 的 <code>draw()</code> 方法的源码，我们首先看<strong>方法的注释</strong>。方法的注释大意是说：</p><ol><li>在调用此绘制方法之前，需要已经完成了所有视图的 <code>layout</code> 流程；</li><li>而在实现一个自定义 View 的时候，要重写实现 <code>onDraw()</code> 方法，而不是 <code>draw()</code> 这个方法；</li><li>如果确实需要重写此方法( <code>draw()</code> )，请调用超类版本( <code>surper</code> )。</li></ol><p>再次往下面查看，我们会发现方法内部还有一段注释，该注释写明了 <code>Draw</code> 流程的每个步骤。我们翻译为中文是下面这样子。</p><ol><li>绘制背景</li><li>如果有必要，保存 <code>canvas</code> 层以准备逐渐淡出绘制的内容（可以不执行）</li><li>绘制 View 的内容</li><li>绘制子 View 的内容</li><li>如果有必要，绘制 View 的渐变淡出边缘(类似阴影效果)和修复层级（可以不执行）</li><li>绘制装饰，例如滚动条</li><li>如果有必要，绘制默认的焦点高亮显示（可以不执行）</li></ol><p>上面的7个步骤中，他们的执行顺序是固定的，且其中的 2 3 7 不是必要执行的步骤。下面的代码省略了一段包含全部步骤的详细执行代码，感兴趣的同学可以<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=23171;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;bpv=0;bpt=1">点击查看</a>。下面我们就逐个查看必要执行的步骤执行了什么。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Manually render this view (and all of its children) to the given Canvas. * The view must have already done a full layout before this function is * called.  When implementing a view, implement * {@link #onDraw(android.graphics.Canvas)} instead of overriding this method. * If you do need to override this method, call the superclass version. * * @param canvas The Canvas to which the View is rendered. */</span><span class="token annotation punctuation">@CallSuper</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> privateFlags <span class="token operator">=</span> mPrivateFlags<span class="token punctuation">;</span>    mPrivateFlags <span class="token operator">=</span> <span class="token punctuation">(</span>privateFlags <span class="token operator">&amp;</span> <span class="token operator">~</span>PFLAG_DIRTY_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> PFLAG_DRAWN<span class="token punctuation">;</span>    <span class="token comment">/*     * Draw traversal performs several drawing steps which must be executed     * in the appropriate order:     *     *      1. Draw the background     *      2. If necessary, save the canvas' layers to prepare for fading     *      3. Draw view's content     *      4. Draw children     *      5. If necessary, draw the fading edges and restore layers     *      6. Draw decorations (scrollbars for instance)     *      7. If necessary, draw the default focus highlight     */</span>    <span class="token comment">// Step 1, draw the background, if needed</span>    <span class="token keyword">int</span> saveCount<span class="token punctuation">;</span>    <span class="token function">drawBackground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// skip step 2 &amp; 5 if possible (common case)</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> viewFlags <span class="token operator">=</span> mViewFlags<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> horizontalEdges <span class="token operator">=</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> FADING_EDGE_HORIZONTAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> verticalEdges <span class="token operator">=</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> FADING_EDGE_VERTICAL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>verticalEdges <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>horizontalEdges<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Step 3, draw the content</span>        <span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Step 4, draw the children</span>        <span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">drawAutofilledHighlight</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Overlay is part of the content and draws beneath Foreground</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOverlay <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mOverlay<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mOverlay<span class="token punctuation">.</span><span class="token function">getOverlayView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Step 6, draw decorations (foreground, scrollbars)</span>        <span class="token function">onDrawForeground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Step 7, draw the default focus highlight</span>        <span class="token function">drawDefaultFocusHighlight</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShowingLayoutBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">debugDrawFocus</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// we're done...</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//源码此处编写了一个完整的程序例程，包括了前面省略的第二步和第5步。由于篇幅原因，此处省略，大家可以点击参考处的详细链接查看</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先查看 step1 的 <code>drawBackground()</code> 方法，在下面的注释1处，我们可以其<strong>对偏移量进行了判断</strong>，当偏移量为0的时候，就直接绘制；当偏移量不为0的时候，我们先进行偏移再执行背景的绘制。<strong>注意</strong>此处执行的 <code>draw</code> 方法是在 <code>Drawable</code> 里面的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Draws the background onto the specified canvas. * * @param canvas Canvas on which to draw the background */</span><span class="token annotation punctuation">@UnsupportedAppUsage</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawBackground</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Drawable</span> background <span class="token operator">=</span> mBackground<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>background <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setBackgroundBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> scrollX <span class="token operator">=</span> mScrollX<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> scrollY <span class="token operator">=</span> mScrollY<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scrollX <span class="token operator">|</span> scrollY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1</span>        background<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//2</span>        canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>scrollX<span class="token punctuation">,</span> scrollY<span class="token punctuation">)</span><span class="token punctuation">;</span>        background<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span>scrollX<span class="token punctuation">,</span> <span class="token operator">-</span>scrollY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们看 step 3 的 <code>onDraw()</code> 方法，我们发现这是个空实现的方法，在注释处标注了<strong>需要自定义 View 的时候实现它</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Implement this to do your drawing. * * @param canvas the canvas on which the background will be drawn */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们继续看 step 4 的 <code>dispatchDraw()</code> 方法，这也是一个空方法。注释处标明：需要在派生类(继承类)绘制了自身之后，绘制子类之前，对该方法进行重写调用。在 <code>ViewGroup</code> 中，有对这个方法进行重写，我们可以继续到 <code>ViewGroup</code>  查看。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Called by draw to draw the child views. This may be overridden * by derived classes to gain control just before its children are drawn * (but after its own view has been drawn). * @param canvas the canvas on which to draw the view */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">dispatchDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>ViewGroup</code> 中，我们在下列<strong>注释1处</strong>看到 <code>dispatchDraw()</code> 方法对子元素执行了遍历，在<strong>注释2 3 处</strong>，可以看到其对每一个子 View 都执行了 <code>drawChild()</code> 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">dispatchDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childrenCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>transientIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mTransientIndices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transientIndex<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">View</span> transientChild <span class="token operator">=</span> mTransientViews<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transientIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>transientChild<span class="token punctuation">.</span>mViewFlags <span class="token operator">&amp;</span> VISIBILITY_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> VISIBLE <span class="token operator">||</span>                transientChild<span class="token punctuation">.</span><span class="token function">getAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                more <span class="token operator">|=</span> <span class="token function">drawChild</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> transientChild<span class="token punctuation">,</span> drawingTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            transientIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transientIndex <span class="token operator">&gt;=</span> transientCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                transientIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> childIndex <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedIndex</span><span class="token punctuation">(</span>childrenCount<span class="token punctuation">,</span> i<span class="token punctuation">,</span> customOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">View</span> child <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedView</span><span class="token punctuation">(</span>preorderedList<span class="token punctuation">,</span> children<span class="token punctuation">,</span> childIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>mViewFlags <span class="token operator">&amp;</span> VISIBILITY_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> VISIBLE <span class="token operator">||</span> child<span class="token punctuation">.</span><span class="token function">getAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            more <span class="token operator">|=</span> <span class="token function">drawChild</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> child<span class="token punctuation">,</span> drawingTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而点开 <code>drawChild()</code> 方法，我们发现它是直接调用了子 View 中 <code>boolean</code> 类型的 <code>draw()</code> 方法(并非我们上文提到的执行最终绘制的 <code>draw()</code> 方法)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Draw one child of this View Group. This method is responsible for getting * the canvas in the right state. This includes clipping, translating so * that the child's scrolled origin is at 0, 0, and applying any animation * transformations. * * @param canvas The canvas on which to draw the child * @param child Who to draw * @param drawingTime The time at which draw is occurring * @return True if an invalidate() was issued */</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">drawChild</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">View</span> child<span class="token punctuation">,</span> <span class="token keyword">long</span> drawingTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> child<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> drawingTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们继续查看 View 中 <code>boolean</code> 类型的 <code>draw()</code> 方法，在<strong>注释1</strong>处检测是否无缓存，如果无缓存就直接执行绘制；如果有缓存，就在<strong>注释2</strong>处利用缓存显示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * This method is called by ViewGroup.drawChild() to have each child view draw itself. * * This is where the View specializes rendering behavior based on layer type, * and hardware acceleration. */</span><span class="token keyword">boolean</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span> <span class="token keyword">long</span> drawingTime<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>drawingWithDrawingCache<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>drawingWithRenderNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mPrivateFlags <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG_DIRTY_MASK<span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RecordingCanvas</span><span class="token punctuation">)</span> canvas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">drawRenderNode</span><span class="token punctuation">(</span>renderNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// Fast path for layouts with no backgrounds</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_SKIP_DRAW<span class="token punctuation">)</span> <span class="token operator">==</span> PFLAG_SKIP_DRAW<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mPrivateFlags <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG_DIRTY_MASK<span class="token punctuation">;</span>                <span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//2，有缓存</span>        mPrivateFlags <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG_DIRTY_MASK<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layerType <span class="token operator">==</span> LAYER_TYPE_NONE <span class="token operator">||</span> mLayerPaint <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// no layer paint, use temporary paint to draw bitmap</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// use layer paint to draw the bitmap, merging the two alphas, but also restore</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> more<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，我们来看 step 6 的 <code>onDrawForeground()</code> 方法，我们可以在下方的<strong>注释1处</strong>可以看到，它绘制的是 <strong>ScrollBar</strong> 类型的装饰。并在<strong>注释2处</strong>调用 <code>foreground.draw()</code> 方法绘制视图内容的上层视图。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Draw any foreground content for this view. * * &lt;p&gt;Foreground content may consist of scroll bars, a {@link #setForeground foreground} * drawable or other view-specific decorations. The foreground is drawn on top of the * primary view content.&lt;/p&gt; * * @param canvas canvas to draw into */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDrawForeground</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onDrawScrollIndicators</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">onDrawScrollBars</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token keyword">final</span> <span class="token class-name">Drawable</span> foreground <span class="token operator">=</span> mForegroundInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mForegroundInfo<span class="token punctuation">.</span>mDrawable <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>foreground <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        foreground<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程图展示"><a href="#流程图展示" class="headerlink" title="流程图展示"></a>流程图展示</h3><p>上文的源码分析到此结束了，笔者按照上面的流程整理出来了一张 <code>Draw</code> 方法的<strong>流程图</strong>，希望可以帮助大家更好的理解。</p><p><img src="https://pic.lxtlovely.top/blog/20221014131621.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=4265;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;bpv=1;bpt=1?q=performDraw&amp;ss=android/platform/superproject">ViewRootImpl.java - Android Code Search</a></p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=23171;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;bpv=0;bpt=1">View.java - Android Code Search</a> Draw 流程的详细链接</p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;l=4529;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab?q=View&amp;ss=android/platform/superproject">ViewGroup.java - Android Code Search</a></p><p>《Android进阶之光》</p><p>《Android开发艺术探索》</p>]]></content>
      
      
      <categories>
          
          <category> View的事件体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> View的工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图+源码，读懂View的Layout方法</title>
      <link href="/2023/03/12/tu-yuan-ma-du-dong-view-de-layout-fang-fa/"/>
      <url>/2023/03/12/tu-yuan-ma-du-dong-view-de-layout-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="图-源码，读懂View的Layout方法"><a href="#图-源码，读懂View的Layout方法" class="headerlink" title="图+源码，读懂View的Layout方法"></a>图+源码，读懂View的Layout方法</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第15天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><strong>读懂 View 三大绘制方法的文章</strong></p><p><a href="https://juejin.cn/post/7152902416046751780">图+源码，读懂View的MeasureSpec - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7153157173525086244">图+源码，读懂View的Measure方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7153606917351604255">图+源码，读懂View的Layout方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154013916400451620">图+源码，读懂View的Draw方法 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解 View 体系</li><li>了解 View 的 <code>Measure</code> 方法</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://juejin.cn/post/7153157173525086244">上文</a>中，我们讲述了 <code>View</code> 里面的 <code>Measure</code> 方法，<code>Measure</code> 方法是页面绘制的三大方法中最为复杂的一个方法。它的 <code>View</code> 流程和 <code>ViewGroup</code> 的流程不尽相同，前者只需根据不同模式测量自身，而后者测量完自身后还需遍历测量子元素。并且他们在调用获取自身的 <code>MeasureSpec</code> 时候又会根据 <code>DecorView</code> 和普通 <code>View</code> 做不同的要求。</p><p>而 <code>Layout</code> 方法并没有如此复杂，相对来说较为简单。本篇文章就带大家学习 <code>View</code> 绘制三大方法的第二个方法——<code>Layout</code> 方法。</p><h2 id="Layout-方法的作用和入口"><a href="#Layout-方法的作用和入口" class="headerlink" title="Layout 方法的作用和入口"></a>Layout 方法的作用和入口</h2><p>Layout 一词翻译为：布局、布置。从这个英文翻译可以看出，Layout 方法与位置有关，事实的确如此，<strong>Layout 方法用于确定元素的位置所在</strong>。</p><p>那么，Layout 方法的入口在哪里呢？在什么时候由什么方法调用呢？</p><p>这个问题在<a href="https://juejin.cn/post/7153157173525086244">上一篇文章</a>中也有提到，感兴趣的同学可以点击查阅。Layout 方法的入口与 Measure 方法类似，它是由 <code>performLayout()</code> 方法调用的，它的调用链是这种样子：<code>performTraversals() -&gt; performLayout() -&gt; layout()</code> 。我们可以在下方的代码中的注释1和2处看到 <code>performLayout()</code> 方法调用了 <code>layout()</code> 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performLayout</span><span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span> lp<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredWindowWidth<span class="token punctuation">,</span>                           <span class="token keyword">int</span> desiredWindowHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        host<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numViewsRequestingLayout <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>validLayoutRequesters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                host<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token class-name">Trace</span><span class="token punctuation">.</span>TRACE_TAG_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mInLayout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Layout-流程"><a href="#Layout-流程" class="headerlink" title="Layout 流程"></a>Layout 流程</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>下面，我们来看一下 View 中 layout 的源码，为了保留可读性，我把一些不讲解的代码注释掉了，且保留了源码的代码注释，感兴趣的同学可以阅读它的注释，会对它有更深的理解。</p><p>layout() 方法中，需要传入的 l t r b，其实分别对应着 left、top、right、bottom。即为从 左、上、右、下，View 相对于父布局的距离。对位置的确定的方法，主要在下面的注释1和2处。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Assign a size and position to a view and all of its * descendants * * &lt;p&gt;This is the second phase of the layout mechanism. * (The first is measuring). In this phase, each parent calls * layout on all of its children to position them. * This is typically done using the child measurements * that were stored in the measure pass().&lt;/p&gt; * * &lt;p&gt;Derived classes should not override this method. * Derived classes with children should override * onLayout. In that method, they should * call layout on each of their children.&lt;/p&gt; * * @param l Left position, relative to parent * @param t Top position, relative to parent * @param r Right position, relative to parent * @param b Bottom position, relative to parent */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags3 <span class="token operator">&amp;</span> PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onMeasure</span><span class="token punctuation">(</span>mOldWidthMeasureSpec<span class="token punctuation">,</span> mOldHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPrivateFlags3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> oldL <span class="token operator">=</span> mLeft<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldT <span class="token operator">=</span> mTop<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldB <span class="token operator">=</span> mBottom<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldR <span class="token operator">=</span> mRight<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token function">isLayoutModeOptical</span><span class="token punctuation">(</span>mParent<span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token function">setOpticalFrame</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">setFrame</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>changed <span class="token operator">||</span> <span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_LAYOUT_REQUIRED<span class="token punctuation">)</span> <span class="token operator">==</span> PFLAG_LAYOUT_REQUIRED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onLayout</span><span class="token punctuation">(</span>changed<span class="token punctuation">,</span> l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我们看一下上面代码中注释1的代码。<code>setFrame()</code> 方法做了什么。我们从下面的代码逻辑以及注释中可以看到，这个方法是设置 View 的四个点的位置，并且会返回告知是否位置与之前有变更。执行完这段代码后，layout 就会执行 <code>onLayout()</code> 方法了，我也在下面给出代码。但是我们发现它是一个空方法，改方法的注释里面写道，我们要使用的时候需要重写这个方法。这是为什么呢？这是因为不同的控件有不同的实现，所以该方法就设定让子类去自行设计了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Assign a size and position to this view. * * This is called from layout. * * @param ... * @return true if the new size and position are different than the *         previous ones * {@hide} */</span><span class="token annotation punctuation">@UnsupportedAppUsage</span><span class="token punctuation">(</span>maxTargetSdk <span class="token operator">=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>P</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mLeft <span class="token operator">!=</span> left <span class="token operator">||</span> mRight <span class="token operator">!=</span> right <span class="token operator">||</span> mTop <span class="token operator">!=</span> top <span class="token operator">||</span> mBottom <span class="token operator">!=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>        changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// Remember our drawn bit</span>        <span class="token keyword">int</span> drawn <span class="token operator">=</span> mPrivateFlags <span class="token operator">&amp;</span> PFLAG_DRAWN<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldWidth <span class="token operator">=</span> mRight <span class="token operator">-</span> mLeft<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldHeight <span class="token operator">=</span> mBottom <span class="token operator">-</span> mTop<span class="token punctuation">;</span>        <span class="token keyword">int</span> newWidth <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> newHeight <span class="token operator">=</span> bottom <span class="token operator">-</span> top<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> sizeChanged <span class="token operator">=</span> <span class="token punctuation">(</span>newWidth <span class="token operator">!=</span> oldWidth<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>newHeight <span class="token operator">!=</span> oldHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Invalidate our old position</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span>sizeChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>        mLeft <span class="token operator">=</span> left<span class="token punctuation">;</span>        mTop <span class="token operator">=</span> top<span class="token punctuation">;</span>        mRight <span class="token operator">=</span> right<span class="token punctuation">;</span>        mBottom <span class="token operator">=</span> bottom<span class="token punctuation">;</span>        mRenderNode<span class="token punctuation">.</span><span class="token function">setLeftTopRightBottom</span><span class="token punctuation">(</span>mLeft<span class="token punctuation">,</span> mTop<span class="token punctuation">,</span> mRight<span class="token punctuation">,</span> mBottom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">notifySubtreeAccessibilityStateChangedIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> changed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Called from layout when this view should * assign a size and position to each of its children. * * Derived classes with children should override * this method and call layout on each of * their children. * @param ... */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而由于 ViewGroup 是继承  <code>View</code> 后对 <code>layout()</code> 进行了简单的重写，这里便不再赘述。下面我们继续去看看 <code>ViewGroup</code> 的子类，看看 <code>LinearLayout</code> 是如何实现 <code>onLayout()</code> 方法的。我们可以看到，它是对该方法进行了重写，然后分别对两种不同的列表方向进行 layout 位置确定。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mOrientation <span class="token operator">==</span> VERTICAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">layoutVertical</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">layoutHorizontal</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们继续查看垂直的 <code>layoutVertical()</code> 方法，我们依旧是做了代码省略。从注释1和注释2处，我们可以看到 childTop 是不断在增大的，其实就是是实现了从上到下排序，后来的元素被排在原本元素的下面，而不会重叠。</p><p>注释3处的详细代码也已给出，<code>setChildFrame()</code> 方法其实就是调用子元素的 <code>layout()</code> 方法测量子寻找子元素的位置。这样子设计就可以层层传递，把整个 <code>View</code> 树的位置都寻找出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">layoutVertical</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">View</span> child <span class="token operator">=</span> <span class="token function">getVirtualChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            childTop <span class="token operator">+=</span> <span class="token function">measureNullChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> GONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> childHeight <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span> lp <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">)</span> child<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasDividerBeforeChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                childTop <span class="token operator">+=</span> mDividerHeight<span class="token punctuation">;</span><span class="token comment">//2</span>            <span class="token punctuation">}</span>            childTop <span class="token operator">+=</span> lp<span class="token punctuation">.</span>topMargin<span class="token punctuation">;</span>            <span class="token function">setChildFrame</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> childLeft<span class="token punctuation">,</span> childTop <span class="token operator">+</span> <span class="token function">getLocationOffset</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">,</span>                          childWidth<span class="token punctuation">,</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>            childTop <span class="token operator">+=</span> childHeight <span class="token operator">+</span> lp<span class="token punctuation">.</span>bottomMargin <span class="token operator">+</span> <span class="token function">getNextLocationOffset</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">+=</span> <span class="token function">getChildrenSkipCount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//注释3的详细代码</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setChildFrame</span><span class="token punctuation">(</span><span class="token class-name">View</span> child<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    child<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> left <span class="token operator">+</span> width<span class="token punctuation">,</span> top <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>layout</code> 的流程到此就讲完了。这里提一个<strong>小问题</strong>，<code>layout</code> 流程是找出 View 的位置，那么 <code>getWidth()</code> 方法获得的位置是 <code>layout</code> 流程得出的位置吗？</p><p>一般来说，是同一个位置。<code>layout</code> 流程的位置是称为最终位置(或最终宽高)，而 <code>measure</code> 流程的称为测量位置(或测量宽高) 。两者只是赋值时机不同。阅读这两篇文章后，我们分析流程，你会发现，<code>getWidth()</code> 和 <code>getMeasuredWidth()</code> 两者得到的结果是一样的，我们也<strong>可认为测量宽高就是最终宽高</strong>。当然，如果对此重写了，就会不一致了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> mRight <span class="token operator">-</span> mLeft<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>在此展示绘制的 layout 过程的流程图，希望能帮助理解该过程。</p><p><img src="https://pic.lxtlovely.top/blog/20221012204339.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;l=23805">View.java - Android Code Search</a></p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;l=6408;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab?q=layout&amp;ss=android/platform/superproject:frameworks/base/core/java/android/view/">ViewGroup.java - Android Code Search</a></p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/LinearLayout.java;drc=b0193ccac5b8399f9b5ef270d102b5a50f9446ab;l=1828?q=LinearLayout&amp;ss=android/platform/superproject">LinearLayout.java - Android Code Search</a></p><p>《Android进阶之光》</p><p>《Android开发艺术探索》</p>]]></content>
      
      
      <categories>
          
          <category> View的事件体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> View的工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探析Android中的四类性能优化</title>
      <link href="/2023/03/10/tan-xi-android-zhong-de-si-lei-xing-neng-you-hua/"/>
      <url>/2023/03/10/tan-xi-android-zhong-de-si-lei-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="探析Android中的四类性能优化"><a href="#探析Android中的四类性能优化" class="headerlink" title="探析Android中的四类性能优化"></a>探析Android中的四类性能优化</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第23天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>性能优化系列文章</p><p><a href="https://juejin.cn/post/7156240670615666719">初识性能优化 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7157352645110759437">探析Android中的四类性能优化 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7157709505046773790">浅谈Android的流畅性优化——归因分析 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7158095081726017567">浅谈Android的流畅性优化——案例分享 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解Android运行原理</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章 <a href="https://juejin.cn/post/7156240670615666719">初识性能优化</a> 中我们提到我们需要从<strong>流畅性优化</strong>、<strong>资源优化</strong>、<strong>稳定性优化</strong> 和 <strong>系统级优化</strong> 这四个层面来对Android中的软件做优化。但是我们只是简单的对其进行介绍，以及举了一些流畅性优化的实战例子。下面，我们就对这四类优化点展开进行讲解(文章参数理论和原因，无实战 demo 展示)。</p><h2 id="流畅性优化"><a href="#流畅性优化" class="headerlink" title="流畅性优化"></a>流畅性优化</h2><h3 id="主线程模型"><a href="#主线程模型" class="headerlink" title="主线程模型"></a>主线程模型</h3><p>了解 Android 的流畅性优化之前，我们需要先了解Android的线程结构。在 Android 中，有一个<strong>主线程模型</strong>，其中所有的绘制以及交互都是在主线程中进行的，所以，当我们编写的某类代码是需要在主线程中运行的，那么这类代码必然会影响到我们的绘制等，继而影响到流畅性问题。</p><p>下图之中，展示了我们哪类代码操作代码是会影响到主线程。</p><p><img src="https://pic.lxtlovely.top/blog/Thread_struct_pic-put.png"></p><ol><li><p><strong>System Events(系统事件)</strong></p><p>例如需要关闭、开启某个页面，这些都是需要通知我们的系统的来完成的，这些就是系统事件。它会触发到主线程的耗时操作。</p></li><li><p><strong>Input Events(输入事件)</strong></p><p>输入事件并非指单纯的在输入框输入信息的事件，而是在手机上进行操作。因为手机本身可以被抽象的指代为一个输入输出的设备。在触摸屏上任意的点击都是一个输入事件，它都是在主线程中完成的，具体的流程可以查阅 <a href="https://juejin.cn/post/7123962969095929893">View体系(上)</a></p></li><li><p><strong>Application(应用事件)</strong></p><p>我们APP的启动都是要经过应用事件，而各种生命周期的初始化相关的回调、初始化也是要经过它。例如各类启动的 SDK 都是放在 <code>Application</code> 类中初始化的，这都是要在主线程中进行的。</p></li><li><p><strong>Services(服务事件)</strong></p><p>这一点大家也许有点疑惑，后台服务为什么会是在主线程的呢？我们不是一般新开一个线程在后台执行耗时任务的么？上述的两点其实是不矛盾的，只是我们平时的理解也许有误，认为 <code>Services</code> 作为后台任务就是在子线程才对。但事实上， <code>Services</code> 是运行在主线程中的，即使它是在后台执行的，而我们需要执行耗时任务的时候，再在 <code>Services</code> 中创建子线程来执行这个耗时任务 。</p></li><li><p><strong>Alarm(定时事件)</strong></p><p>定时事件中，由于它默认子线程是不安全的，主线程才是安全的，所以是需要到主线程去执行的。</p></li></ol><p>而 <strong>UI绘制</strong> 虽然是在主线程中的，但是我们的代码是无法去控制它的，这是系统进行控制的。我们只能输入需要绘制什么，但是不能影响其绘制的流程。</p><h3 id="界面更新以及卡顿"><a href="#界面更新以及卡顿" class="headerlink" title="界面更新以及卡顿"></a>界面更新以及卡顿</h3><h4 id="界面更新的VSync"><a href="#界面更新的VSync" class="headerlink" title="界面更新的VSync"></a>界面更新的VSync</h4><p>知晓主线程模型后，我们来看一下 <strong>界面是如何刷新</strong> 的</p><p>下面的一图是介绍 <strong>Android</strong> 中的 <strong>VSync</strong> 机制，<strong>VSync</strong> 我们可以简单的理解为是一种屏幕刷新的信号，它会每隔一段时间就会刷新一次屏幕。(<a href="https://www.leixue.com/ask/what-is-vsync">Vsync 是什么</a>、<a href="https://juejin.cn/post/7125824443598766116">View体系(下)</a> 或 <a href="https://codeantenna.com/a/f78pMsvFP3">Android图形显示系统</a> 可查看更多信息)</p><blockquote><p><strong>垂直同步（VSync）：</strong>当屏幕从缓冲区扫描完一帧到屏幕上之后，开始扫描下一帧之前，发出的一个同步信号，该信号用来切换前缓冲区和后缓冲区。</p></blockquote><p><img src="https://pic.lxtlovely.top/blog/00720825-ad55-4e2b-91e5-d950559d1fcd.png"></p><p>而在 <strong>Android</strong> 中，<strong>VSync</strong> 信号的回调一般会在主线程中每隔16ms执行一次，而我们通过频率计算公式来计算一下： $f=\frac{1}{T} $，当 $T=16ms$ 时候，我们可以得出 $f=62.5HZ$ 这个就是我们常用的 $60fps$ 。</p><p>在我们的视觉感知中，$24fps$ 通常可以让人眼感知到线性动作了，而人能感知到不卡顿的最低帧数则为 $25fps$。在 <strong>Vsync</strong> 机制中的 $60fps$ 则可以让设备呈现更加绚丽的效果，对于当下热炒的 $90fps$ 和 $120fps$ 则是让感觉上更加顺滑而已，但是对于与实际和功耗的平衡，高于 $60fps$ 是没有必要的。</p><p>如下图，<code>UI Draw</code> 会在 16ms 就执行一次，所以我们的需要让我们的绘制流程在 16ms 内执行完才不会出现卡顿问题。</p><p><img src="https://pic.lxtlovely.top/blog/Thread_struct_pic-put1.png"></p><p>所以说，如果我们不影响界面的更新，让<strong>每次绘制流程都可以保持在16ms以下，那么就不会出现卡顿问题</strong>了。</p><h4 id="三类主要的卡顿以及其原因"><a href="#三类主要的卡顿以及其原因" class="headerlink" title="三类主要的卡顿以及其原因"></a>三类主要的卡顿以及其原因</h4><ul><li><p><strong>输入事件无法即时响应</strong></p><p>这类卡顿主要表现为我们滑动屏幕的时候，屏幕根本无法响应。这是由于我们在主线程中执行了一段非常耗时的、与事件无关的代码，而由于这段代码还在执行，所以输入事件根本没法执行，也没法绘制出我们的滑动效果了。</p><p><img src="https://pic.lxtlovely.top/blog/Thread_struct_pic-put2.png"></p></li><li><p><strong>输入事件立刻响应，但其耗时较长</strong></p><p>这类卡顿中，输入事件是立即响应的了，但是由于我们又在输入事件的分发中做了很多计算逻辑等耗时的操作，所以还是会出现卡顿。其表现出来的效果是，滑动的时候一卡一卡的，这是由于输入事件的执行超过了16ms了，导致了丢帧的问题。</p><p><img src="https://pic.lxtlovely.top/blog/Thread_struct_pic-put3.png"></p></li><li><p><strong>UI Draw 之外需要在主线程中执行的任务耗时长</strong></p><p>我们知道，主线程中不单只有 UI 的绘制任务，还有其他的例如 Application 任务也是需要放置在主线程中执行的。这些任务如果不做处理，也一股脑的放置在主线程中执行，那么也会导致其占用时间过长，使得 APP 出现丢帧的问题。</p><p><img src="https://pic.lxtlovely.top/blog/Thread_struct_pic-put4.png"></p></li></ul><h4 id="解决卡顿问题"><a href="#解决卡顿问题" class="headerlink" title="解决卡顿问题"></a>解决卡顿问题</h4><p>我们现已经知道了三大类卡顿的原因，其归结来说的原因就是主线程中出现了不必要的耗时操作，导致最后主线程的UI绘制出现阻塞或者溢出。那么我们解决卡顿、做流畅性优化的方法也是很明确了，那就是**让主线程尽量只做交互(Input Event)以及刷新(UI Draw)**。当然很多需要在主线程中的代码是无法避免的，但是我们尽量使其缩小，让所有的耗时代码都在子线程中运行，这样子使得其减少丢帧，能够更加的连贯顺滑。</p><p><img src="https://pic.lxtlovely.top/blog/Thread_struct_pic-put5.png"></p><h4 id="没有VSync会怎么样？"><a href="#没有VSync会怎么样？" class="headerlink" title="没有VSync会怎么样？"></a>没有VSync会怎么样？</h4><p>上述讲到了 VSync 的作用以及卡顿的原因和处理，我们知道 VSync 信号可以用于同步刷新页面。那若是没有 VSync 信号，我们的页面会出现什么样的问题？</p><p>其实会出现<strong>画面撕裂</strong>。画面撕裂是什么呢？如下图中红色框中的图面，与上边出现了撕裂，这种就是画面撕裂。其出现的原因是上一帧的页面还在绘制中，下一帧页面就继续占用资源绘制了，所以会出现几帧的页面同时绘制在一个页面中，出现了画面撕裂感。</p><p><img src="https://pic.lxtlovely.top/blog/20221022205107.png"></p><p>那为何映入 VSync 信号之后就不会有画面撕裂问题了呢？</p><blockquote><p>在显示一张图片的时候，其流程为：GPU进⾏渲染—&gt;帧缓存区⾥ —&gt;显示控制器—&gt;读取帧缓存区信息(位图) —&gt; 数模转化(数字信号处—&gt;模 拟型号) —&gt;(逐⾏扫描)显示。<br>正常的情况下，显示器完全显示完一帧后，帧缓存区更新一帧，这样便不会有撕裂问题，但事实并非如此。<br>当显卡输出帧的速度比显示器快，显示器的处理速度跟不上显卡，在显示器处理显卡丢过来的第1帧的时候，第2帧就又到了（帧缓存区已更新），导致同一个画面同时出现1、2两帧，撕裂就产生了</p></blockquote><p>在没有 VSync 信号的时候，一旦GPU渲染完后就会交由屏幕去将其绘制出来，那么 CPU 和 GPU 处理的事件有长有短，一旦两帧出现绘制冲突，就会出现画面撕裂问题了。</p><p>所以说，<strong>解决画面撕裂的核心是决定好数据的交换时机(绘制时机)由谁来控制</strong>。在绘制中，不应该是 CPU 处理写入之后就立即绘制，而应该是由屏幕渲染完一帧之后才去绘制绘制下一帧。然而屏幕不是控制器，它无法控制什么时候进行绘制，但是它可以传递 VSync 信号给 Android 系统，借助 VSync 信号，Android 就可以让 CPU 在新的一帧开始的时候立即处理显示问题了。</p><blockquote><p>VSYNC 信号是由屏幕（显示设备）产生的，并且以 60fps 的固定频率发送给 Android 系统，Android 系统中的 SurfaceFlinger 接收发送的 VSYNC 信号。VSYNC 信号表明可对屏幕进行刷新而不会产生撕裂。</p></blockquote><p><img src="https://pic.lxtlovely.top/blog/1666442354.jpg"></p><p>图片中未对 VSync 信号进行处理，导致出现卡顿问题。</p><h2 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h2><p>资源是什么？</p><p>资源指的是：Android 手机的软件和硬件资源，通俗意义上应用依赖于移动端的有限资源和系统规定的数值。例如：功耗、存储、流量、系统参数、CPU、内存等。</p><p>我们对上述的资源进行优化的时候，其并非无关联的、相互隔离的，例如流量消耗大，那么功耗消耗也会大，内存和存储的消耗也会大。但是我们需要优化某一个点的时候，是需要聚焦于其中这一点进行优化的。</p><p>当然，如<a href="https://juejin.cn/post/7156240670615666719">前文</a>所说我们使用的设备也是在不断地优化的，但是并非说等着硬件的优化，我们的软件能跑就行。对于资源优化，我们追求的是<strong>利用最小的资源达到最好的效果</strong>，这是很有挑战性，对自我提升也很高的事情。</p><h3 id="Android-能做哪些资源优化"><a href="#Android-能做哪些资源优化" class="headerlink" title="Android 能做哪些资源优化"></a>Android 能做哪些资源优化</h3><p><img src="https://pic.lxtlovely.top/blog/20221022215929.png"><img src="https://pic.lxtlovely.top/blog/20221022215944.png" style="zoom: 40%;"></p><p>上图中展示了对于当下技术特征的满意度，我们会发现上述的点其实都不算高。无论是内存/存储、电量或者是流量等等方面都是需要我们继续优化的点。而右图指的是如果后台的进程如果很多的话，使得内存占用很多，导致前台的APP也会收到内存的限制变得卡顿。</p><p><img src="https://pic.lxtlovely.top/blog/Resource_optimization-put0.png"></p><p>上图中<strong>对音量的优化</strong>其实收益也是很大的。例如当下的自媒体平台抖音，它就是在端侧进行了音量优化，取得了很大的收益。因为每一个人拍视频的音量和背景嘈杂度都是不一样的，所以我们需要在上传视频到平台的时候进行音量优化，对各种音量进行优化、拟合到同一水平，这样子可以使得用户在打开不同视频的时候，视频的音量不会影响到用户的体验。</p><p><img src="https://pic.lxtlovely.top/blog/20221022222337.png"><img src="https://pic.lxtlovely.top/blog/20221022222347.png" style="zoom: 60%;"></p><p>而对于亮度的优化，可以使得我们的功耗降低，节省手机有限的电量。上面左图可以看出，深色模式对电量的影响是很显著的。而同时在优化亮度的时候，我们也可以找出功耗与体验的平衡点，使得功耗低的时候，我们的体验感也是最好的。这一点可以在右图中看出。</p><h2 id="稳定性优化"><a href="#稳定性优化" class="headerlink" title="稳定性优化"></a>稳定性优化</h2><p><img src="https://pic.lxtlovely.top/blog/anr-example-framed.png"></p><p>对于稳定性优化，我们主要讲的点是 ANR，而其他的崩溃等则是需要尽可能的抹去，这里暂不做分析。ANR 是应用长时间处于阻塞状态的时候，系统会触发 ANR ，然后系统会询问是否需要强制退出或者继续等待。</p><p><strong>ANR 存在的的原因是我们不能因为一个程序出现问题就使得整个手机无法使用</strong>。所以需要 ANR 来将错误的程序退出。而我们对其优化则需要尽可能的减少这种情况的出现，使得用户被打断，这是一种很不好的体验。</p><p>诊断 ANR 时需要考虑以下几种常见模式：</p><ol><li>应用在主线程上非常缓慢地执行涉及 I/O 的操作。</li><li>应用在主线程上进行长时间的计算。</li><li>主线程在对另一个进程进行同步 binder 调用，而后者需要很长时间才能返回。</li><li>主线程处于阻塞状态，为发生在另一个线程上的长操作等待同步的块。</li><li>主线程在进程中或通过 binder 调用与另一个线程之间发生死锁。主线程不只是在等待长操作执行完毕，而且处于死锁状态。</li></ol><h2 id="系统级优化"><a href="#系统级优化" class="headerlink" title="系统级优化"></a>系统级优化</h2><p><img src="https://pic.lxtlovely.top/blog/20221022224827.png"></p><p>对于 Android 系统，Google 本身也对其系统做了很多重大的优化，这些优化使得 Android 系统很多的问题得以解决，很多使用体验变得更好。而这些优化的点，我们可以作为今后的思路，让我们对 APP 的优化有更广阔的思考，让我们能发掘出更多的优化点和对其有更加深刻的思考</p><p><img src="https://i.loli.net/2021/10/09/iFWTetAq6OBwRZn.png" alt="Android架构图"></p><p>对于业务开发中，我们很多时候都是使用到 Application 和 FrameWork 层，但是需要真正做好性能优化，我们需要了解到很多的 核心库 Kernel 层的原理，这对我们自身来说，也是正向的收益。</p><p>本篇四大性能优化的详解就讲到这里，如果对你有帮助欢迎star！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><p><a href="https://zhuanlan.zhihu.com/p/217298155">VSync与屏幕撕裂 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/guoyongming925/article/details/107326361">屏幕撕裂及掉帧原因与解决方案_Daniel_Coder的博客-CSDN博客_屏幕撕裂</a></p><p><a href="https://www.jianshu.com/p/b173875d82e4">浅谈画面撕裂 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/u011578734/article/details/110921266">Android 显示刷新机制、VSYNC和三重缓存机制_卜大爷的博客-CSDN博客_android vsync</a></p><p><a href="https://blog.csdn.net/Frakie_Kwok/article/details/78623982">Service 运行在主线程_Frank_de_Boer的博客-CSDN博客_service是否在主线程中执行</a></p><p><a href="https://juejin.cn/post/7125824443598766116">View体系(下)|青训营笔记 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7123962969095929893">View体系(上)|青训营笔记 - 掘金 (juejin.cn)</a></p><p><a href="https://www.leixue.com/ask/what-is-vsync">Vsync 是什么 - 泪雪网 (leixue.com)</a></p><p><a href="https://blog.csdn.net/a740169405/article/details/70548443">Android图形显示系统（一）_良秋的博客-CSDN博客_android显示系统</a></p><p><a href="https://juejin.cn/post/7123529478558613512">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://developer.android.com/topic/performance/vitals/anr">ANR  | Android 开发者  | Android Developers</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法|Rabin Karp 算法</title>
      <link href="/2022/11/17/rabin-karp-suan-fa/"/>
      <url>/2022/11/17/rabin-karp-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Rabin-Karp-算法"><a href="#Rabin-Karp-算法" class="headerlink" title="Rabin Karp 算法"></a>Rabin Karp 算法</h1><p>用 <code>R</code> 表示数字的进制数，用 <code>L</code> 表示数字的位数，就可以总结出如下公式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 在最低位添加一个数字 */</span><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">8264</span><span class="token punctuation">;</span><span class="token comment">// number 的进制</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 想在 number 的最低位添加的数字</span><span class="token keyword">int</span> appendVal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 运算，在最低位添加一位</span>number <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">*</span> number <span class="token operator">+</span> appendVal<span class="token punctuation">;</span><span class="token comment">// 此时 number = 82643</span><span class="token comment">/* 在最高位删除一个数字 */</span><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">8264</span><span class="token punctuation">;</span><span class="token comment">// number 的进制</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// number 最高位的数字</span><span class="token keyword">int</span> removeVal <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// 此时 number 的位数</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 运算，删除最高位数字</span>number <span class="token operator">=</span> number <span class="token operator">-</span> removeVal <span class="token operator">*</span> <span class="token class-name">R</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时 number = 264</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果你能理解这两个公式，那么 Rabin-Karp 算法就没有任何难度</strong></p><h2 id="187-题「-重复的-DNA-序列」"><a href="#187-题「-重复的-DNA-序列」" class="headerlink" title="187 题「 重复的 DNA 序列」"></a>187 题「 <a href="https://leetcode.cn/problems/repeated-dna-sequences/">重复的 DNA 序列</a>」</h2><p>我简单描述下题目：</p><p>DNA 序列由四种碱基 <code>A, G, C, T</code> 组成，现在给你输入一个只包含 <code>A, G, C, T</code> 四种字符的字符串 <code>s</code> 代表一个 DNA 序列，请你在 <code>s</code> 中找出所有重复出现的长度为 10 的子字符串。</p><p>比如下面的测试用例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：s <span class="token operator">=</span> <span class="token string">"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"</span>输出：<span class="token punctuation">[</span><span class="token string">"AAAAACCCCC"</span><span class="token punctuation">,</span><span class="token string">"CCCCCAAAAA"</span><span class="token punctuation">]</span>解释：子串 <span class="token string">"AAAAACCCCC"</span> 和 <span class="token string">"CCCCCAAAAA"</span> 都重复出现了两次。输入：s <span class="token operator">=</span> <span class="token string">"AAAAAAAAAAAAA"</span>输出：<span class="token punctuation">[</span><span class="token string">"AAAAAAAAAA"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数签名如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">findRepeatedDnaSequences</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>题解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">findRepeatedDnaSequences</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 先把字符串转化成四进制的数字数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'G'</span><span class="token operator">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'T'</span><span class="token operator">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 记录重复出现的哈希值</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记录重复出现的字符串结果</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数字位数</span>    <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// 进制</span>    <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 存储 R^(L - 1) 的结果</span>    <span class="token keyword">int</span> RL <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 维护滑动窗口中字符串的哈希值</span>    <span class="token keyword">int</span> windowHash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 滑动窗口代码框架，时间 O(N)</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 扩大窗口，移入字符，并维护窗口哈希值（在最低位添加数字）</span>        windowHash <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">*</span> windowHash <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 当子串的长度达到要求</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 根据哈希值判断是否曾经出现过相同的子串</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>windowHash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 当前窗口中的子串是重复出现的</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 当前窗口中的子串之前没有出现过，记下来</span>                seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>windowHash<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 缩小窗口，移出字符，并维护窗口哈希值（删除最高位数字）</span>            windowHash <span class="token operator">=</span> windowHash <span class="token operator">-</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">*</span> RL<span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 转化成题目要求的 List 类型</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其<strong>主要妙处是使用窗口滑动算法，结合将字符串数字化的逻辑，提高字符串的匹配效率从而提高效率</strong></p><h2 id="28-找出字符串中第一个匹配项的下标"><a href="#28-找出字符串中第一个匹配项的下标" class="headerlink" title="28. 找出字符串中第一个匹配项的下标"></a><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标</a></h2><p>标准 RK 算法</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回  -1 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：haystack <span class="token operator">=</span> <span class="token string">"sadbutsad"</span><span class="token punctuation">,</span> needle <span class="token operator">=</span> <span class="token string">"sad"</span>输出：<span class="token number">0</span>解释：<span class="token string">"sad"</span> 在下标 <span class="token number">0</span> 和 <span class="token number">6</span> 处匹配。第一个匹配项的下标是 <span class="token number">0</span> ，所以返回 <span class="token number">0</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>题解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nlen <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>        <span class="token comment">//设置超大的素数Q来降低哈希冲突</span>        <span class="token keyword">long</span> <span class="token class-name">Q</span> <span class="token operator">=</span> <span class="token number">1658598167</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> RL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//通过求模来计算RL，否则得出的数会过于庞大</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nlen <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            RL <span class="token operator">=</span> <span class="token punctuation">(</span>RL<span class="token operator">*</span><span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token class-name">Q</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//计算neeedle的哈希值</span>        <span class="token keyword">long</span> needleHash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            needleHash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">R</span><span class="token operator">*</span>needleHash <span class="token operator">+</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token class-name">Q</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hlen <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> windowhash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> hlen<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//计算haystack的哈希值</span>            windowhash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">R</span><span class="token operator">*</span>windowhash <span class="token operator">+</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token class-name">Q</span><span class="token punctuation">;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> nlen<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//由于哈希冲突，进行两次判断是否为对应的字符串，反正这里不会出现哈希冲突</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>windowhash <span class="token operator">==</span> needleHash<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> left<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">//不符合，就将做左侧数字移出窗口</span>                windowhash <span class="token operator">=</span> <span class="token punctuation">(</span>windowhash <span class="token operator">-</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">*</span>RL<span class="token punctuation">)</span><span class="token operator">%</span><span class="token class-name">Q</span> <span class="token operator">+</span> <span class="token class-name">Q</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token class-name">Q</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用超大的素数 Q 来做求模运算，这个求模运算是为了<strong>用哈希算法使得字符串变成的数字变小</strong>。超大的Q是为了解决哈希冲突。</p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Rabin Karp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业务系统的需求分析设计|设计模式</title>
      <link href="/2022/11/15/ye-wu-xi-tong-de-xu-qiu-fen-xi-she-ji/"/>
      <url>/2022/11/15/ye-wu-xi-tong-de-xu-qiu-fen-xi-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="业务系统的需求分析设计"><a href="#业务系统的需求分析设计" class="headerlink" title="业务系统的需求分析设计"></a>业务系统的需求分析设计</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>假设我们需要实现一个积分系统，其包括积分的查询、消耗、增加以及消耗优先级。具体业务需要是参考业界的设计以及当下需要。这里不做阐述。</p><p>当业务需求确定好之后，如何将这个需求实现插入我们的系统中？</p><h2 id="积分系统的合理系统设计"><a href="#积分系统的合理系统设计" class="headerlink" title="积分系统的合理系统设计"></a>积分系统的合理系统设计</h2><p>首先，我们需要明确的是，这个系统需要是成为单独的模块独立出去的，此处暂且不理会是使用哪种架构手段，因为这更多取决于当前项目阶段，而非业务问题。</p><p>那既然是要独立出去的模块，我们就需要遵循好系统设计中的设计模式，才能将其设计的高内聚、低耦合。</p><p>关于一个功能的设计，我们需要考虑的是<strong>界定功能范围、通信手段</strong>，有时甚至需要考虑到性能问题，譬如是否需要使用到多进程。</p><h3 id="界定功能范围"><a href="#界定功能范围" class="headerlink" title="界定功能范围"></a>界定功能范围</h3><p>在了解了业务的需求后，我们知道了积分系统的功能，但这并不意味着我们需要将这些功能一股脑的全部塞给积分系统来实现，如果系统设计是如此单一的话，那么设计模式也就没有用武之地了。</p><p>基于积分系统，我们有如下的<strong>三种设计</strong>。</p><ul><li><p>使用中间层管理规则</p><p><img src="https://pic.lxtlovely.top/blog/202211151714182.png" alt="积分系统1"></p><p>这一种功能划分是把各种会涉及到积分<strong>规则都由营销系统来管理</strong>，而积分系统只负责对积分的增删查改这类操作。</p><p>比如，用户通过下订单赚取积分。订单系统通过异步发送消息或者同步调用接口的方式，告知营销系统订单交易成功。营销系统根据拿到的订单信息，查询订单对应的积分兑换规则（兑换比例、有效期等），计算得到订单可兑换的积分数量，然后调用积分系统的接口给用户增加积分。</p></li><li><p>积分规则由各子系统负责</p><p><img src="https://pic.lxtlovely.top/blog/202211151719019.png" alt="积分系统设计-导出2"></p><p>这一种功能划分即为每个需要调用到积分系统的子系统各自设置对应的积分规则，然后自己调用积分系统实现增删查改功能即可。</p><p>用户下订单成功之后，订单系统根据商品对应的积分兑换比例，计算所能兑换的积分数量，然后直接调用积分系统给用户增加积分。</p></li><li><p>积分规则包含在积分系统内</p><p><img src="https://pic.lxtlovely.top/blog/202211151719019.png" alt="积分系统设计-导出2"></p><p>这类方式中，积分系统不再只包含增删查改功能，同时还具备着各类积分规则。当用户下订单之后，只需将订单信息通知给积分系统，积分系统则会根据积分规则来判断需要做何种执行。</p></li></ul><p>为了避免业务知识的耦合，让下层系统更加通用，一般来讲，我们不希望下层系统（也就是被调用的系统）包含太多上层系统（也就是调用系统）的业务信息，但是，可以接受上层系统包含下层系统的业务信息。在上述的例子中，订单系统为上层系统，积分系统为下层系统。所以<strong>订单系统可以包含积分的相关信息，但是积分系统最好不要包括订单的相关信息</strong>。所以这里面我们需要使用的是前两个方案，这两个方案的下层系统没有包含上层系统的信息，只是执行了积分的增删查改。</p><h3 id="通信手段"><a href="#通信手段" class="headerlink" title="通信手段"></a>通信手段</h3><p>上述我们对功能的划分中都有信息的流转，那么这些信息该使用何种手段进行传递呢？</p><p>比较常见的系统之间的交互方式有两种，一种是同步接口调用，另一种是利用消息中间件异步调用。第一种方式简单直接，第二种方式的解耦效果更好。</p><p>我们对通信手段的选择主要就从其<strong>功能角度</strong>和<strong>依赖关系</strong>来判断。</p><p><strong>功能角度</strong></p><p>用户下订单成功之后，订单系统推送一条消息到消息中间件，营销系统订阅订单成功消息，触发执行相应的积分兑换逻辑。这样订单系统就跟营销系统完全解耦，订单系统不需要知道任何跟积分相关的逻辑，而营销系统也不需要直接跟订单系统交互。</p><p><strong>依赖关系</strong></p><p>使用同步或者异步调用的另一个判断逻辑是：当前调用逻辑是否有依赖关系，比如下完单产生的积分立即被使用，那么推荐使用同步接口调用；如果生成的积分需要等待下次才能使用，推荐使用异步消息调用</p><p>同步接口的场景，业务执行的前提是依赖的业务正常执行。 异步接口的场景，业务执行完毕后notify其他业务即可，即使这个notify出现问题，也不影响当前业务的正常执行。</p><h2 id="业务模型的设计"><a href="#业务模型的设计" class="headerlink" title="业务模型的设计"></a>业务模型的设计</h2><p>在业务模型的开发中，我们常常会使用到分层模型，关于分层模型，我在<a href="https://juejin.cn/post/7160309148888858638">Android 的架构演进 - 掘金 (juejin.cn)</a>一文中有讲到，里面说到分层模型的优点是 <strong>结构清晰、利与管控，同时也方便人员分工</strong>。这里我再次将分层模型的优点列为以下的五点。</p><p>譬如MVP、MVVM等分层架构</p><ol><li>分层能起到代码复用的作用：M层中的数据处理能力是可以被不断复用的。譬如其中被抽象为接口的网络访问部分，就是可以不断被复用的M层。</li><li>分层能起到隔离变化的作用：分层结构中，每层的稳定性不同，相互之间是隔离的。改变稳定性差的层次(高层)，对稳定性强的层次(底层)影响不大</li><li>分层能起到隔离关注点的作用：分层能让每层关注的功能更加的单一，符合单一职责原则</li><li>分层能提高代码的可测试性：分层模型便于单元测试，譬如我们可以直接对M层中的功能进行验证</li><li>分层能应对系统的复杂性：当系统变得复杂和庞大的时候，拆分层次总是能解决问题，使其维护性变得更好。拆分有垂直和水平两个方向。水平方向基于业务来做拆分，就是模块化；垂直方向基于流程来做拆分，就是这里说的分层</li></ol><p>在这些设计中，我们使用到的一些设计思想如下</p><p><img src="https://static001.geekbang.org/resource/image/33/61/3332071c82182e72518143d05b8eaa61.jpg?wh=1913*1703"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 业务系统 </tag>
            
            <tag> 需求分析设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 的架构演进</title>
      <link href="/2022/11/02/android-zhong-de-jia-gou-yan-jin/"/>
      <url>/2022/11/02/android-zhong-de-jia-gou-yan-jin/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-的架构演进"><a href="#Android-的架构演进" class="headerlink" title="Android 的架构演进"></a>Android 的架构演进</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第30天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>架构</p><p><a href="https://juejin.cn/post/7159583246794096670">Android 需要哪些架构手段 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7160309148888858638">Android 的架构演进 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>已入门 Android </li><li>了解过一些设计原则</li><li>有 Android 项目经历</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <a href="https://juejin.cn/post/7159583246794096670">Android 需要哪些架构手段</a>一文中，我们讲述了一些我们需要了解学习的架构手段，我们已经学习到了一些常用的手段。那么对于一个项目、一个软件产品来说，我们的架构是如何跟随软件的生命周期来演进的呢？</p><p>本文将带大家了解一下，一个架构是如何跟随软件的生命周期来演进的。</p><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put5.png" alt="Architecture_means-put5"></p><h2 id="一个架构如何基本成型的"><a href="#一个架构如何基本成型的" class="headerlink" title="一个架构如何基本成型的"></a>一个架构如何基本成型的</h2><p>当业务处于试点孕育阶段的时候，假如我们的功能很简单，只需要一个滑动的且可点击的列表。那么我们事实上并不需要多么复杂的架构，只需要一个单体的架构即可。<strong>何为单体架构呢？就是东西都塞一块，无需做模块分离</strong>。</p><p>当过了试验阶段的孕育期，我们的产品功能开始变多了，我们开始需要加入账号体系，需要支持图文混排，需要对咨询内容可以点赞、收藏，需要引入多板块的内容，开始往咨询浏览产品的方向发展。这时我们便是进入了婴儿期。</p><p>这个时候，我们不能再用单体架构了，我们需要开始使用分层的思想，将界面交互、业务逻辑和数据存储分离开来，让他们各自行驶自己的职责。同时，众多的业务需要多次使用网络和利用多线程，我们就需要封装抽离出网络模块和多线程处理功能。这时候，我们<strong>需要用到的就是分离架构了，上文中我们讲到的 MVX(MVC、MVP、MVVM) 就属于典型的分离结构</strong>。有兴趣的同学可以查看 <a href="https://juejin.cn/post/7132504015908274213">带你封装MVP架构(上)</a> 一文。</p><p>而当使用场景变得更多的时候，例如出现要加入视频流业务、加入课程业务的需求，那么我们需要将不同的业务场景拆离出来，使其成为独立的架构体系，每个架构体系之间再进行通信使其连接成一个 APP。这个阶段其实是处于学步期了，<strong>我们需要把各个业务模块化或者组件化，拆分出来成为独立的业务</strong>。而这里的模块化或者组件化自然就不是只针对业务的，还有很多中间层，中台之类的代码需要抽离出来，所以<strong>我们需要做好一套分层的架构</strong>，才能更好的降低耦合，实现业务。</p><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put6.png" alt="Architecture_means-put6"></p><p>这里简单给大家讲一下何为分层架构：分层架构是一套运用很广泛的架构模式，其最基础、最经典的设计包括如下几层：</p><ul><li><p>展示层：接收输入，呈现界面</p></li><li><p>业务层：处理业务数据，进行数据流转</p></li><li><p>持久层：连接下层数据，向上提供数据的增删查改</p></li><li><p>数据层：存储数据</p><p>分层之后可以将各层之间隔离，每层之间只关注和实现自身的的需求即可，这样子可以很好的让有各自擅长点的人员分配去他们擅长的层级，且一般不会有层级的耦合。<strong>所以其优点是：结构清晰、利与管控，同时也方便人员分工。</strong></p><p>分层架构由于结构分层明显，是很容易向里面不断加入层级的，加入层级又往往能解决出现的问题。这也就导致了会出现很多中间层级，同时很多时候加入层级就是因为我们原本的分层规定很严格，所以需要加入新的层级解决问题。由此，我们知道了<strong>其缺点是：层级管控严格造成灵活性低，从而使得会不断出现很多中间层，让架构层级很多。</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/012e7cd1fc44469f807b8f94a3707328~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="分层架构"></p></li></ul><p>我们了解了分层架构的思想，那么在 Android 中是如何体现的呢，下面我将引用万表商城的分层图给大家展示以下一般在 Android 中的分层架构是怎么样的。</p><p>我们可以看到前三层基本是一致的，但是在 Android 中一般没有数据层；数据层一般由 Android 内部提供，或者是继承在最底层的第三方库中了。</p><p>当我们的项目发展到分层的阶段，我们的项目架构其实已经基本成型了，再往后的阶段就是对项目架构的优化了。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/2/1676f7ebbf66136e~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="万表架构"></p><h2 id="架构的优化演进"><a href="#架构的优化演进" class="headerlink" title="架构的优化演进"></a>架构的优化演进</h2><h3 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h3><p>在我们的架构分了层级之后，各个业务和模块之间，可以抽离出一些公共的部分为其他业务或者功能提供服务。这时候我们的项目等于步入了青年期，需要使用到<strong>服务化的架构</strong>。例如抽离出视频播放能力，流媒体能力成为一个服务，将其提供给众多的调用方。在设计模式中所讲的 <code>IOC</code> ：控制反转模型，它就类似于服务化架构。其中<strong>调用方不直接依赖被调用方，而是依赖于抽象</strong>，这也符合依赖倒置的思想。</p><p>Android 中，在上文中提到的服务管理，也是一个服务化的架构，对外只提供服务接口、隐藏具体实现，可以让调用者和提供者更加解耦。</p><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put7_1.png" alt="Architecture_means-put7_1"></p><p>而服务化架构的一种实现，就是<strong>事件驱动模型</strong></p><p>在上述的服务化架构中，调用方和被调用方是基于抽象来调用的。那么这个抽象的实现形式怎么样才是最好的呢？这里给大家介绍事件驱动模型，用这个模型架构来解决服务化的抽象调用问题。</p><p>在事件驱动架构中，主要包括 <code>Event</code> 、<code>Event Processor</code> 和 <code>Event Channel</code> 这三部分。其主要作用就是请求服务方和服务提供方之间，可以 <strong>无痛沟通</strong>。其思想是基于订阅者模式和责任链模式。</p><ul><li>Event：事件。请求服务方请求服务的时候，会发出一个事件。这个事件具象到 Android 中就是某种点击事件或者某种事件变化。</li><li>Event Processor：事件处理器。事件的消费者或者订阅者，会接收到事件，可以选择自行消费或者交由其他消费者消费掉。</li><li>Event Channel：事件队列。类似于菜市场，所有的事件都交由这个队列售卖，对应的订阅者获取到它来进行消费。</li></ul><p>我们使用过的 <code>EventBus</code> 或者 <code>RXjava</code> 就是类似这种的模型。其<strong>优点</strong>是适用广泛，可以拓展出很多的变种，且其支持消息的异步处理；而<strong>缺点</strong>则是消息过多之后很容易膨胀，且处理事件的链路的不明晰，使得我们的理解成本会很高。</p><p><img src="https://pic.lxtlovely.top/blog/20221030212442.png"></p><p>下面的一张图片，是一个事件驱动架构的实例，可以很好的展示其各级分发和调用的特点。</p><p>我们可以看到，下面的事件并不是直接就被订阅消费的了，而是在订阅之后又会再次派发，直到出现了可以消费该事件的处理器。</p><p>而下面不同处理器之间的互通，使用的通信机制可以是：Binder、Handler 或者是 Broadcast 等，这些都是可以进行跨进程通信的。</p><p><img src="https://pic.lxtlovely.top/blog/20221030213349.png"></p><h3 id="微内核架构"><a href="#微内核架构" class="headerlink" title="微内核架构"></a>微内核架构</h3><p>在我们的业务愈发扩大的时候，我们的产品进入了壮年期，出现了很多非刚需的业务。例如我们的一些灰度测试、一些实现组的模型，或者一些其他想要动态化发布的业务，我们不需要它一开始在安装的时候就出现，而是在使用过程中在动态安装下来。需要实现这种功能的时候，我们应该怎么办呢？这个时候，我们应该使用的是<strong>宿主-插件架构</strong>，这在 Android 中就是我们经常听的插件化。使用插件化，动态下发 APK，实现灵活可插拔的功能。</p><p>而宿主-插件架构的一个实现，就是 <strong>微内核架构</strong> ，将插件注册到内核，由内核加载调度。下图中的右侧就是微内核的示意图。</p><ul><li>Core System：宿主容器。不含盖业务逻辑，它是提供给不同的业务插件运行在其中的一个运行环境。</li><li>Plug-in Component：插件。这是具体的业务实现，通过挂载到宿主容器中运行。</li></ul><p>在 Android 中由于要实现四大组件，其方案便是：要在宿主容器中预埋四大组件(提供四大组件的桩函数)，在插件中调用这些桩能力。这样子就可以在插件中实现四大组件了。</p><p>微内核架构的优缺点如下：</p><p><strong>优点</strong>：</p><ul><li>高拓展性，可做到随意加载业务</li><li>插件隔离化，其实和组件化，模块化一样具有解耦能力，但是它是天然解耦，无法被随意调用的，且其多了动态下发的能力</li></ul><p><strong>缺点</strong>：</p><ul><li>对宿主要求高，且其不易拓展，宿主是运行环境，需要时较为固定的</li><li>插件的注册和通信机制较为复杂，需要宿主做通信派发</li></ul><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put8.png" alt="Architecture_means-put8"></p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>当业务和团队逐渐稳定的时候，我们的产品进入了稳定期，这个是时候由于前期快速开发、业务快速增长，会出现很多之前留下来的问题，包括冗余的业务代码、有限制改动的地方等等。这个阶段我们就需要去解决这些问题了，需要使用到的手段是 <strong>领域驱动架构</strong>。 </p><p>所谓邻域驱动，是以领域专家和问题域为驱动，在特定的领域(问题域)去解决相对小的问题。其中，领域专家会使用特定的领域语言，可能是某种约定的标记语言或者特定文本。例如小程序是某个特定的问题域，由小程序的专家去解决和将其隔离开来。我们就只需要请求调起小程序，由小程序闭环去使用和解决其对应的问题。</p><p>领域驱动架构中使用的实例是：<strong>微服务架构</strong></p><p>这里的微服务和后端所说的微服务是一样道理的，但是在这里我们所解决的问题并非和服务端要实现的负载均衡一模一样。这里的微服务还能解决一些异构问题，串联不同平台开发的服务，使得其合并到一起使用。</p><ul><li>Client Requests：服务发起方。以某种方式发送请求。例如点击跳转出小程序。</li><li>Broker：服务调度。将请求放置于对应的微服务节点上面去处理</li><li>Service Component：微服务。是高度内聚的模块，对外暴露出接口。在服务被使用之前，该服务需要被注册到服务中心中。</li></ul><p>这里的微服务架构和 IOC 不同的地方是，IOC 是为同构服务，微服务可以服务于异构模型。所谓异构，就是使用不同语言，运行于不同平台。</p><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put9.png" alt="Architecture_means-put9"></p><p>本文到此就结束了，文章从产品的雏形期讲述到产品的稳定期，希望这个过程能让你更加了解一个产品对应的架构演化过程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_39128265/article/details/100859125">什么是单体架构_小猴子3000的博客-CSDN博客_单体架构</a></p><p><a href="https://juejin.cn/post/7011854392827756557">Android工程师，不理解模块化、组件化、插件化的区别怎么行？ - 掘金 (juejin.cn)</a></p><p><a href="https://zhuanlan.zhihu.com/p/40353581">一篇文章读懂分层架构 - 知乎 (zhihu.com)</a></p><p><a href="https://juejin.cn/post/6994997061351374861">软件架构模式之分层架构 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844903729452302350">万表商城Android架构演进 - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/ruanrunxue/article/details/124052722">从分层架构到微服务架构（五）之服务化架构_元闰子的博客-CSDN博客_服务化架构</a></p><p><a href="https://juejin.cn/post/7123529478558613512#heading-47">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 架构演进 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 需要哪些架构手段</title>
      <link href="/2022/11/01/android-xu-yao-na-xie-jia-gou-shou-duan/"/>
      <url>/2022/11/01/android-xu-yao-na-xie-jia-gou-shou-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-需要哪些架构手段"><a href="#Android-需要哪些架构手段" class="headerlink" title="Android 需要哪些架构手段"></a>Android 需要哪些架构手段</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第29天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>架构</p><p><a href="https://juejin.cn/post/7159583246794096670">Android 需要哪些架构手段 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7160309148888858638">Android 的架构演进 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>已入门 Android </li><li>了解过一些设计原则</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于 Android 的架构问题，想必大家都听说过 MVC、MVP 和 MVVM ，且当下又出现了更新的 MVI。诸如此类的这些架构，都是我们日常所在使用的。这是我们代码设计中，对于业务开发会经常要用到的。但是除却业务开发呢？我们需要将系统分为更多层的时候需要怎么办呢？要了解哪些东西呢？</p><p>我们不妨将视野放宽，看看 Android 本身的架构，或者是其他客户端手段的架构，亦或是前端后端的架构，学习他们的架构手段，我们也能收获很多设计的思想。所以本文将会简单的讲一下一些值得我们学习的架构手段。</p><h2 id="架构的作用"><a href="#架构的作用" class="headerlink" title="架构的作用"></a>架构的作用</h2><p>我们经常说一个架构帮助我们解耦，让我们开发得更顺畅。那么架构的作用，其出现的根本原因只是帮助我们解耦吗？</p><p>当然，架构能帮助我们进行解耦这是其出现的一个重要原因；但事实上更重要的是，它<strong>能够帮助我们解决特定领域在不同阶段发送的业务问题</strong>。它是伴随着一整个软件的生命周期而存在的，继而也要对应的解决每个生命周期中出现的问题。</p><p>我们软件周期包括：新生期、稳定期和老年期。</p><p>在新生期，架构要适应业务的不断膨胀问题；而在稳定期，架构则要让业务不断地重构和优化；最后到了老年期，架构要做的是如何让项目老得更慢，不要让过分臃肿的代码影响业务的正常运作。</p><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put0.png" alt="Architecture_means-put0"></p><p>我们可以有理想的架构，一开始就设定好来解决这些个问题，但实际上，理想总归是理想，我们要接受现实的骨感。事实上，我们很难存在一个理想的架构，因为业务是不断在变化的，变化才是软件唯一的不变点，所以架构也只能随着变化而变化，不断去解决出现的问题。</p><h3 id="Android-的架构设计"><a href="#Android-的架构设计" class="headerlink" title="Android 的架构设计"></a>Android 的架构设计</h3><p>我们可以看一下 Android 的架构设计，看看它的设计是如何解决出现的问题的。</p><p>下面的图大家都很熟悉了，这里不做详细介绍，只做简单的罗列。</p><ul><li>APP 层：业务代码层，在这一层实现自己的业务</li><li>FrameWork 层：应用框架层，开发者对系统的 UI 编写，对数据的使用和调用接口，使用的都是这一层的 API</li><li>Binder IPC：由于 Android 是有进程隔离的，所以使用 Binder 来跨进程高效通信</li><li>系统服务层：提供窗口、音视频、相机等能力。往下是对硬件能力的封装，往上是可以通过 Binder 暴露给其他人</li><li>HAL 硬件抽象层：其屏蔽底层驱动的差异，使得系统服务层可以快速匹配到不同的硬件设备</li><li>LINUX 内核层：CPU 、内存等重要的驱动服务在这一层实现。</li></ul><p>由此，我们可以看出，Android 内部架构的设计是很有逻辑性的，底层为高层服务，越高层使用的越是定制化的内容。</p><p><img src="https://i.loli.net/2021/10/09/iFWTetAq6OBwRZn.png" alt="Android架构图"></p><h3 id="不同领域的架构设计"><a href="#不同领域的架构设计" class="headerlink" title="不同领域的架构设计"></a>不同领域的架构设计</h3><p>由下图，我们可以看出在不同的端侧，其使用的语言、框架和平台都是不同的。但是在他们身上是可以找出共同点的，这些共同点是经过长期积累，抽象出来的方法论，是很值得我们学习的点。</p><p>公共的点包括：</p><ul><li>编程思想：OOP、IOP、IOC 等</li><li>问题分解：按业务和技术分解</li><li>领域建模：接口设计、DSL 等</li><li>服务治理：模块化、组件化、容器化等</li><li>流程机制：敏捷开发模型、软件测试手段等</li><li>架构标准：公约文档，数据监测等</li></ul><p><img src="https://pic.lxtlovely.top/blog/auth_code"></p><p>所以说，对于架构的设计，我们应当知晓它是不断随着需求和出现的问题不断变更优化的，且不同的架构虽有差异，但是差异之外的共同点很值得我们去学习。</p><h2 id="值得学习的架构手段"><a href="#值得学习的架构手段" class="headerlink" title="值得学习的架构手段"></a>值得学习的架构手段</h2><p>了解了架构的作用之后，我们需要学习一些架构手段，以便解决软件生命周期中出现的各种问题。</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>要做好架构设计，首先逃不掉需要学习的点及时设计模式，而设计模式又是基于设计原则来进行拓展的。学习设计模式，其最重要的就是学习其设计思想了。<a href="https://juejin.cn/column/7148433994391126047">设计模式 - Yj家的孺子牛的专栏 </a></p><p>而就如前文中讲过的 <code>volatile</code> 和 <code>synchronize</code> ，<code>synchronize</code> 中瘦锁容易被打断变成胖锁；而使用了 <code>volatile</code> 关键字之后就不会被打断。所以，我们认为使用了 <code>volatile</code> 关键字的单例模式更优。</p><p>这些对设计模式的深入使用的理解，是很容易影响到我们对架构设计的好坏的。</p><p>下文中，DoubleCheck 设计的单例模式就会相对更优些。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LazySafe</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleTonTest</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingleTonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingleTonTest</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//DoubleCheck</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">SingleTonTest</span> singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingleTonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTonTest</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingleTonTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MVX"><a href="#MVX" class="headerlink" title="MVX"></a>MVX</h3><p>这里说的 MVX ，是 MVC、MVP、MVVM 的统称，我们在这里暂不介绍 MVI ，大家可自行了解。</p><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>MVC：<strong>视图+控制器+模型</strong>。其中视图(View)接收到用户的操作，继而调用控制器(Controller)来控制模型，模型(Model)处理数据后就会更新UI。</p><p>其中，View 指的是 XML 布局，Controller 由 Activity 承载，Model 是提供接口给 Controller 层处理数据的类，同时 Model 层在处理好数据后会通知更新 UI。</p><p>这个架构中，很好的将数据和控制器分离，让各自的分工和操作更加的简便。但是 Model 层和 View 层没有很好的解耦，以及 Controller 层与 View 层之间却还是有耦合的，当视图的控制逻辑变多的时候，控制层就会变得很臃肿。</p><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put1.png" alt="Architecture_means-put1"></p><h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><p>为解决 MVC 中出现的问题，出现了 MVP 架构，其解决了 C 层和 V 层的耦合问题。</p><p>在 MVP 中，将控制器(Controller)换成显示器(Presenter)，<strong>让 P 层充当 V 层和 M 层的中间人，让 P 层来控制这些交互逻辑</strong>。这样子，Activity 就不会很臃肿，数据和视图也完全解耦了。但是同样的，其控制回路会变得很庞大，我们就需要加重去维护 P 层了。</p><p> 而通常情况下，我们会使用接口类，利用抽象来做 V 层和 P 层的连接。但同时，也会使得类的数量变得很多。</p><p>ps：笔者有写过关于封装 MVP 的文章，此处附上：<a href="https://juejin.cn/post/7132504015908274213">带你封装MVP架构(上)|青训营笔记 - 掘金 (juejin.cn)</a></p><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put2.png"></p><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p>为解决 MVP 中控制回路复杂的问题，MVVM 诞生了。</p><p><strong>MVVM 相对于 MVP 的不同就是 P 层变化为了 VM 层</strong>，这个 VM 层可以在 V 层中建立一个模型，将 V 层中的点击事件或者是数据更新等与 VM 层绑定。这个架构是通过提前约定好视图和数据的绑定关系，让控制逻辑自动化和简化了，这个看不见的逻辑是由 Android 内部来做的，所以我们不会像 P 层一样需要定义很多的接口，也不会因为控制回路变得很臃肿。</p><p>MVVM 架构很适合于解决如下问题：</p><ol><li>需要页面监听功能</li><li>界面元素多且需要和数据绑定的复杂页面</li></ol><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put3.png" alt="Architecture_means-put3"></p><h4 id="优缺点总结"><a href="#优缺点总结" class="headerlink" title="优缺点总结"></a>优缺点总结</h4><p>MVC -&gt; MVP -&gt; MVVM 这三个架构的演进是不断的解决前者的问题而提出的，其复杂度也是在不断提升的。</p><p>我们在日常使用的时候，业务简单的时候使用简单的架构就好，而复杂的业务则要使用复杂的架构来实现，将他们各自应用到适合他们的地方即可。</p><table><thead><tr><th>架构模型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>MVC</td><td>1. 模块职责划分明确。主要为 M、V、C 三个层次，利与代码的维护</td><td>1. View 和 Controller 容易膨胀<br>2. View 与 Model 没有完全分离</td></tr><tr><td>MVP</td><td>1. View 和 Model 完全分离，可以修改视图而不会影响模型，交互逻辑全部放置于 Presenter 层<br>2. P 层和 V 层的交互是通过接口来进行的，方便了单元测试</td><td>1. 页面逻辑复杂的话，对应的接口会变多，维护成本会增大</td></tr><tr><td>MVVM</td><td>1. VM 层与 V 层解耦更加彻底，VM 层只负责处理和提供数据<br>2. VM 层只包括数据和业务逻辑、没有 UI ，方便单元测试</td><td>1. 数据绑定后使得程序难以调试，因为绑定过程是黑盒话的，数据是自动更新到 UI 的。</td></tr></tbody></table><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>我们经常听到的有 OOP ，所谓 OOP 指的是面向对象编程，将对象作为第一公民，以对象出发来编程，然后再定义该对象的属性。</p><p>而 AOP，则为面向切面编程，它会抽离出各种对象的共同属性，以这个共同属性作为一个切面，再将该切面定义到各种的类中 。</p><p>这类切面编程的方法就是使用注解或者字节码注入的方式把功能进行植入。例如 <code>@Aspect</code> 注解就是 AOP 编程方式。</p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC 即为控制反转，在<a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则</a>一文中，我有做讲解，此处直接搬运其解释过来：</p><p><strong>控制反转</strong> 缩写为IOC(Inversion Of Control)，简单解释其意思为：<strong>把控制权反转过来</strong></p><p>具体是把控制权从谁手中反转过来呢？从程序员手中。那反转到谁那里呢，反转到代码框架那里。</p><p>这个概念的本意是，程序员在编写代码的时候，编写了设置了整个代码流程，此时控制权在程序员手中。</p><p>当对代码抽象框架化，代码拓展性提高，且最终由框架实现代码流程。程序员只输入少量代码启动代码流程，这个就是符合控制反转思想。</p><blockquote><p>框架提供了一个可扩展的代码骨架，用来组装对象、管理整个执行流程。程序员利用框架进行开发的时候，只需要往预留的扩展点上，添加跟自己业务相关的代码，就可以利用框架来驱动整个程序流程的执行。</p></blockquote><p>但是<strong>控制反转只是一种设计思想</strong>，具体的实现方式各式各样。前文 <strong><a href="https://juejin.cn/post/7149376761606701063">开闭原则</a></strong> 的demo中，其设计也是符合控制反转原则的，最终是由框架自行驱动程序。</p><p>对应的，<code>LiveData</code> 也是一种控制反转思想的变体，与 <code>MVP</code> 的由 <code>P层</code> 驱动 <code>View</code> 层一样，使用数据驱动 UI。</p><p>上面的这个说的这个框架，我们多数时候使用的是 <strong>接口</strong> 。这个接口掌管控制权的同时，也让其更加解耦，更加容易变更。</p><p>Android 中使用 IOC 的典型例子：</p><p>像 <code>ActivityManager</code>、<code>PackageManager</code> 和 <code>WindowManager</code> 这些的服务，是注册到 ServiceManager 中的；而开发者需要使用这些服务的话，是从 ServiceManager 中获取的，并未直接与该服务打交道。</p><p><img src="https://pic.lxtlovely.top/blog/Architecture_means-put4.png" alt="Architecture_means-put4"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上述讲解了我们 Android 开发者需要学习的一些架构手段，这些架构手段都是在不断的解决我们不同阶段所遇到的问题，其共同目标是为了实现 <strong>高内聚低耦合</strong> ，使用合适的手段解决合适的问题，是我们学习的初衷。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.woshipm.com/pmd/3154440.html">B端产品生命周期：不同阶段，产品经理如何开展工作</a></p><p><a href="https://juejin.cn/post/7123529478558613512#heading-47">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://o8a5zpir4t.feishu.cn/docx/doxcnmUbNUaIaZMsPGoGhdzPHLd">青训营结业项目答辩汇报文档 – 破忒头 组 - 飞书云文档 (feishu.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 架构种类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊ART虚拟机_如何保证高效执行</title>
      <link href="/2022/10/28/liao-liao-art-xu-ni-ji-ru-he-bao-zheng-gao-xiao-zhi-xing/"/>
      <url>/2022/10/28/liao-liao-art-xu-ni-ji-ru-he-bao-zheng-gao-xiao-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="聊聊ART虚拟机-如何保证高效执行"><a href="#聊聊ART虚拟机-如何保证高效执行" class="headerlink" title="聊聊ART虚拟机_如何保证高效执行"></a>聊聊ART虚拟机_如何保证高效执行</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第28天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>ART 系列</p><p><a href="https://juejin.cn/post/7158466528013697038">聊聊ART虚拟机_对象的分配问题 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7158850522395443208">聊聊ART虚拟机_对象的使用和销毁问题 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7159217043189792775">聊聊ART虚拟机_如何保证高效执行 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解 Java 语法和 JVM</li><li>已阅读 <a href="https://juejin.cn/post/7158466528013697038">聊聊ART虚拟机_对象的分配问题</a>、<a href="https://juejin.cn/post/7158850522395443208">聊聊ART虚拟机_对象的使用和销毁问题 )</a>两篇文章</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在前面两篇文章中聊到了 ART 虚拟机中对于对象的分配、使用和销毁的问题。主要了解其如何分配到对应的内存、通过几种手段来使用，且如何 ART 是如何最好的解决内存碎片的问题。</p><p>那么本文中，我们就继续聊一聊 ART 是如何使用几种方式来保持高效执行的。</p><h2 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h2><p>前文中我们有提到，在 ART 中的执行方式有三种：包括解释执行、JIT 执行和 AOT 执行。</p><p><img src="https://pic.lxtlovely.top/blog/20221027220029.png"></p><h3 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h3><p>其实就是去解释翻译 APK 包内的 .dex 代码，这个.dex 代码是所有 .class 文件的一个总集合，是由 Java代码翻译而来的。最后再由 ART 去解释执行。</p><p>下图中，我们打开 APK 文件可以看到对应的 .dex 文件。</p><p><img src="https://pic.lxtlovely.top/blog/image-20221027221641143.png" alt="image-20221027221641143"></p><h3 id="JIT-执行"><a href="#JIT-执行" class="headerlink" title="JIT 执行"></a>JIT 执行</h3><p>对于 JIT 解释执行，它会在解释执行的时候，他会基于线程的执行位置以及优先级生成 profile 文件以及对此打分，如果分数达标，就会提交给 JIT 编译器编译以及进行 OSR 替换。(此处的打分只是一个形象的比喻)而<strong>对应的函数下一次执行的时候，就会换成 JIT 执行了，而不再是解释执行</strong>。</p><p><img src="https://pic.lxtlovely.top/blog/20221027221834.png"></p><h3 id="AOT-执行"><a href="#AOT-执行" class="headerlink" title="AOT 执行"></a>AOT 执行</h3><p>AOT 是在程序运行之前，对 APK 中的函数进行编译。不像 JIT 是在程序执行阶段编译的。其有如下几个特点：</p><ol><li>和程序是否允许无关</li><li>编译以 dex 为单位，而不是以函数为单位</li><li>结果持久化</li></ol><p>AOT 与 JIT 的不一样的地方就是：</p><ul><li>不需要维持一块内存来保持 JIT 的结果</li><li>不需要预热</li><li>无法动态调整</li></ul><p>上述的三类执行方式中，JIT 和 AOT 的方式的效率必然是要大于直接解释执行的。所以，在 ART 中，他们使用了以上的多种方式来进行结合执行，以提高 ART  的整体运行效率。</p><p><img src="https://pic.lxtlovely.top/blog/20221027230120.png"></p><h3 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h3><p>对于上面的 AOT 与 JIT ，为何 AOT 就会比 JIT 更优呢？这是由于绑定时间的不同所导致的。</p><p>绑定得越迟，动态性越好，性能越差</p><p>绑定得越早，动态性越差，性能越好</p><p>例如 Java 中对象的分配问题，是需要运行前进行继承链的寻找的，这就是延迟绑定，但是其动态性会好很多。例如在 Android 的 View 体系中，他也是延迟绑定的。其不能在编译阶段就确定对应使用的父类 View 是哪个，需要在安装的时候才能确定好，<strong>因为不同的 Android 版本的 View 类是不一致的</strong>，所以不能一开始就确定好父类，需要在安装好的时候才去确定。</p><h2 id="栈管理"><a href="#栈管理" class="headerlink" title="栈管理"></a>栈管理</h2><p>在 Java 中，基本类型变量和对象的引用都是放置在栈内存中的。而上述的三类执行方式，其对于栈的管理方式也是不同的。大体分为两类，解释执行是一类，而 JIT 和 AOT 的编译后执行又是一类。</p><p>解释执行部分，其将栈全权托管给虚拟机完成的；而对于编译后执行的一类，其遵从对应指令集的约定来对栈进行管理，其与 C++ 的约定类似，指定某些寄存器来进行执行和管理。</p><p>而这两种不同的栈管理方式之间，是可以采<strong>用一些机制来不断切换</strong>的。有兴趣的同学可以自行了解。</p><p>需要注意的是：栈管理中是和异常抛出有联系的，异常执行中的 catch() 是一种回栈行为。</p><h2 id="多线程与同步问题"><a href="#多线程与同步问题" class="headerlink" title="多线程与同步问题"></a>多线程与同步问题</h2><p>在 java 中，可能会出现线程不同步的问题，例如两个线程共享一个变量的时候会出现获得的两个变量的值不一致的问题，因为在 Java 中，是默认对变量复制之后，再去操作复制的的变量的，所以会导致这个不同步的问题。</p><p><img src="https://pic.lxtlovely.top/blog/c87bbc8c-c204-49de-a2f7-6ffa3a1434f7.png"></p><p>所以，为了解决这个问题，会需要使用同步机制。我们可以使用 <code>synchronize</code> 语句来加锁解锁，而在前文中提到的 <code>monitor</code> 的信息就是保存锁的信息，其先生成胖锁，后转化为瘦锁。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89c58042ab51454886b97dedbeee77e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="Object 类"></p><p>瘦锁(spinLock)：由锁主动去响应，但是消耗很大</p><p>胖锁(mutexlock)：由执行方去通知锁，但是消耗小</p><p>胖锁和瘦锁的切换机制，但要自定义只使用瘦锁的时候，可以使用自定义的 <code>volatile</code> 来实现</p><p><code>volatile</code> ：解决三个问题。语序重拍，读时未同步，写时被修改。实现原理是基于读写栏栅处理cpu读写顺序，同时处理编译时候严格按照编码顺序处理。</p><p><img src="https://pic.lxtlovely.top/blog/20221028121733.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_44966641/article/details/121776795">JIT（动态编译）和AOT（静态编译）编译技术比较_Adenialzz的博客-CSDN博客_aot技术</a></p><p><a href="https://juejin.cn/post/7144630313514172429">理解 dex 与 art - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/zhzhangnews/article/details/107691397">android synchronized原理分析(二) Monitor_小二哥m的博客-CSDN博客</a></p><p><a href="https://juejin.cn/post/7123529478558613512#heading-47">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://zhuanlan.zhihu.com/p/457525249">Android开发进大厂系列（二）字节篇 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> ART </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ART </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 高效执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊ART虚拟机_对象的使用和销毁问题</title>
      <link href="/2022/10/28/liao-liao-art-xu-ni-ji-dui-xiang-de-shi-yong-he-xiao-hui-wen-ti/"/>
      <url>/2022/10/28/liao-liao-art-xu-ni-ji-dui-xiang-de-shi-yong-he-xiao-hui-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="聊聊ART虚拟机-对象的使用和销毁问题"><a href="#聊聊ART虚拟机-对象的使用和销毁问题" class="headerlink" title="聊聊ART虚拟机_对象的使用和销毁问题"></a>聊聊ART虚拟机_对象的使用和销毁问题</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第27天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>ART 系列</p><p><a href="https://juejin.cn/post/7158466528013697038">聊聊ART虚拟机_对象的分配问题 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7158850522395443208">聊聊ART虚拟机_对象的使用和销毁问题 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7159217043189792775">聊聊ART虚拟机_如何保证高效执行 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解 Java 语法和 JVM</li><li>已阅读 <a href="https://juejin.cn/post/7158466528013697038">聊聊ART虚拟机_对象的分配问题</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章中，我们聊到了对象的分配问题，简单说明了何为 ART 虚拟机，以及对象中类的加载、内存布局等问题。本文继接上文，将会讲完对象的使用和销毁的问题，希望本文对你有所帮助。</p><p>在 ART 中，对于一个对象，我们可以从其分配、使用到销毁来看，其主要结构如下：</p><p><img src="https://pic.lxtlovely.top/blog/20221025222418.png"></p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><h3 id="分配器"><a href="#分配器" class="headerlink" title="分配器"></a>分配器</h3><p>在 Android 里面的内存分配是由内存分配器来进行分配的。其作用如下：</p><p>APP 的 java 对象内存分配是托管给 VM 来处理的，不会直接向操作系统申请。VM 就像一个连接 java 代码和内存的中介，VM 才是真正的内存管控者，其控制对内存的占用和内存布局。</p><p><img src="https://pic.lxtlovely.top/blog/Object_destruction-put01.png" alt="Object_destruction-put01"></p><p>而分配器则分为 3 类分配器，分别是：<code>TLAB</code>、<code>ROSallocator</code>、<code>LOSallocator</code>。他们的原理和作用如下：</p><ul><li><strong>小内存/临时变量 -&gt; TLAB</strong>：给每个线程开一些小缓存，一些小的对象，例如栈上的对象就在 TLAB 上面进行分配。</li><li><strong>中等内存/数组、容器 -&gt; ROSallocator</strong>：而较为大些的对象，则在 ROSallocator 中进行分配，这时候 ROSallocator 会直接去使用 <code>VM mem pool</code> ，此为 ART 托管的内存池。</li><li><strong>大量内存/Bitmap存储图片 -&gt; LOSallocator</strong>：更大的对象，交由 LOSallocator 去处理，就直接从 linux 上面取。例如 Bitmap 就是这样子。</li></ul><p><img src="https://pic.lxtlovely.top/blog/Object_destruction-put1.png" alt="Object_destruction-put1"></p><h3 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h3><p>由于内存中分配算法的问题，出现了多次分配后使得<strong>找不出一块连续的内存</strong>来放置当前需要的内存块，从而导致内存溢出。而 ART 分配原理就是找到一段在最优范围里面<strong>符合大小的连续内存</strong>。</p><p>如下图中所示，未被使用的内存很分散，但是却由于不能组成连续的内存块，无法被使用了。这些分散的内存块就是内存碎片。而这些内存碎片就是由内存分配过程中导致的，事实上，我们可以使用较好的内存回收策略来解决这些碎片问题。</p><p><img src="https://pic.lxtlovely.top/blog/20221027102101.png"></p><h2 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h2><p>当出现了内存碎片问题可以用两种方法来解决。分别是 GC 和 RC。</p><p>GC：垃圾回收 (Garbage Collection)，是一些语言管理内存的方式，如 Java 语言等；程序员不需要主动管理内存，程序运行时环境(虚拟机)会做垃圾回收的工作，就是在<strong>合适的时机 自动释放</strong>不再需要的内存。(需要系统去主动收集不使用的对象)</p><p>RC：引用计数(Reference Count)，每当有一个新的强引用指针指向，对象的引用计数就会<code>+1</code>，当减少一个强引用指针，引用计数就会<code>-1</code>，当引用计数为<code>0</code>时，对象就会被销毁。在 iOS 的 Swift 中，对象的内存是通过引用计数来管理的。(无需系统主动去收集不使用的对象)</p><h3 id="RC的问题以及解决方案"><a href="#RC的问题以及解决方案" class="headerlink" title="RC的问题以及解决方案"></a>RC的问题以及解决方案</h3><p>事实上，虽然 RC 释放内存十分及时，但是单纯使用 RC 机制会出现一些问题的。这个问题就是环引用问题。</p><p>当两者出现环应用的话，就很难对其进行回收，因为他们之间会出现一个死结，导致其引用计数不会小于1。</p><p><img src="https://pic.lxtlovely.top/blog/20221027142457.png"></p><p>为解决环引用的问题，IOS 的策略是使用弱引用和手动标记。手动标记中是将解环动作移交给了开发者，让其能小于1。而弱引用则是这样子，当对象有其他的对象引用的时候，弱引用就算作一种引用，可以找到被引用对象；若是没有其他人引用，只有相互引用的时候，弱引用就不算引用。</p><p><img src="https://pic.lxtlovely.top/blog/20221027144718.png"></p><h3 id="ART的引用"><a href="#ART的引用" class="headerlink" title="ART的引用"></a>ART的引用</h3><p>而在 ART 中，其使用的是 GC 机制，但是同时它也具有三种引用机制。</p><ul><li>强引用：直接持有的，无法被 GC 回收</li><li>软引用：内存不足时候会被回收</li><li>弱引用：一旦触发 GC 必定被回收</li></ul><p>我们需要注意的是：<strong>GC 并非在内存不够的时候才会被触发</strong></p><h3 id="触发GC的条件"><a href="#触发GC的条件" class="headerlink" title="触发GC的条件"></a>触发GC的条件</h3><p>如果 GC 只是在内存不够的时候才被触发，那么就会导致很多的问题。如果在内存不够才被触发，那么会使得性能下降且 GC 裂化。</p><p>而在 Android 中，触发 GC 的条件有如下两个</p><ol><li>内存不够了</li><li>手机认为该 GC 了<ul><li>VM 堆占用达到水位。该水位是维持性能和内存的平衡点。</li><li>系统内存紧张。进程太多了，需要 GC 一下。</li><li>未知原因。可能是锁屏了，有些手机认为你在锁屏后不会再次使用，然后就趁机 GC 一下。</li></ul></li></ol><p><img src="https://pic.lxtlovely.top/blog/Object_destruction-put2.png" alt="Object_destruction-put2"></p><p>由此我们可以看出，IOS 的内存回收是要比 Android 要及时的，所以 Android 的内存中总是会存有垃圾在的。这也是为何 IOS 内存少，但是运行却未受太大影响的原因。</p><h3 id="GC的方式"><a href="#GC的方式" class="headerlink" title="GC的方式"></a>GC的方式</h3><p>首先，我们需要了解一下 GC Root。<strong>GC Root 就是 GC 的起点，从这个起点出发的对象，都不能被释放</strong>。因为GC 认为 GC Root 以及它引用的对象是程序后面的可能会用到的，所以不会释放；没有被 GC Root 直接或间接引用的对象，后面一定不会被用到，可以被释放掉。</p><p>一般有如下四个起点：</p><ul><li>栈/在栈内存的变量</li><li>static 变量</li><li>native 中的 JNI 引用的对象(native ref)</li><li>VM 保留</li></ul><p>如下图所示，处理 对象C ，其他的对象其引用起点都是 GC Root，所以只有 对象C 需要被 GC 掉。</p><p><img src="https://pic.lxtlovely.top/blog/Object_destruction-put3.png" alt="Object_destruction-put3"></p><p>而在基于 GC Root 来进行 GC 的方式则有两种，包括 <code>Tracing GC</code> 和 <code>Copy GC</code>。</p><h4 id="Tracing-GC"><a href="#Tracing-GC" class="headerlink" title="Tracing GC"></a>Tracing GC</h4><p>Tracing GC 的方法是 从 root 遍历，然后将遍历过的都标记下来，被标记过的就是 GC Root 引用链上面的，最后将没有标记的 GC 掉即可。</p><p><img src="https://pic.lxtlovely.top/blog/20221027153746.png"></p><h4 id="Tracing-GC-1"><a href="#Tracing-GC-1" class="headerlink" title="Tracing GC"></a>Tracing GC</h4><p>Copy GC 的方法也是 从 root 出发，不过是将遍历过了对象 copy 到一个空闲的区域，然后将原有的区域的内存集中 GC 掉。这个方法的好处就是可以获得一块连续的内存空间。</p><p><img src="https://pic.lxtlovely.top/blog/20221027154345.png"></p><h4 id="ART中的应用场景"><a href="#ART中的应用场景" class="headerlink" title="ART中的应用场景"></a>ART中的应用场景</h4><p>而在 ART 中，对于两种 GC 是的<strong>应用场景</strong>是如下这样子的：</p><table><thead><tr><th></th><th>前台GC</th><th>后台GC</th></tr></thead><tbody><tr><td>使用场景</td><td>应用在前台的进程</td><td>非前台应用进程、service/push进程</td></tr><tr><td>算法</td><td>Tracing GC(mark-sweep)</td><td>Tracing GC(compacting)</td></tr><tr><td>速度</td><td>快</td><td>慢</td></tr><tr><td>内存碎片</td><td>有</td><td>无</td></tr><tr><td>额外空间</td><td>不需要</td><td>需要</td></tr></tbody></table><h2 id="如何编写内存友好的代码"><a href="#如何编写内存友好的代码" class="headerlink" title="如何编写内存友好的代码"></a>如何编写内存友好的代码</h2><p>基于上文的讲述，我们知道了内存的分配和回收的机制，那么我们写代码的时候应该考虑我们的代码是否对内存是友好的。例如我们在考虑使用数组或者是链表的时候，除了其增删查改性能的考虑，我们仍需考虑到其是否对内存友好。例如数组是连续的，对内存友好，而链表是离散的，对内存不友好；那么在数量基本确定的时候，我们应该首要使用数组结构。</p><p>并且，我们需要了解到 Finalizer 机制和 Cleaner 机制的不同。Finalizer 的在生命周期中只会执行一次，再次被激活后就不会再次触发这个机制了，而如果我们对其二次激活做判断和保留的话，又容易导致内存泄露问题。所以说，我们需要尽量使用 Cleaner 机制。</p><p><img src="https://pic.lxtlovely.top/blog/20221027160226.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7123529478558613512#heading-50">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/weixin_46950473/article/details/116276798">啥是内存碎片？</a></p><p><a href="https://codeantenna.com/a/wwkwmFn5jr">Android GC 简史 - CodeAntenna</a></p><p><a href="https://www.jianshu.com/p/0ecd91dc34aa">iOS原理 引用计数 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/zrh_CSDN/article/details/81053215">简述环状引用问题及其解决方案_张荣华_csdn的博客-CSDN博客_环形引用</a></p><p><a href="https://blog.csdn.net/weixin_44212383/article/details/118937670">Effective Java—08 避免使用Finalizer和Cleaner机制_茂多多的博客-CSDN博客_finalizer攻击</a></p>]]></content>
      
      
      <categories>
          
          <category> ART </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ART </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 对象使用和销毁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊ART虚拟机_对象的分配问题</title>
      <link href="/2022/10/28/liao-liao-art-xu-ni-ji-dui-xiang-de-fen-pei-wen-ti/"/>
      <url>/2022/10/28/liao-liao-art-xu-ni-ji-dui-xiang-de-fen-pei-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="聊聊ART虚拟机-对象的分配问题"><a href="#聊聊ART虚拟机-对象的分配问题" class="headerlink" title="聊聊ART虚拟机_对象的分配问题"></a>聊聊ART虚拟机_对象的分配问题</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第26天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>ART 系列</p><p><a href="https://juejin.cn/post/7158466528013697038">聊聊ART虚拟机_对象的分配问题 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7158850522395443208">聊聊ART虚拟机_对象的使用和销毁问题 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7159217043189792775">聊聊ART虚拟机_如何保证高效执行 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解 Java 语法和 JVM</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ART 虚拟机(下图 Runtime 层)，相信各位搞 Android 开发的同学都有知道，总体的印象呢就是：ART 与 JVM 不同，其不符合 JVM 规范不属于 JVM ，且为 Dalvik 的进阶版。</p><p>但是，我们有必要对 ART 进行更加深入的了解，其有助于我们对 Android 的更深层次的理解。所以，本文将和聊一聊 ART 虚拟机，以及 ART 中一个对象是如何分配的。</p><p><img src="https://pic.lxtlovely.top/blog/android_stack_720.png"></p><h2 id="何为ART虚拟机"><a href="#何为ART虚拟机" class="headerlink" title="何为ART虚拟机"></a>何为ART虚拟机</h2><p>在开始阶段，我们还是需要来聊一下什么是 ART 虚拟机，其不同在何处。</p><p><img src="https://pic.lxtlovely.top/blog/20221022224827.png"></p><p>在<a href="https://juejin.cn/post/7157352645110759437">探析Android中的四类性能优化</a>一文中，我们有提到 ART 虚拟机是 Google 在 Android4.4 的时候引入的，其用于替代 Dalvik 虚拟机。而在替代 Dalvik 虚拟机的同时，他也是兼容之前的 dex 格式的。ART 与 Dalvik 的不同点如下所示。</p><blockquote><h5 id="ART特性"><a href="#ART特性" class="headerlink" title="ART特性"></a>ART特性</h5><h6 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1. 预编译"></a>1. 预编译</h6><p>Dalvik 中的应用每次运行时，字节码都需要通过即时编译器 JIT 转换为机器码，这会使得应用的运行效率降低。在 ART 中，系统在安装应用时会进行一次预编译（AOT，Ahead-Of-Time），将字节码预先编译成机器码并存储在本地，这样应用就不用在每次运行时执行编译了，运行效率也大大提高。</p><h6 id="2-垃圾回收算法"><a href="#2-垃圾回收算法" class="headerlink" title="2. 垃圾回收算法"></a>2. 垃圾回收算法</h6><p>在 Dalvik 采用的垃圾回收算法是<strong>标记-清除算法</strong>，启动垃圾回收机制会造成两次暂停（一次在遍历阶段，另一次在标记阶段）。而在 ART 下，GC 速度比 Dalvik 要快，这是因为应用本身做了垃圾回收的一些工作，启动 GC 后，不再是两次暂停，而是一次暂停，而且 ART 使用了一种新技术（packard pre-cleaning），在暂停前做了许多事情，减轻了暂停时的工作量。</p><h6 id="3-64-位"><a href="#3-64-位" class="headerlink" title="3. 64 位"></a>3. 64 位</h6><p>Dalvik 是为 32 位 CPU 设计的，而 ART 支持 64 位并兼容 32 位 CPU，这也是 Dalvik 被淘汰的主要原因。</p></blockquote><p>由此可知，ART 让 Android 的性能有了很大的提升，从 2015 直到现在，我们使用的都还是 ART 虚拟机。</p><p>下图为 ART 的整体架构，我们可以看出，上层是执行层，负责直接对书写的代码进行处理，而下层则为运行时刻对 Java 语法的支持。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f92b5fc404b446ea9c3300664795617e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="ART架构"></p><p>而在 ART 中，对于一个对象，我们可以从其分配、使用到销毁来谈一下，其主要结构如下：</p><p><img src="https://pic.lxtlovely.top/blog/20221025222418.png"></p><h2 id="对象的分配"><a href="#对象的分配" class="headerlink" title="对象的分配"></a>对象的分配</h2><p>对于对象的分配问题，实际上是 ART 对于<strong>类的管理问题</strong>。而类中则是描述了一个对象的内存布局(类成员的大小、类型和排布)和其函数信息。</p><p>例如 Object 类，包含以下的信息：</p><p>一个保存的是类型定义，一个保存的是锁的信息。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89c58042ab51454886b97dedbeee77e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="Object 类"></p><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p><strong>一个类分配的对象的大小，是由继承链所决定的</strong>。当 Java 中的类首次使用的时候，就会进行类加载。例如首次使用到一个子类的时候，会自动将继承链上面的所有父类都进行加载，而整个继承链上面的类的总和就是该子类的大小。</p><p>例如下文中的子类的大小就是 <code>AWork</code> + <code>BaseWork</code> 两者合起来的大小。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">puvlic <span class="token keyword">class</span> <span class="token class-name">AWork</span> <span class="token keyword">extends</span> <span class="token class-name">BaseWork</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">AWork</span><span class="token punctuation">(</span><span class="token class-name">WorkBean</span> workBean<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Processbean</span> processbean<span class="token punctuation">)</span><span class="token punctuation">{</span>        workBean<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">actionA</span><span class="token punctuation">(</span>processbean<span class="token punctuation">.</span>getProcessA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p>如下图所示，当有 <code>A-&gt;B-&gt;Object</code> 这个继承关系的时候，其内存布局是父类在上，子类在下的方式进行排布的。而在每一个类里面，则是将引用类型置于最上方，而其他的类型则按字母顺序进行排序。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79ed83cf86a24cbea9bec89f73715c18~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="内存布局"></p><h3 id="双亲继承-双亲委派"><a href="#双亲继承-双亲委派" class="headerlink" title="双亲继承(双亲委派)"></a>双亲继承(双亲委派)</h3><p>何为双亲继承呢？</p><p>双亲委派的意思是如果一个类加载器需要加载类，那么首先它会把这个类请求委派给父类加载器去完成，每一层都是如此。一直递归到顶层，当父加载器无法完成这个请求时，子类才会尝试去加载。</p><p>这么做的好处有一点，那就是不会出现假的委派父类，我们在委派的时候按照既定的逻辑寻找、只有在继承链上面的才是正确的，使得不会有虚假的父类出现。</p><p>这类底层的逻辑，反映出合理的继承链是有利于设计和执行的。其实由此我们也可以看到，其实很多设计原则的道理和这些底层逻辑设计也是相同的，例如迪米特原则和接口隔离原则，都是反映出继承链要合理，不要贪多的思维。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6844903897958449166#heading-15">探索 Android 内存优化方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6950920684768296996">ART虚拟机 | Java对象和类的内存结构 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844903838927814669">面试官：说说双亲委派模型？ - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7123529478558613512#heading-50">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> ART </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ART </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 对象分配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Android的流畅性优化——案例分享</title>
      <link href="/2022/10/25/qian-tan-android-de-liu-chang-xing-you-hua-an-li-fen-xiang/"/>
      <url>/2022/10/25/qian-tan-android-de-liu-chang-xing-you-hua-an-li-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈Android的流畅性优化——案例分享"><a href="#浅谈Android的流畅性优化——案例分享" class="headerlink" title="浅谈Android的流畅性优化——案例分享"></a>浅谈Android的流畅性优化——案例分享</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第25天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>性能优化系列文章</p><p><a href="https://juejin.cn/post/7156240670615666719">初识性能优化 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7157352645110759437">探析Android中的四类性能优化 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7157709505046773790">浅谈Android的流畅性优化——归因分析 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7158095081726017567">浅谈Android的流畅性优化——案例分享 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解Android运行原理</li><li>了解何为性能优化，以及清楚性能优化的思路</li><li>已阅读 <a href="https://juejin.cn/post/7157709505046773790">浅谈Android的流畅性优化——归因分析 </a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习了<a href="https://juejin.cn/post/7157709505046773790">前文</a>的归因分析，本篇文章就带大家以实际的案例进行浅要的分析和给出具体的优化策略，具体的案例来自于网络，如有错误，还请指出。</p><h2 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h2><p>前文中，我们讲到了流畅性优化中一个布局从 xml 到成为一个 View 对象有哪些耗时的问题。我们可以回顾一下，如下图，我们可以把上文中 View 对象的创建以及其渲染等耗时问题分为以下的三点，包括 <strong>UI 构建</strong>、<strong>数据绑定</strong> 以及 <strong>View 的显示</strong>。对于上述这三点，我们可以逐个进行优化。</p><p><img src="https://pic.lxtlovely.top/blog/Smoothness%20optimization-put2.png" alt="Smoothness optimization-put2"></p><h2 id="UI-构建"><a href="#UI-构建" class="headerlink" title="UI 构建"></a>UI 构建</h2><p>UI 的构建问题中，我们有遇到诸如：载入 XML 的 IO 问题、class 的反射问题、创建 View 的问题、Asset 大锁问题。这些耗时都是由于在主线程中发生，所以导致其影响我们的流畅性。对此，Google 有提出一种异步加载布局的方案：<code>AsyncLayoutInflater</code></p><ul><li><p><strong>AsyncLayoutInflater 解决方案</strong></p><p>这个方案可以对布局进行异步的加载，其可以应用在提前知晓布局的显示，以及对布局显示的速度没有要求的情况下进行使用。例如弹窗布局放置于异步操作就没有问题，它可以提前在异步准备好操作。但是这类解决方案的劣势即是<strong>无法即时响应</strong>，且我们没有那么多情况下是可以提前知晓、准备好布局的展示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">// 异步加载 xml, 在 Activity.onCreate(xxx) 里面</span><span class="token class-name">AsyncLayoutInflater</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_try_everything<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> object <span class="token operator">:</span> <span class="token class-name">AsyncLayoutInflater<span class="token punctuation">.</span>OnInflateFinishedListener</span> <span class="token punctuation">{</span>      override fun <span class="token function">onInflateFinished</span><span class="token punctuation">(</span>view<span class="token operator">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> p1<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> p2<span class="token operator">:</span> <span class="token class-name">ViewGroup</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">setContentView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以说，这个 Google 的方案是不能适用于我们大部分的使用场景的，下面我们可以看一下抖音的优化方案。</p></li><li><p><strong>抖音的解决方案</strong></p><ul><li><p>使用 X2C 解决 xml 的性能问题。</p><p>直接把 xml 在编译阶段转化为 java 代码，这样就无需访问 IO 做反射生成布局了。</p></li><li><p>高优先级的启动预加载方案。</p><p>在 <code>Application#onCreate()</code> 阶段对布局进行预加载，到了 <code>setContentView()</code> 时候就直接使用预加载好的布局即可。</p></li><li><p>随时预加载，不与具体的逻辑绑定，生命周期存货，可自定义清理生命周期。</p><p>使用并发和字节码方式对其动态的生成</p></li></ul></li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>由于当下的 App 会有大量的网络请求，所以对网络请求数据的优化也是能带来很大收益的。</p><ul><li><p><strong>Gson 解析优化</strong></p><p>对于 Gson 的解析，我们每次使用已创建好的对象或者每次创建新的对象解析所带来的时间差异也是巨大的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//with Cache</span><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    gson<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//without Cache</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上述两种情况，其耗时如下，可见使用 Cache 带来的收益是很大的。</p><p><img src="https://pic.lxtlovely.top/blog/Smoothness%20optimization-put3.png" alt="Smoothness optimization-put3"></p></li><li><p><strong>数据协议优化：json -&gt; protobuf</strong></p><p>protobuf 对于数据无论是压缩或者是不压缩的时候，由于其体积小使得传输时间远比 json 要小得多，其带来的收益是很大的。</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7fE582myNrMvGWhM0xUcLb/ab87c994b0321433417acc25f2c4381e/java-times" alt="java-times"></p></li></ul><h2 id="View的渲染问题"><a href="#View的渲染问题" class="headerlink" title="View的渲染问题"></a>View的渲染问题</h2><p>对于 View 的渲染优化，我们可以有以下点</p><ul><li>移除不必要的背景图</li><li>修改不合理的布局</li><li>写高效的合理布局</li><li>移除默认的 Window 布局</li><li>绘制层级的优化</li></ul><p>对于上述的这些渲染中出现的耗时点，我们可以使用将<strong>绘制、渲染放置于异步操作</strong>，交互放置于主线程中。对于这个问题，不同的公司有不同的解决方案。</p><ul><li><p><strong>Google</strong></p><ul><li><p>SurfaceView </p><p>采用独立的线程进行绘制和渲染，自行控制生命周期。<a href="https://www.jianshu.com/p/b037249e6d31">SurfaceView详解</a></p></li><li><p>jetpack Compose</p><p>这是另一套 View 逻辑，用于替代现有的View。其使用组合优于继承的思想，重构出一套解耦的 UI 框架，这使得 View 更容易在异步进行绘制。</p></li></ul></li><li><p><strong>FaceBook</strong></p><p><a href="https://github.com/facebook/litho">Litho</a>：在Android上构建高效UI的声明性框架。可以应用于复杂 UI 下进行高性能渲染。</p><ul><li><p>扁平化：其使用异步线程提前执行 measure 和 draw 方法，通过将布局系统与传统的Android View系统分离，Litho可以摆脱Android强加的UI线程限制。且 Litho 使用 Yoga 进行布局，并自动减少 UI 中包含的 ViewGroup 数(扁平化思想)。除了Litho的文本优化之外，这还允许更小的视图层次结构，并提高了内存和滚动性能。</p><p><img src="https://pic.lxtlovely.top/blog/Smoothness%20optimization-put4.png" alt="Smoothness optimization-put4"></p></li><li><p>组件化：Litho 使用 Drawable 作为 Node 的绘制单元，实现了布局细粒度复用（使用Litho，每个UI项（如文本、图像或视频）都会单独回收。一旦一个项目离开屏幕，它就可以在UI中的任何地方重用，并与其他项目拼凑在一起，以创建新的UI元素。）和异步计算布局的能力。</p></li><li><p>声明式 UI ：需要重学，重构这套 UI 的编写，这也是其中的缺点。</p></li></ul></li><li><p><strong>抖音</strong></p><ul><li><p>SurfaceView 和 TexureView 一起使用。前者是可以有单独层级，后者就是和 DecorView 一个层级。</p><p><img src="https://pic.lxtlovely.top/blog/20221025124238.png"></p></li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/d04421713afe">AsyncLayoutInflater 「异步加载布局」实现 - 简书 (jianshu.com)</a></p><p><a href="https://developers.google.com/protocol-buffers/">Protocol Buffers  | Google Developers</a></p><p><a href="https://juejin.cn/post/7123529478558613512">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://codeburst.io/json-vs-protocol-buffers-vs-flatbuffers-a4247f8bda6f">JSON vs Protocol Buffers vs FlatBuffers | by Kartik Khare | codeburst</a></p><p><a href="https://auth0.com/blog/beating-json-performance-with-protobuf/">Beating JSON performance with Protobuf (auth0.com)</a></p><p><a href="https://www.jianshu.com/p/b037249e6d31">Android中的SurfaceView详解 - 简书 (jianshu.com)</a></p><p><a href="https://github.com/facebook/litho">facebook/litho: A declarative framework for building efficient UIs on Android. (github.com)</a></p><p><a href="https://fblitho.com/">Litho (fblitho.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 性能 </tag>
            
            <tag> 流畅性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识性能优化</title>
      <link href="/2022/10/25/chu-shi-xing-neng-you-hua/"/>
      <url>/2022/10/25/chu-shi-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="初识性能优化"><a href="#初识性能优化" class="headerlink" title="初识性能优化"></a>初识性能优化</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第22天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>性能优化系列文章</p><p><a href="https://juejin.cn/post/7156240670615666719">初识性能优化 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7157352645110759437">探析Android中的四类性能优化 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7157709505046773790">浅谈Android的流畅性优化——归因分析 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7158095081726017567">浅谈Android的流畅性优化——案例分享 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>性能优化一词相信大家都经常听到，今天我们就简单的来认识以下性能优化，了解做性能优化的必要性以及优化的分类。</p><h2 id="为什么要进行性能优化"><a href="#为什么要进行性能优化" class="headerlink" title="为什么要进行性能优化"></a>为什么要进行性能优化</h2><p>下图来自于 FaceBook，这是他们对 Android 性能以及用户日活跃度两个指标的统计。我们可以清晰的看到性能和用户日活是正相关的，软件的性能越好，那么表现出来的业务数据也会更好。所以说，我们<strong>技术上的指标提升，同时也会使得业务指标的提升</strong>，这是业务方面我们需要做性能优化的理由。</p><p><img src="https://pic.lxtlovely.top/blog/20221019212618.png"></p><p>而从另一个角度——<strong>硬件发展的角度</strong>来看，我们会发现当代的<strong>芯片的性能提升速度</strong>其实在是不断的<strong>下滑</strong>的。无论是 Intel 和 ADM 的x86架构的芯片，还是 ARM 的arm 架构的芯片，近年来都<strong>呈现放缓</strong>的趋势。</p><p>即使ARM平台由于其架构和工艺双重不断迭代的缘故，其性能在最近几年间提升的速度很快，最明显的表现就是我们一代代的手机的处理器之间增强的幅度很大，但是这也无法阻止技术变更的规律，它的优化幅度就是在不断的变弱，直到最后的挤牙膏。</p><p>当然多核技术也对芯片性能带来了优化，但是同时也对芯片大小和电池性能有限制，所以这项技术也是处于瓶颈了。</p><p>综上所述，从硬件发展的角度来看，硬件的发展逐渐趋于停止，我们需要做好软件的性能优化，才能在未来硬件发展停滞的时候，做好用户体验的提升。</p><p><img src="https://pic.lxtlovely.top/blog/20221019221818.png"></p><p>所以说，无论是从业务指标或者是硬件能力上来讲，我们去做好性能优化都是很必要的。</p><h2 id="什么是性能优化"><a href="#什么是性能优化" class="headerlink" title="什么是性能优化"></a>什么是性能优化</h2><p>性能优化是什么？其实就是要实现三点：快、稳、省。</p><ul><li><p>何为快？</p><p>快就是指，打开App时候很快、打开页面很快、播放视频音乐很快以及滑动得很顺畅。这些都被称之为快，<strong>核心要义是指：用户很快能接收到系统的回馈</strong></p></li><li><p>何为稳？</p><p>稳的意思是，<strong>系统很稳定</strong>。软件不会出现异常的bug、不会闪退和ANR，这些都是稳的体现。</p></li><li><p>何为省？</p><p>省的意思是<strong>空间和数据的节省</strong>。具体体现为<strong>安装包的大小</strong>、安装后使用所<strong>占用的存储空间大小</strong>以及<strong>网络数据</strong>的读取量大小。把这些都给省下来就是省的要义。</p></li></ul><p>基于以上的三点目标，我们其实可以将性能优化简单的分为以下<strong>四类</strong>。</p><ol><li><strong>流畅性优化</strong>，响应快，流畅性高</li><li><strong>资源优化</strong>，最小的负载带来最大的收益</li><li><strong>稳定性优化</strong>，稳定的实现功能，减少不必要的打断</li><li><strong>系统级优化</strong>，充分挖掘系统的资源，让APP在有限的资源内能够有更高的流畅性。(较难，较为底层)</li></ol><p>上述四类优化在此暂不做详细阐述，上述的稳定性优化是等级最高的，上线之前必须排除所有已知的bug，这是众所周知的。而流畅性优化是较为常见的、开发者闷都会去完善的优化。下面我们就来<strong>举一些例子</strong>，看一下我们之前的哪些文章中提到的属于流畅性优化。</p><ul><li><p><strong>隐性的滑动冲突</strong></p><p>在<a href="https://juejin.cn/post/7155499400272281637">与滑动冲突的首次邂逅</a>一文中，我们提到了一个较为隐性的滑动冲突，就是下面左图中的上下滑动突变为左右滑动的问题。而解决之后，在同一方向任意滑动都不会出现滑动突变的问题了，这大大的提高了滑动的流畅性，同时也是实现了交互的稳定性。</p><p><img src="https://pic.lxtlovely.top/blog/SVID_20221017_221642_1.gif" style="zoom:50%;"><img src="https://pic.lxtlovely.top/blog/SVID_20221017_221835_1.gif" style="zoom:50%;"> </p></li><li><p><strong>启动白屏</strong></p><p>我们知道，如果我们未对自己的项目的APP做白屏优化，那么在APP首次启动的时候，都会出现一个短暂的白屏。这是因为APP首次开启主进程，且通过各类初始化的时候，是需要一定的执行事件的，而这个执行时间就显现出来就是白屏效果。</p><p>而一个没有实际画面的白屏，对于用户来说是一种卡顿、不流畅的体现，所以各大厂家会使用 APP 的 Logo 或者是其他动画形式的做一个启动页。将这种启动页代替白屏就可以在感器上减少卡顿感。</p><p>下面展示我做的一个启动页效果，更详细的文章在<a href="https://juejin.cn/post/7134729289278160904">极简抖音中的优化点</a></p><img src="https://pic.lxtlovely.top/blog/Screenshot_20220823_011947_com.qxy.potato.jpg" style="zoom:67%;"></li><li><p><strong>启动速度优化</strong></p><p>上述的启动页是可以让用户减少卡顿感，但这终究是一个视觉上面的欺骗，但是在数据指标上面，我们的启动时间没有真的减少。对于小型APP来说，未优化的时候启动时间不会很长，但是对于大型APP来说，就会有很大的影响了，让用户等一个启动页等超过2s，用户也会觉得卡顿的。</p><p>所以，我们需要做好启动优化。启动优化的点很多，但是总结为一点就是：<strong>减少不必要的初始化</strong>。我们可以对各进程做分类加载，把一些加载异步化等等。</p><p>下面附上我做不同进程区别加载的操作，详细解释依旧在<a href="https://juejin.cn/post/7134729289278160904">极简抖音中的优化点</a>一文中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> context<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> sCurProcessName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> packageName<span class="token punctuation">;</span>    <span class="token comment">/**     * Set the base context for this ContextWrapper.  All calls will then be     * delegated to the base context.  Throws     * IllegalStateException if a base context has already been set.     *     * @param base The new base context for this wrapper.     */</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">attachBaseContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attachBaseContext</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        processName <span class="token operator">=</span> <span class="token function">getCurProcessName</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        packageName <span class="token operator">=</span> <span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isMainProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> processName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMainProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            MMKV<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MMKV<span class="token punctuation">.</span><span class="token function">mmkvWithID</span><span class="token punctuation">(</span><span class="token string">"MyID"</span><span class="token punctuation">,</span> MMKV<span class="token punctuation">.</span>SINGLE_PROCESS_MODE<span class="token punctuation">,</span> <span class="token class-name">GlobalConstant</span><span class="token punctuation">.</span>MMKV_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//载入Dokit监测</span>            <span class="token keyword">new</span> <span class="token class-name">DoKit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">productId</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>value_dokit_pid<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//使用订阅索引，加快编译速度</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndex</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEventBusIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">installDefaultEventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 抖音授权</span>            <span class="token class-name">String</span> clientkey <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>value_client_key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DouYinOpenApiFactory</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DouYinOpenConfig</span><span class="token punctuation">(</span>clientkey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//初始化</span>            <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置UI工具</span>            <span class="token class-name">RxTool</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//网络缓存</span>            <span class="token class-name">RetrofitCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">QbSdk</span><span class="token punctuation">.</span><span class="token function">initX5Environment</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">QbSdk<span class="token punctuation">.</span>PreInitCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCoreInitFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 内核初始化完成，可能为系统内核，也可能为系统内核</span>                <span class="token punctuation">}</span>                <span class="token comment">/**                 * 预初始化结束                 * 由于X5内核体积较大，需要依赖网络动态下发，所以当内核不存在的时候，默认会回调false，此时将会使用系统内核代替                 * @param isX5 是否使用X5内核                 */</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewInitFinished</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isX5<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"是否使用腾讯内核："</span> <span class="token operator">+</span> isX5<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//设置打印开关</span>        <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">setIsLog</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册Activity生命周期</span>        <span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">getActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCurProcessName</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getProcessName</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>多进程预加载</strong></p><p>在Android里面，每打开一个进程就会默认去跑 <code>Application</code> 类，所以如果我们在使用的时候才去开启进程，就会使得页面首次开启的时候较为缓慢。为解决这个问题，我们可以让进程在后台预先开启，这样就能减少我们首次开启多进程功能的启动时间了。</p><p>下面示例是后台启动多进程的代码，详情请参阅<a href="https://juejin.cn/post/7134729289278160904">极简抖音中的优化点</a>一文。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在对应的生命周期启用即可</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startHideService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">PreLoadService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stopHideService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">PreLoadService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stopService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>上述这些都是我们有实现的流畅性优化点，它可以能让我们的APP使用体验更加的极致，同时也是对我们技术的考验。</p><p>相信大家学到这里，会了解到了为何需要性能优化且什么是性能优化了，今天的分享就到此结束，欢迎关注，点赞，大家一起学习！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7123529478558613512">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7134729289278160904">极简抖音中的优化点|青训营笔记 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Android的流畅性优化——归因分析</title>
      <link href="/2022/10/25/qian-tan-android-de-liu-chang-xing-you-hua-gui-yin-fen-xi/"/>
      <url>/2022/10/25/qian-tan-android-de-liu-chang-xing-you-hua-gui-yin-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈Android的流畅性优化——归因分析"><a href="#浅谈Android的流畅性优化——归因分析" class="headerlink" title="浅谈Android的流畅性优化——归因分析"></a>浅谈Android的流畅性优化——归因分析</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第24天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>性能优化系列文章</p><p><a href="https://juejin.cn/post/7156240670615666719">初识性能优化 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7157352645110759437">探析Android中的四类性能优化 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7157709505046773790">浅谈Android的流畅性优化——归因分析 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7158095081726017567">浅谈Android的流畅性优化——案例分享 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解Android运行原理</li><li>了解何为性能优化，以及清楚性能优化的思路</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前文中，我们讲到了何为性能优化，以及详解了性能优化的四大类，如果你还没看过上述的两篇文章，你可以点击这里(<a href="https://juejin.cn/post/7156240670615666719">初识性能优化</a> 、 <a href="https://juejin.cn/post/7157352645110759437">探析Android中的四类性能优化</a>)进行查阅，有了这些理论知识再来看本篇文章会更加的通透。</p><p>本文将简单讲述一下 Android 流畅性问题上面的<strong>耗时成因</strong>，对其进行简单的分析。希望通过本文，你可以学习到更多的可优化问题</p><h2 id="影响流畅性的耗时点"><a href="#影响流畅性的耗时点" class="headerlink" title="影响流畅性的耗时点"></a>影响流畅性的耗时点</h2><p>在 <a href="https://juejin.cn/post/7157352645110759437">探析Android中的四类性能优化</a> 一文中，我们已经了解到流畅性优化中的优化重点就是<strong>让主线程尽量只做交互(Input Event)以及刷新(UI Draw)<strong>，再抽象出来讲就是让</strong>各类影响流畅性的耗时变得更加微小</strong>。</p><p>而使用性能分析工具()总结 Android 中的各类耗时，你会发现<strong>耗时的成因</strong>大致分为以下几点：</p><ul><li><strong>CPU Duration</strong>：循环(错误的循环)，反射，序列化问题，类解析<ul><li>CPU self Duration ：CPU自身的耗时</li><li>Wall Duration：有资源抢占，导致的等待时间</li></ul></li><li><strong>IO Wait</strong>：IO 操作，等待 IO 的结果。没事别在主线程做 IO 操作(数据库其实有做这些优化)</li><li><strong>IPC</strong>：Binder 调用耗时。虽然 Google 做了优化，但是调用任务很多的时候，耗时还是很严重。</li><li><strong>Lock Wait</strong>：主线程等锁，等其他线程或者自我超时唤醒。</li><li><strong>CPU Schedule</strong>：主程序是可执行状态，但是由于主线程被调低或者有大量密集型操作、也会导致主线程获取不到时间片。</li></ul><p>而根据上述的归因，我们知道了具体有哪些操作可被优化，但是并非说把耗时操作都一股脑直接放去子线程后台操作即可。我们对主线程进行优化的时候，也要注意后台线程的优化。</p><p>因为后台线程如果持续的密集的进行操作的时候，你把主线程优化得再好，它也难以调度到 CPU 进行操作，因为后台线程已持续的绑定大核了。当然，是否要注意这些问题，也需要观察我们该时刻运行的是什么，如果运行的是 UI 密集型的操作，例如视频播放，那么我们就需要留给前台更多的 CPU 调度机会；如果不是，那么我们可能就不需要关注后台持续绑定大核的问题了。所以说，<strong>不同运行环境中的耗时成因也是不同的</strong>。</p><p><img src="https://pic.lxtlovely.top/blog/Smoothness%20optimization-put0.png" alt="Smoothness optimization-put0"></p><h2 id="APP启动中的耗时问题"><a href="#APP启动中的耗时问题" class="headerlink" title="APP启动中的耗时问题"></a>APP启动中的耗时问题</h2><p>下面我们引用抖音的<strong>启动耗时(冷启动)案例</strong>来讲解，分析一下其中的耗时点。</p><p>由下图可以知道，其中 45% 的时间在执行CPU高密集型操作；接近 40% 的时间在执行 IO 操作，估计是调度 xml 布局；而 11% 的时间是在 Sleep 等锁状态；且有 4% 的时间在执行CPU调度任务，APP 的启动是很高优先级的，不应该有 CPU 的调度来对其产生影响。</p><p><img src="https://pic.lxtlovely.top/blog/96723ee6-fef2-40d9-aa3f-778c81f3f040.png" alt="96723ee6-fef2-40d9-aa3f-778c81f3f040"></p><p>上述讲述的是冷启动的问题，而我们的启动是分为三种的：冷启动、温启动和热启动。三类启动时以 APP 启动执行的生命周期来区分的。下面引用官网中对这三种启动的说明，我们可以得出他们<strong>启动的时间开销</strong>是这样子的：冷启动 &gt; 温启动 &gt; 热启动。</p><ul><li>冷启动是指<strong>应用从头开始启动</strong>：系统进程在冷启动后才创建应用进程。发生冷启动的情况包括<strong>应用自设备启动后或系统终止应用后首次启动</strong>。这种启动给最大限度地减少启动时间带来了最大的挑战，因为系统和应用要做的工作比在另外两种启动状态中更多。</li><li>温启动包含了在冷启动期间发生的部分操作；同时，它的开销要比热启动高。有许多潜在状态可视为温启动。(不用重新启动应用的进程)例如：<ul><li>用户在退出应用后又重新启动应用。<strong>进程可能已继续运行</strong>，但应用必须通过调用 <code>onCreate()</code> 从头开始重新创建 activity。</li><li>系统将您的应用从内存中逐出，然后用户又重新启动它。进程和 activity 需要重启，但传递到 <code>onCreate()</code> 的<strong>已保存的实例 state bundle 对于完成此任务有一定助益</strong>。</li></ul></li><li>应用的热启动比冷启动简单得多，开销也更低。在热启动中，系统的所有工作就是<strong>将您的 activity 带到前台</strong>。只要应用的所有 activity 仍驻留在内存中，应用就不必重复执行对象初始化、布局膨胀和呈现。</li></ul><p><img src="https://pic.lxtlovely.top/blog/20221024113542.png"></p><p>从上述的<strong>三类启动中提取耗时点</strong>如下</p><ul><li><strong>Cold Start</strong>(需要 Time &lt; 3s)<ul><li>Create process：冷启动的最根本点，是应用的进程未被创建，所以它有一个很耗时的点就是应用进程的创建。</li><li>ContentProvider init：由于有这个 <code>ContentProvider</code> 注册逻辑，所以很多第三方 SDK 集成进去的时候，都可以达到自动初始化的目的。但是这些不同的 SDK 其自身很多的逻辑也会导致启动有了很大的负载。Google 的解决方案是使用 Jetpack 的 <strong><a href="http://events.jianshu.io/p/c37d3c48968c">App Startup</a></strong>  组件进行统一的启动序列的管理，进行 ContentProvider 的串写化。</li><li>Application#onCreate()：注册全局性的逻辑</li></ul></li><li><strong>Warm Start</strong>(需要 Time &lt; 1s)<ul><li>Activity#onCreate()：进程已存在，Activity 被销毁后再次启动</li><li>Inflate view hierarchy：View 的加载耗时</li></ul></li><li><strong>Hot Start</strong>(需要瞬间打开)<ul><li>Activity#onStart()：切换到后台再次打开的场景</li></ul></li></ul><h2 id="渲染中的耗时问题"><a href="#渲染中的耗时问题" class="headerlink" title="渲染中的耗时问题"></a>渲染中的耗时问题</h2><p>由<a href="https://juejin.cn/post/7125824443598766116">前文</a>中，我们知道大致的 UI 渲染流程如下，经过对其整理，大致得出右侧渲染耗时的具体点。</p><p><code>inflater</code>：这是展示布局的第一步，把布局从 xml 中取出</p><p><code>init</code>：在布局中初始化哪些数据</p><p><code>bind</code>：布局和页面的绑定</p><p><code>M/L/C</code>：三大绘制方法，也有很多耗时逻辑</p><p><code>overdraw</code>：多层级绘制，层级越深，需要执行的命令也越多，负载也会越重。</p><p>而对于渲染频率，有以下的点</p><p><code>Animator FPS</code>：很多时候动图帧率是较为低的，我们依旧是使用默认的 60 帧来绘制，也是导致了不必要的负载。</p><p><code>VSync Leak</code>：VSync 泄露是指前一个页面的绘制逻辑未结束，下一个页面的绘制逻辑就继续了，就会出现不必要的问题。</p><p><code>requestLayout Loop</code>：在 <code>requestLayout</code> 里面再次调用 <code>requestLayout</code>，导致绘制请求的循环。</p><p><img src="https://pic.lxtlovely.top/blog/Smoothness%20optimization-put1.png" alt="Smoothness optimization-put1"></p><p>而对于耗时问题，我们对其的优化不应该只是串型的，同时要注意并行的问题。例如下图，在 doFrame 回调流程中，其需要调用的一些任务还在非 UI 线程中执行，这个时候形成了资源的竞争，其阻塞也会导致其时间相应的变长。那么使用其他线程来执行就没有太大意义了。我们在优化的时候，也就需要使得其并行效率也是最高的。</p><p><img src="https://pic.lxtlovely.top/blog/20221024131319.png"></p><h2 id="简单的耗时分析"><a href="#简单的耗时分析" class="headerlink" title="简单的耗时分析"></a>简单的耗时分析</h2><p>一个布局从 xml 到成为一个 View 对象有以下耗时点</p><ul><li>IO：把 XML 布局加载进来的时候，就会涉及到 IO 操作</li><li>类反射：XML 中的各种布局嵌套关系，由类反射来执行操作</li><li>View 初始化：拿到 View 布局之后，还会需要初始化其中的初始数据</li><li>AssertManager资源锁：View 中还涉及到 Assert 的资源锁</li></ul><p><img src="https://pic.lxtlovely.top/blog/20221024132843.png"></p><p>本文的归因分析到此结束，下一篇文章，我们会简单的讲一下一些案例的分析和处理方法。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/topic/performance/tracing?hl=zh-cn">系统跟踪概览  | Android 开发者  | Android Developers</a></p><p><a href="https://developer.android.com/topic/performance/vitals/launch-time">应用启动时间  | Android 开发者  | Android Developers</a></p><p><a href="http://events.jianshu.io/p/c37d3c48968c">Jetpack StartUp详解 - 简书 (jianshu.io)</a></p><p><a href="https://developer.android.google.cn/topic/libraries/app-startup">App Startup  | Android Developers (google.cn)</a></p><p><a href="https://juejin.cn/post/7123529478558613512">【Android 客户端专场 学习资料三】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7125824443598766116">View体系(下)|青训营笔记 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 性能 </tag>
            
            <tag> 流畅性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你踏入Kotlin大门(六)|基本功_接口和特殊类篇</title>
      <link href="/2022/10/24/dai-ni-ta-ru-kotlin-da-men-liu/"/>
      <url>/2022/10/24/dai-ni-ta-ru-kotlin-da-men-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="带你踏入Kotlin大门-六-基本功-接口和特殊类篇"><a href="#带你踏入Kotlin大门-六-基本功-接口和特殊类篇" class="headerlink" title="带你踏入Kotlin大门(六)|基本功_接口和特殊类篇"></a>带你踏入Kotlin大门(六)|基本功_接口和特殊类篇</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第19天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><a href="https://juejin.cn/post/7151258942746656781">带你踏入Kotlin大门(一)|kotlin初识 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7151791231884853262">带你踏入kotlin大门(二)|基本功_变量篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152159139823616036">带你踏入kotlin大门(三)|基本功_函数篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154384691808698376">带你踏入kotlin大门(四)|基本功_逻辑控制篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154757492621180936">带你踏入kotlin大门(五)|基本功_类和继承篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7155124227958538253/">带你踏入Kotlin大门(六)|基本功_接口和特殊类篇 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>已学习 <code>Kotlin</code> 变量、函数和类的知识</li><li>有 <code>Java</code> 编程基础</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是我们 Kotlin 基础章系列的最后一文了，前面我们利用了5篇文章讲解了 <code>Java</code> 开发者如何学好 <code>Kotlin</code> 的基本用法，每篇文章的篇幅都不长，可以在空余时间快速阅读，笔者希望学习完前五篇，再来学习这最后一篇文章，会更加的容易理解。</p><p>没有阅读前文也没关系，这一篇文章内容不会很难，我们可以很快的理解和学习。本篇将带大家学习 <code>Kotlin</code> 中的接口，以及如何使用接口实现解耦和接口隔离，还会学习一些 Kotlin 中独有的一些类。</p><h2 id="Kotlin的接口"><a href="#Kotlin的接口" class="headerlink" title="Kotlin的接口"></a>Kotlin的接口</h2><p>在 <code>Java</code> 中，我们会经常使用到<a href="https://juejin.cn/post/7150670423632379941">接口</a>，利用接口做一些抽象、解耦和规范等等。所以说，接口之于 Java，就如同关羽之于刘备一般，那么 <code>Kotlin</code> 含有接口这一特性的必要性也就不言而喻了。</p><p>首先，我们来看一下 Java 中的接口代码。(<a href="https://juejin.cn/post/7148822224533717028">代码复用处</a>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyAbility</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面，我们将这段代码转化为 <code>Kotlin</code> 代码。可以看出，接口的定义和 <code>Java</code> 基本是一致的，只是实现的<strong>关键字</strong>稍有不同，<code>Kotlin</code> 的实现关键字和继承是一样的，都是使用的<strong>冒号 ：</strong>。还有一点不同的就是重写的注解，可以实现同行首位标明。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Flyable <span class="token punctuation">{</span>  <span class="token keyword">fun</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> FlyAbility<span class="token operator">:</span> Flyable<span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是接口的简单使用，下面我们可以使用其来实现<strong>多态和多重继承</strong></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>下面的 <code>action</code> 方法中，其参数声明的是接口类型，也理解为抽象类型；传入不同的实现该接口的实现类，即为实现了多态。这里的实现理念和 Java 中的多态也是一样的，我们只是做了一些不同语言语法的变更。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> flyAbility <span class="token operator">=</span> <span class="token function">FlyAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">action</span><span class="token punctuation">(</span>flyAbility<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">action</span><span class="token punctuation">(</span>flyable<span class="token operator">:</span> Flyable<span class="token punctuation">)</span><span class="token punctuation">{</span>    flyable<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>我们所说的多重继承，是指优雅的实现多重继承。依旧是使用设计模式专栏里面的例子和代码，在此用 <code>Kotlin</code> 复现一次。</p><p>实现的方式是：组合+接口+委托。</p><p>如下方代码，使用这种方式，就可以利用组合和接口，完成各特性组合简单快捷且<strong>解耦</strong>的实现新类的特性了。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> flyAbility <span class="token operator">=</span> <span class="token function">FlyAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">action</span><span class="token punctuation">(</span>flyAbility<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">action</span><span class="token punctuation">(</span>flyable<span class="token operator">:</span> Flyable<span class="token punctuation">)</span><span class="token punctuation">{</span>    flyable<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//省略Tweetable/TweetAbility/EggLayable/EggLayAbility</span><span class="token keyword">class</span> Ostrich<span class="token operator">:</span> Tweetable<span class="token punctuation">,</span> EggLayable <span class="token punctuation">{</span><span class="token comment">//鸵鸟</span>  <span class="token keyword">val</span> tweetAbility <span class="token operator">=</span> <span class="token function">TweetAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组合</span>  <span class="token keyword">val</span> eggLayAbility <span class="token operator">=</span> <span class="token function">EggLayAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组合</span>  <span class="token comment">//... 省略其他属性和方法...</span>  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">tweet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tweetAbility<span class="token punctuation">.</span><span class="token function">tweet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托</span>  <span class="token punctuation">}</span>  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">layEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eggLayAbility<span class="token punctuation">.</span><span class="token function">layEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于接口的知识，我们还有一点需要注意的就是，<code>Kotlin</code> 的接口和 JDK1.8 之后的 <code>Java</code> 一样，可以实现在接口的抽象函数中，加入默认实现了。他们的使用是一样的，这里不再做过多赘述。</p><h2 id="特殊类"><a href="#特殊类" class="headerlink" title="特殊类"></a>特殊类</h2><p>Kotlin 中的特殊类其实是基于多年的 Java 业务经验衍生出来的。他把 <code>Java</code> 中最经常使用到的两种类进行默认实现，然后提供简单的使用给我们，帮助我们减少了很多的模板代码。这两种类就是 <strong>数据类和单例类</strong> 。</p><h3 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h3><p>以往在 Java 中我们创建一个数据类，会借用一些插件，帮助我们编写 <code>getter</code> 和 <code>setter</code> 代码，还有实现 <code>equals()</code>、<code>hashCode()</code> 、<code>toString()</code>这些代码。很多时候，我们的这些业务都是模板型的，不会有很多变化的。那么这些工作就会显得很多余，<code>Kotlin</code> 作为一门新的语言，对这个问题进行了解决，出现了数据类。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/* Java 实现* private String cityName;    private String cityId;    private String cnty;    private String location;    private String parentCity;    private String adminArea;    private boolean isFavor;** */</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">CityBean</span><span class="token punctuation">(</span>    <span class="token keyword">var</span> cityName<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token keyword">var</span> cityId<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token keyword">var</span> cnty<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> location<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> parentCity<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token keyword">var</span> adminArea<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> isFavor<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的数据类中，已默认实现了上文提到的三个方法，直接使用即可。</p><h3 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h3><p>单例模式是我们在开发中最常使用到的模式，而 <code>Kotlin</code> 有单例类这种特殊类，可以直接帮助我们实现单例模式。下面我们来看一下 <code>Java</code> 的实现和 <code>Kotlin</code> 中使用单例类的实现有何不同。</p><p><code>Java</code> 实现(<strong>安全的懒汉模式</strong>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLazy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleLazy</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingleLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingleLazy</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述 Java 的实现，有接近10行代码，且是需要思考得出的。我们接下来看一下 <code>Kotlin</code> 中的实现。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//普通实现</span><span class="token keyword">class</span> SingleLazy <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//...</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token annotation builtin">@get:Synchronized</span>        <span class="token keyword">var</span> instance<span class="token operator">:</span> SingleLazy<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>field <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    field <span class="token operator">=</span> <span class="token function">SingleLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> field            <span class="token punctuation">}</span>            <span class="token keyword">private</span> <span class="token keyword">set</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//单例类</span><span class="token keyword">object</span> SingleLazy <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上述的代码可以看到，我们只需要创建的时候，选择 <code>object</code> 类型即为创建单例类，只需短短几行代码即可实现单例模式。</p><p>那么它如何调用呢？调用方法类似于静态方法的调用，但事实上是 Kotlin 自动在全局创建了一个唯一的实例</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">SingleLazy<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此，这个 <code>Kotlin</code> 基础系列就已经全部讲完了。希望大家有所收获！</p><p>后面还会出 Kotlin 进阶系列哦！如果觉得有用的话，欢迎点赞和收藏♥ </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7148822224533717028">继承和组合如何选择|设计模式基础 - 掘金 (juejin.cn)</a></p><p>《第一行代码》(第三版)</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你踏入kotlin大门(五)|基本功_类和继承篇</title>
      <link href="/2022/10/23/dai-ni-ta-ru-kotlin-da-men-wu/"/>
      <url>/2022/10/23/dai-ni-ta-ru-kotlin-da-men-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="带你踏入kotlin大门-五-基本功-类和继承篇"><a href="#带你踏入kotlin大门-五-基本功-类和继承篇" class="headerlink" title="带你踏入kotlin大门(五)|基本功_类和继承篇"></a>带你踏入kotlin大门(五)|基本功_类和继承篇</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第18天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><a href="https://juejin.cn/post/7151258942746656781">带你踏入Kotlin大门(一)|kotlin初识 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7151791231884853262">带你踏入kotlin大门(二)|基本功_变量篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152159139823616036">带你踏入kotlin大门(三)|基本功_函数篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154384691808698376">带你踏入kotlin大门(四)|基本功_逻辑控制篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154757492621180936">带你踏入kotlin大门(五)|基本功_类和继承篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7155124227958538253/">带你踏入Kotlin大门(六)|基本功_接口和特殊类篇 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>已学习 Kotlin 变量、函数知识</li><li>有 <code>Java</code> 编程基础</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇作为 <code>Kotlin</code> 基本功的倒数第二篇，将为大家带来关于 <code>Kotlin</code> 中类和继承的知识。如果你看到这篇文章的时候，还未听说过 Kotlin 或者从未学习过 Kotlin ，你可以<a href="https://juejin.cn/post/7151258942746656781">点击链接</a>从本系列的第一篇文章开始学习。在本系列前面的文章中，我们学习到了关于 Kotlin 的函数、变量还有逻辑控制的知识；而当你学完本篇后，你掌握了 Kotlin 中类和继承的知识，你就是学会了 Kotlin 中大部分的知识了。</p><p>话不多说，赶紧学起来吧！</p><h2 id="Kotlin的OOP-VS-Java的OOP"><a href="#Kotlin的OOP-VS-Java的OOP" class="headerlink" title="Kotlin的OOP VS Java的OOP"></a>Kotlin的OOP VS Java的OOP</h2><p>OOP 就是面向对象的缩写。在 Java 中，其三大特性分别是 <strong>封装、继承和多态</strong>。如果不太记得三大特性是什么了，可以查看我的另一个专栏——设计模式专栏的<a href="https://juejin.cn/post/7142868931466756132">文章</a>，里面有简单的总结了三大特性。那么在 Kotlin 中的面向对象和 java 的面向对象有什么区别呢？我在这里言简意赅的回答你，<strong>特性和理论是一样的，但使用方法不一样</strong>。那么，使用方法上有何不同呢？下面听我细细道来，我们简单的创建一个类和继承对应的类，用这个实战的过程带你学明白 Kotlin 的类。</p><p>ps：封装在<a href="https://juejin.cn/post/7152159139823616036">前文</a>已做讲解。</p><h2 id="Kotlin-类和普通创建"><a href="#Kotlin-类和普通创建" class="headerlink" title="Kotlin 类和普通创建"></a>Kotlin 类和普通创建</h2><p>要了解一个东西，我们需先窥其全貌。所以，我们可先看一下在 Kotlin 中类是长什么样子的。</p><p><img src="https://pic.lxtlovely.top/blog/20221015214337.png"></p><p>从上述的截图中，我们可以看到，Kotlin 的类可以直接以 <code>class</code> 来声明，这点和 <code>java</code> 是一致的。但是上述的代码也有很多不一样的地方，譬如类后面和函数一样<strong>带有括号</strong>，且还有<strong>冒号</strong>用于继承等等这些我们 Java 开发者看来十分陌生的东西。</p><p>但我们对此不必害怕，我们学习完本文之后再来重新阅读就会一目了然了。</p><h3 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h3><p>我们尝试自己创建一个 Kotlin 的类。创建步骤和创建 Java 类一样，只是最后选择 Koltin 文件即可。下面我们立刻来实战一下，从实战中学习。</p><p>第一步，我们定义一个空的类 <code>ViewTest</code> 。可以是如下这样子的。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ViewTest<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二部，我们向类里面添加属性和方法。最后去主函数中初始化这个类和调用其中的函数，这样子就是简单的创建和使用一个类了。这和 Java 没太大不同的。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ViewTest<span class="token punctuation">{</span>    <span class="token keyword">val</span> string1 <span class="token operator">=</span> <span class="token string">"s1"</span>    <span class="token keyword">val</span> string2 <span class="token operator">=</span> <span class="token string">"s2"</span>    <span class="token keyword">fun</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>string1 <span class="token operator">+</span> string2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">val</span> v <span class="token operator">=</span> <span class="token function">ViewTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是上面的代码中，类的初始化和 Java 中有些不一样，你会发现这里无需在初始化的时候加 <code>new</code> 关键字，而其他都是一样的。下面附上代码的运行结果。</p><p><img src="https://pic.lxtlovely.top/blog/20221015215645.png"></p><h2 id="Kotlin-中的继承"><a href="#Kotlin-中的继承" class="headerlink" title="Kotlin 中的继承"></a>Kotlin 中的继承</h2><p>下面我们继续学习它的继承特性。</p><p>在 <code>Java</code> 中，默认所有类都是可以被继承的，但是 <code>Kotlin</code> 中不一样，<code>Kotlin</code> 的设计遵循 <a href="https://juejin.cn/post/7148822224533717028">多用组合少用继承</a> 的思想，<strong>默认类不可被继承</strong>。</p><p>如果类需要被继承，那么我们就需要在 <code>class</code> 前加一个 <code>open</code> 关键字。例如，我们想要使得上面的 <code>ViewTest</code> 类可以被继承，那么我们需要做如下修改。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> ViewTest<span class="token punctuation">{</span>    <span class="token keyword">val</span> string1 <span class="token operator">=</span> <span class="token string">"s1"</span>    <span class="token keyword">val</span> string2 <span class="token operator">=</span> <span class="token string">"s2"</span>    <span class="token keyword">fun</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>string1 <span class="token operator">+</span> string2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子， <code>ViewTest</code> 类就可以被继承了。说明一下，<code>Kotlin</code> 中继承使用的关键字是<strong>：</strong>。其次，我们创建一个子类继承这个 <code>ViewTest</code> 父类。然后运行这段代码。</p><p>你会惊奇的发现，程序运行出错啦!这是怎么回事呢？</p><p><img src="https://pic.lxtlovely.top/blog/20221015221950.png"></p><p>上述的代码出现了一行红色的错误信息，这句错误信息翻译过来是：此类型具有构造函数，因此必须在此处初始化。</p><p>这时候，我们会懵圈了，构造函数？默认构造函数不是为空的吗？此处没有新添加构造函数，那么就默认调用父类空的构造函数才对呀！</p><p>确实，在 <code>Java</code> 中我们的确可以这样子理解，但是在 <code>Kotlin</code> 中，却并非如此。<code>Kotlin</code> 中的构造函数和 <code>Java</code> 的有很大的不同。</p><p>接下来我们继续学习 <code>Kotlin</code> 的构造函数，顺便解决这个bug。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>在 <code>Kotlin</code> 中，构造函数分为 <strong>主构造函数</strong> 和 <strong>次构造函数</strong>，而一般情况下我们只需要使用到 <strong>主构造函数</strong>。</p><h4 id="主构造函数"><a href="#主构造函数" class="headerlink" title="主构造函数"></a>主构造函数</h4><p><code>Kotlin</code> 的主构造函数也默认的是一个无参的函数，所以在首次执行 <code>val v = ViewTest()</code> 的时候是成功可行的。</p><p>而在 <code>Kotlin</code> 中，子类继承父类的时候，和 Java 一样是需要调用父类的构造函数的，但是 <code>Kotlin</code> <strong>不会帮助你调用默认的主构造函数</strong>，如果你需要使用<strong>主构造函数</strong>，就需要手动的去声明继承父类的构造函数。</p><p>在上面子类的代码中，我们只是使用冒号：继承了 <code>ViewTest()</code> 这个类，却<strong>并未声明我们的类需要初始化父类的主构造函数是怎么样的</strong>。至于为何一定要声明，那是因为父类的<strong>主构造器参数可以是多样性的</strong>，不做声明就无法确定调用的父类主构造函数是怎么样的，不知道它有几个参数。所以我们直接在 <code>ViewTes</code>t 后加上()，声明我们调用的父类的构造器是默认的，未改造的，就不会出错了。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ViewSon <span class="token operator">:</span> <span class="token function">ViewTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.lxtlovely.top/blog/20221015224321.png"></p><p>通过上面的结果图，我们可知这个bug解决了。</p><p>那么，主构造器可以<strong>如何多样化</strong>呢，这时候，我们就对其父类（）内的参数进行扩增，就可以实现其多样化了。</p><p>将参数放到括号内，就是实现了构造函数属性初始化。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">ViewTest</span><span class="token punctuation">(</span><span class="token keyword">val</span> string1<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> string2<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>string1 <span class="token operator">+</span> string2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们继续使用子类继承它。下方代码中，只有独属于本类的，才可以用 <code>val</code> 和 <code>var</code> 关键字来修饰，属于父类的不做修饰。而声明父类的主构造器的时候，直接传入参数名即可。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">ViewSon</span><span class="token punctuation">(</span><span class="token keyword">val</span> s0<span class="token operator">:</span> String<span class="token punctuation">,</span> s1<span class="token operator">:</span> String<span class="token punctuation">,</span> s2<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewTest</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后，我们来运行一下查看结果。</p><p><img src="https://pic.lxtlovely.top/blog/20221015230108.png"></p><p>主构造函数就学到这里了。下面我们继续看次构造器。</p><h4 id="次构造器"><a href="#次构造器" class="headerlink" title="次构造器"></a>次构造器</h4><p>次构造器可以对主构造器做一个拓展，就像 Java 中，我们有多个构造器那样子。</p><p>此处直接上代码。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">ViewSon</span><span class="token punctuation">(</span><span class="token keyword">val</span> s0<span class="token operator">:</span> String<span class="token punctuation">,</span> s1<span class="token operator">:</span> String<span class="token punctuation">,</span> s2<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewTest</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>s1<span class="token operator">:</span> String<span class="token punctuation">,</span> s2<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"S0"</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>s1<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token string">"s2"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中的次构造器，使用的是 <code>constructor</code> 关键字+ <code>this</code> 关键字来层层调用来实现多个构造函数。我们可以运行一下查看效果。</p><p><img src="https://pic.lxtlovely.top/blog/20221015230907.png"></p><p>有一个知识点需要说明，那就是 <strong>只有次构造器的情况是存在的</strong>，但不常见，我们也可以使用这个特点来解决前文的bug。用子类的次构造器声明使用父类哪个构造器。在这种情况下，我们就需要使用 <code>super</code> 关键字来解决声明父类构造器了。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ViewSon <span class="token operator">:</span> ViewTest<span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.lxtlovely.top/blog/20221015224848.png"></p><p>今天学习的就到这里了，加油！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><p><a href="https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS43LjEwIiwicGxhdGZvcm0iOiJqYXZhIiwiYXJncyI6IiIsIm5vbmVNYXJrZXJzIjp0cnVlLCJ0aGVtZSI6ImlkZWEiLCJjb2RlIjoiZnVuIG1haW4oKSB7XG5cdHZhbCB2ID0gVmlld1NvbigpXG4gICAgdi5wcmludCgpXG4gICAgXG59XG5cbm9wZW4gY2xhc3MgVmlld1Rlc3R7XG4gICAgdmFsIHN0cmluZzEgPSBcInMxXCJcbiAgICB2YWwgc3RyaW5nMiA9IFwiczJcIlxuICAgIGZ1biBwcmludCgpe1xuICAgICAgICBwcmludGxuKHN0cmluZzEgKyBzdHJpbmcyKVxuICAgIH1cbn1cblxuY2xhc3MgVmlld1NvbiA6IFZpZXdUZXN0e1xuICAgIFxufSJ9">Kotlin Playground: Edit, Run, Share Kotlin Code Online (kotlinlang.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你踏入kotlin大门(三)|基本功_函数篇</title>
      <link href="/2022/10/18/dai-ni-ta-ru-kotlin-da-men-san/"/>
      <url>/2022/10/18/dai-ni-ta-ru-kotlin-da-men-san/</url>
      
        <content type="html"><![CDATA[<h1 id="带你踏入kotlin大门-三-基本功-函数篇"><a href="#带你踏入kotlin大门-三-基本功-函数篇" class="headerlink" title="带你踏入kotlin大门(三)|基本功_函数篇"></a>带你踏入kotlin大门(三)|基本功_函数篇</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第11天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><a href="https://juejin.cn/post/7151258942746656781">带你踏入Kotlin大门(一)|kotlin初识 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7151791231884853262">带你踏入kotlin大门(二)|基本功_变量篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152159139823616036">带你踏入kotlin大门(三)|基本功_函数篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154384691808698376">带你踏入kotlin大门(四)|基本功_逻辑控制篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154757492621180936">带你踏入kotlin大门(五)|基本功_类和继承篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7155124227958538253/">带你踏入Kotlin大门(六)|基本功_接口和特殊类篇 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>已学习 Kotlin 变量知识</li><li>有 <code>Java</code> 编程基础</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://juejin.cn/post/7151791231884853262">上一篇文章</a> 我们讲述了 <code>kotlin</code> 中变量与 Java 中的变量的不同，同时也简单说明 <code>kotlin</code> 中的类型推导机制、<code>val</code> 修饰的变量是 <strong>引用不可变而非对象不可变</strong> 以及我们需要<strong>优先使用 <code>val</code></strong> 这些知识。</p><p>本文给讲述 <code>kotlin</code> 中的 <strong>头等公民</strong> ，<strong>函数</strong>。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="kotlin-中的函数与-Java-中的不同"><a href="#kotlin-中的函数与-Java-中的不同" class="headerlink" title="kotlin 中的函数与 Java 中的不同"></a>kotlin 中的函数与 Java 中的不同</h3><p>在本系列开篇文章中有提到，kotlin 在兼顾 Java 规范的同时，又做了很多拓展；其中，最重要的拓展就是：<strong>kotlin 是支持部分函数式特性的</strong>。</p><blockquote><p>函数式编程具有五个鲜明的特点。</p><p>1、函数是”第一等公民”<br>所谓”第一等公民”（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p><p>2、只用”表达式”，不用”语句”<br>“表达式”（expression）是一个单纯的运算过程，总是有返回值；”语句”（statement）是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。</p><p>3、没有”副作用”<br>所谓”副作用”（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。</p><p>4、不修改状态<br>上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。</p><p>5、引用透明性<br>函数程序通常还加强引用透明性，即如果提供同样的输入，那么函数总是返回同样的结果。就是说，表达式的值不依赖于可以改变值的全局状态。</p><p><a href="https://zhidao.baidu.com/question/1646386100816291620.html">函数式编程的特点</a></p></blockquote><p>kotlin 中函数式的特性在接下来的学习中，我们会逐步学习到。下面我们先来看一下，在 kotlin 中使用函数与 Java 有何不同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Java</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numsAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面 Java 中的函数形式大家都很熟悉了，<strong>那么在 kotlin 中，这段函数该如何写呢？</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin</span><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">numsAdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int <span class="token punctuation">,</span>y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述的 kotlin 代码，是将 java 代码按照原来的逻辑，一点都不变的翻译而来的。但事实上，这却并不符合 kotlin 的代码特性。我们先对这段代码进行解释，后面再将其修改为符合 kotlin 特性的代码。</p><p>kotlin 中的函数有以下<strong>几个基本特性</strong></p><ol><li><code>fun</code> 是 <strong>function</strong> 的意思，代表这是一个功能，意思是这是一个方法，一个函数。在 kotlin 中，每一个 <strong>方法</strong> 都要使用 <code>fun</code> 来修饰。</li><li>方法中返回值的声明，和前文类型声明一样，采用 <code>&lt;name&gt;:&lt;object&gt;</code> 形式，在参数括号后用：接上类型即可。若无函数类型声明，则返回 Unit 类型，效果与 Java 中的 void 函数一样。</li><li>参数声明也是使用  <code>&lt;name&gt;:&lt;object&gt;</code>  的形式；若无参数，使用空括号即可。</li></ol><p>事实上，若按照逻辑从 Java 中翻译过来，<strong>上一段代码中的 <code>public</code> 应该删除</strong>。这是为什么呢？</p><p>因为 Java 中的可见性修饰符 public ，在 Kotlin 中是不必声明的，因为 <strong>kotlin 中默认修饰符就是 public</strong>，所以我们可以将上述代码更改为如下。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin</span><span class="token keyword">fun</span> <span class="token function">numsAdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int <span class="token punctuation">,</span>y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时，这里附上修饰符<strong>对比表格</strong>供大家参考。</p><table><thead><tr><th>修饰符</th><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td>public</td><td>所有类可见</td><td>所有类可见<strong>（默认）</strong></td></tr><tr><td>private</td><td>当前类可见</td><td>当前类可见</td></tr><tr><td>protected</td><td>当前类、子类、同一包路径下的类可见</td><td>当前类、子类可见</td></tr><tr><td>default</td><td>同一包路径下的类可见<strong>（默认）</strong></td><td>无</td></tr><tr><td>internal</td><td>无</td><td>同一模块中的类可见</td></tr></tbody></table><p>前面我们还说到，kotlin 是支持函数式的，那如何把这段代码 <strong>函数式</strong> 化呢？我们可以使用一个 <strong>=</strong> 来代替代码块函数体以及返回值，这种单行的表达称之为 <strong>表达式函数体</strong> </p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//函数化</span><span class="token keyword">fun</span> <span class="token function">numsAdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int <span class="token punctuation">,</span>y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> x<span class="token operator">+</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时，基于 Kotlin 的类型推导机制，我们可以把函数返回值的类型声明去掉，更改为如下形式</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//函数化+类型推导</span><span class="token keyword">fun</span> <span class="token function">numsAdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int <span class="token punctuation">,</span>y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token operator">+</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述代码该到这里，就是妥妥的 Kotlin 风格的代码了。我们前后对照，是不是代码量比Java要少得多呢，但是其魅力远不止于此，我们继续探索学习吧！</p><h3 id="Kotlin-中函数的类型推导不是全局的"><a href="#Kotlin-中函数的类型推导不是全局的" class="headerlink" title="Kotlin 中函数的类型推导不是全局的"></a>Kotlin 中函数的类型推导不是全局的</h3><p>上述的 Kotlin 代码中，我们最后一步更改是利用了 Kotlin 的类型推导功能，但是我在这里要告诉你的是，<strong>Kotlin 的类型推导不是全局的</strong>。</p><p>这是什么意思呢？何为不是全局的？我们用上述代码举一个例子，相信你很快就能明白。假设 Kotlin 的类型推导是全局的，那么当我们没将代码函数法，且我们想利用它的 <strong>类型推导特性</strong> 的时候，我们自然而然会写出如下的代码。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//假设支持全局类型推导</span><span class="token keyword">fun</span> <span class="token function">numsAdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int <span class="token punctuation">,</span>y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但事与愿违，上述代码报错了。原因是类型缺失，意思是我们需要加上函数返回值的类型。可见，<strong>Kotlin 的类型推导并非那么智能，它的类型推导不是全局的</strong>。</p><p><img src="https://pic.lxtlovely.top/blog/20221008214311.png"></p><p>那么，是不是只要我们使用到 函数表达式 ，Kotlin 就一定能进行类型推导了呢？非也，我们可以看下面的这段代码。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//未作声明，会报错</span><span class="token keyword">fun</span> <span class="token function">recursion</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token function">recursion</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://pic.lxtlovely.top/blog/20221008215539.png"></p><p>这段代码依旧报错，<strong>因为递归的存在，它还是无法推导出函数的返回值类型</strong>。这是由于 Kotlin 继承和支持子类型的特性，导致类型推导不够聪明。</p><p>所以，<strong>遇到这些情况，我们做以下显式的类型声明就好了</strong>。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//做显式声明，代码成功</span><span class="token keyword">fun</span> <span class="token function">recursion</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token function">recursion</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么，<strong>关于类型声明，我们该如何选择是否显式声明呢？</strong></p><blockquote><ul><li><p>如果它是一个函数的参数？</p><p>必须使用</p></li><li><p>如果它是一个非表达式定义的函数？</p><p>除了返回 Unit，其他情况必须使用</p></li><li><p>如果它是一个递归函数？</p><p>必须使用</p></li><li><p>如果它是一个公有方法，且具有返回值？</p><p>建议使用，可提高代码可阅读性以及稳定性</p></li></ul></blockquote><h3 id="Lambda语法"><a href="#Lambda语法" class="headerlink" title="Lambda语法"></a>Lambda语法</h3><p>Lambda语法，事实上在 Java 中已经出现了，当我们使用 JDK 1.8 以上，就可以在 Java 中使用了。</p><p>由于Kotlin 中的 lambda 语法使用起来是有很多技巧，且具有很多高级用法以及知识，所以在这里就只做和 Java 中 lambda 的一些简单区别展示。</p><p>首先我们看一下 ，lambda 是什么？</p><blockquote><p>接下来谈众所周知的 Lambda 表达式。它是推动 Java 8 发布的最重要新特性。是继泛型(<code>Generics</code>)和注解(<code>Annotation</code>)以来最大的变化。</p><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。让 java 也能支持简单的<em>函数式编程</em>。</p><p><strong>Lambda 表达式是一个匿名函数</strong>（初步这么理解就可，实际上是不一样的），java 8 允许把函数作为参数传递进方法中。</p></blockquote><p>在 Java 中，能够使用 <strong>函数式API/lambda</strong> 的条件是，对应要表达的匿名内部类，这一个类是 <strong>单抽象方法接口</strong> 。意思是，这个类是接口，且接口里面只有一个抽象方法。</p><p>我们以常用的 <code>button</code> 设置点击的监听方法为例，看一下 Java 中的 lambda 实现。其中，把参数简写为 v ，并使用 -&gt; 指向函数体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//包含匿名内部类</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>homeTextViewFollower<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名内部类变为lambda形式</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>homeTextViewFollower<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.lxtlovely.top/blog/20221008223836.png"></p><p>同时，我们可以看到，该内部类就是 <strong>单抽象方法接口</strong>。</p><p>以上面代码为例，Kotlin 中使用 <code>lambda</code> 即为如下形式。由于参数只有一个，我们可以把其直接简写删除，且外层直接用 {} 表示，表明此处为 lambda 表达式。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>homeTextViewFollower<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于 lambda 表达式，先讲到这，后续更多的内容在后续文章中会逐步讲明。</p><h3 id="如何传入函数作为参数"><a href="#如何传入函数作为参数" class="headerlink" title="如何传入函数作为参数"></a>如何传入函数作为参数</h3><p>Kotlin 函数式的一大特点，就是支持在函数内写函数，或者是给函数传递函数，让函数成为第一等公民。</p><p>由于时间和篇幅原因，此处暂时不讲如何设置函数的参数可传入函数，只讲如何传入函数。关于如何设置函数参数可传入参数，我们后续讲到函数的高级应用时再说。下面的代码，可以实现<strong>向函数的参数中传入bind函数</strong>。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> binding <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span>RecyclerviewItemRankBinding<span class="token operator">::</span>bind<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们传入函数，用的是 :: 这个符号，其表示将 <code>RecyclerviewItemRankBinding</code> 这个类中的 <code>bind</code> 函数传入，可以很好的实现复用和传递。</p><p><img src="https://pic.lxtlovely.top/blog/20221009145443.png"></p><p>同时，我们可以看一下 <strong>getBinding</strong> 这个函数的参数设计，但这里暂不做对应更多的解释。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token operator">&lt;</span>VB <span class="token operator">:</span> ViewBinding<span class="token operator">&gt;</span> BaseViewHolder<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span>bind<span class="token operator">:</span> <span class="token punctuation">(</span>View<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> VB<span class="token punctuation">)</span><span class="token operator">:</span> VB <span class="token operator">=</span>  itemView<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>Int<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> VB <span class="token operator">?:</span> <span class="token function">bind</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> itemView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>Int<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>上述参考代码来自 <a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper">CymChad/BaseRecyclerViewAdapterHelper: BRVAH:Powerful and flexible RecyclerAdapter (github.com)</a></p></blockquote><p>好了，今天分享的内容就是这些了，大家开工大吉哈！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://javaguide.cn/java/new-features/java8-common-new-features.html#lambda-%E5%AE%9E%E6%88%98">Java8 新特性实战 | JavaGuide</a></p><p><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper">CymChad/BaseRecyclerViewAdapterHelper: BRVAH:Powerful and flexible RecyclerAdapter (github.com)</a></p><p>《kotlin核心编程》</p><p>《第一行代码》(第三版)</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你踏入kotlin大门(四)|基本功_逻辑控制篇</title>
      <link href="/2022/10/18/dai-ni-ta-ru-kotlin-da-men-si/"/>
      <url>/2022/10/18/dai-ni-ta-ru-kotlin-da-men-si/</url>
      
        <content type="html"><![CDATA[<h1 id="带你踏入kotlin大门-四-基本功-逻辑控制篇"><a href="#带你踏入kotlin大门-四-基本功-逻辑控制篇" class="headerlink" title="带你踏入kotlin大门(四)|基本功_逻辑控制篇"></a>带你踏入kotlin大门(四)|基本功_逻辑控制篇</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第17天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><a href="https://juejin.cn/post/7151258942746656781">带你踏入Kotlin大门(一)|kotlin初识 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7151791231884853262">带你踏入kotlin大门(二)|基本功_变量篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152159139823616036">带你踏入kotlin大门(三)|基本功_函数篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154384691808698376">带你踏入kotlin大门(四)|基本功_逻辑控制篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154757492621180936">带你踏入kotlin大门(五)|基本功_类和继承篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7155124227958538253/">带你踏入Kotlin大门(六)|基本功_接口和特殊类篇 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>已学习 Kotlin 变量、函数知识</li><li>有 <code>Java</code> 编程基础</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列的<a href="https://juejin.cn/post/7152159139823616036">上一篇文章</a>中，笔者给大家讲述 <code>kotlin</code> 中的 <strong>头等公民</strong> ——<strong>函数</strong>，相信 <code>Kotlin</code> 中函数的简单使用大家都很熟悉了，现在继续给大家讲述 <code>Kotlin</code> 中的逻辑控制语句。</p><p>本篇主要讲述三大执行语句中的 <strong>条件判断语句</strong> 和 <strong>循环语句</strong>，由于顺序执行语句与 <code>Java</code> 一样，没什么特点，我们前面文章中也多次使用过了，这里便不再赘述。</p><p><img src="https://pic.lxtlovely.top/blog/20221015125935.gif"></p><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p><code>Kotlin</code> 中 <code>if</code> 语句的实现和 java 中的 <code>if</code> 是没有太大区别的。我们需要关注的是其<strong>特性</strong>和<strong>表达式化</strong>这些与 Java 不同的地方。</p><p>首先，我们依旧是用一段简单的 Java 代码来进行变化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">=</span> num1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        res <span class="token operator">=</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转化为 Kotlin 之后，是如下方的代码。这一段转换，使用到的是我们前文中使用到的一些内容，直接把函数给转化。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">numMax</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token punctuation">{</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">=</span> num1    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        res <span class="token operator">=</span> num2    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是上面这段代码的转化，显然是少一些 Kotlin 的特点的。什么特点呢？首先是 if 函数自身的特点。if 函数可以 <strong>表达式化/函数化</strong> ，在这种情况下，可以直接把每个条件下的最后一条语句作为返回值。这是什么意思呢？具体看下面的代码变化。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">numMax</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token punctuation">{</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        num1    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        num2    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上面的代码我们可以看到，当其 res 的赋值是表达式的时候，表达式中最后一行不能出现 <code>res = xxx</code> 这种类型的语句，因为 if 语句变为表达式的时候，是需要把最后一行作为结果返回的，所以最后一行需要是一个结果。</p><p>我们再次把它变化得更具 <code>Kotlin</code> 风格，这次是将 if 表达式直接作返回值返回。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">numMax</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        num1    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        num2    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，既然函数体里面只返回一个 if 表达式，那么我们可以直接把 if 表达式继续向外提出，让整个函数体变为一个 if 表达式的结果。变化后的代码如下。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">numMax</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span> num1 <span class="token keyword">else</span> num2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是的，这段代码最后变成了一行代码了，变成了纯<strong>表达式化</strong>的代码。这里要注意的是，把整个函数变成 if 表达式之后，对应的函数的声明也去掉了，这正对应我们上一篇文章所讲的知识点。</p><h3 id="when-语句"><a href="#when-语句" class="headerlink" title="when 语句"></a>when 语句</h3><p><code>Kotlin</code> 中的 <code>when</code> 语句，大家初次听也许感觉很陌生。但是事实上，你可以将其看作是 <code>Java</code> 中 <code>switch</code> 语句的加强版本。在 <code>Kotlin</code> 中，已不再有 <code>switch</code> 语句，全面使用 <code>when</code> 语句替代。<code>when</code> 语句即保留了 <code>swich</code> 语句的多重判定，同时又让其使用变得<strong>无比简洁且可接收各种类型的参数</strong>。所以，你也可以把 <code>when</code> 理解为多重 if 的简化版。</p><p>我们依旧以 Java 版本，先写出一段多重 <code>if</code> 语句代码。这里为什么不以 <code>switch</code> 举例？是因为 <code>switch</code> 语句直到在 jdk 1.7 以下只支持 <code>int</code> 类型变量，所以此处不以其作为例子。</p><p>下面的这段代码很简单，就是对传入的字符串作判断，根据不同的字符串来返回不同的整形数值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">checkString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sNum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sNum <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sNum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上述的代码转化为 <code>Kotlin</code> ，使用 <code>when</code> 语句来编写，就是如下的样式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">checkString</span><span class="token punctuation">(</span>s<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"a"</span> <span class="token operator">-&gt;</span> <span class="token number">1</span>    <span class="token string">"b"</span> <span class="token operator">-&gt;</span> <span class="token number">2</span>    <span class="token string">"c"</span> <span class="token operator">-&gt;</span> <span class="token number">3</span>    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是否顿时觉得变得无比明了简单呢！你会发现这种形式更加的适合人的思维。相比于 <code>switch</code> 和多重 if，这也让我们的代码编写过程变得更加简单。</p><p>从上面的示例代码，我们可以看出三点。</p><ol><li><code>when()</code> 语句可以传入参数，事实上这个参数可以是任意类型的；</li><li><code>when</code> 下边的代码编写格式为：<code>"匹配条件" -&gt; {}</code> ，这里没有了{}包含的函数体，是因为它是单行的，所以将其视为表达式，把 {} 省略了；</li><li>当 <code>when</code> 语句需要返回值的时候，是以每个条件下的<strong>最后一行表达式作为返回值</strong>。</li></ol><p>但是 <code>when</code> 的<strong>功能远不止于此</strong>，让我们来看一下下面的代码。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">checkInt</span><span class="token punctuation">(</span>i<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">20</span> <span class="token operator">-&gt;</span> <span class="token number">1</span> <span class="token comment">//1</span>    <span class="token keyword">is</span> Long<span class="token punctuation">,</span>Double <span class="token operator">-&gt;</span> <span class="token number">2</span> <span class="token comment">//2</span>    <span class="token number">13</span> <span class="token operator">-&gt;</span> <span class="token number">3</span>     <span class="token comment">//3</span>    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，上文中的每行的表达式和前面代码不一样了，其实这正体现了 <code>when</code> 广阔的判断功能。</p><p>上述的 <strong>注释1</strong> 处，判断 <strong>i</strong> 是否在 [1,20] 的区间内，其中 in 和 1..20 这两种用法，我在接下来的循环语句中会讲述含义和用法； </p><p><strong>注释2</strong> 处，判断 <strong>i</strong> 是否为 <code>Long</code> 或者 <code>Double</code> 类型的，<strong>is</strong> 我们可以理解为 <code>Java</code> 中的 <code>instanceof</code> ，用于查看是否为对应子类的；</p><p><strong>注释3</strong> 处，便是和前面一样，判断是否为13了。</p><p><img src="https://pic.lxtlovely.top/blog/20221015115021.png"></p><p>同时，当带有参数的功能不再满足于现有要求的时候，我们还可使用无参的 <code>when</code> 语句</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">checkString</span><span class="token punctuation">(</span>s<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span><span class="token punctuation">{</span>    s<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token number">1</span>    s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">2</span>    s <span class="token operator">==</span> <span class="token string">"c"</span> <span class="token operator">-&gt;</span> <span class="token number">3</span>    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述这段无参的 <code>when</code> 语句块，让我们的代码变得更加灵活，使得可以对各种外部的属性作判断，也可以对属性作各种 <code>Boolean</code> 类型的逻辑判断。所以说，<code>when</code> 更像是多重 <strong>if</strong> 的简约版本，功能强大的同时，使用也便捷。</p><p><img src="https://pic.lxtlovely.top/blog/20221015125701.gif"></p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>Kotlin 中的循环语句，包括 <code>while</code> 和 <code>for</code> 这两种循环语句。其中，<code>while</code> 语句和 <code>Java</code> 中的一样，倒是 <code>for</code> 语句在 <code>Kotlin</code> 中有很多不同，所以只在此介绍 <code>for</code> 语句。</p><h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h3><p>Kotlin 中的 for 语句，完全摒弃了传统的 <code>for-i</code> 循环，全面使用 <code>for-each</code> 循环。但是同时也对 <code>for-each</code> 循环做了一个拓展，让其变得简单易用。</p><p>在 Kotlin 中，我们可以将改进后的 <code>for-each</code> 循环称之为  <code>for-in</code> 循环。老规矩，我们先上一段 Java 代码，再对其进行转化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">&gt;</span></span> copyItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ShoppingCartItem</span> i <span class="token operator">:</span> items<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//1</span>        copyItems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>copyItems<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码来自于我的 <a href="https://juejin.cn/column/7148433994391126047">设计模式系列</a> 中。可以看到上述的代码的<strong>注释1</strong>处使用了 <code>for-each</code> 。我们将其转化为 <code>Kotlin</code> 之后是这样子的。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">val</span> items<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>ShoppingCartItem<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>ShoppingCartItem<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> copyItems<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>ShoppingCartItem<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1</span>        copyItems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>copyItems<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，最不一样的地方，就是  <code>for-each</code> 中的 ：变成 <code>in</code> 了。这里是遍历集合，我们很好理解。</p><p>但是，要实现 Java 的 <code>for-i</code> 的用法该怎么办呢？在 <code>Kotlin</code> 中也有对应拓展的。</p><p>在介绍之前，我们先学习几个知识。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token number">0</span><span class="token operator">..</span><span class="token number">10</span> <span class="token comment">//代表的是 [0,10],左闭右闭</span><span class="token number">0</span> until <span class="token number">10</span> <span class="token comment">//代表的是 [0,10)，左开右闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由此，我们可以写出 <code>for-i</code> 中1遍历到10的代码为：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// Loop over a range from 0 to 10</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 <code>until</code> 关键字， <code>for-i</code> 中1遍历到10的代码可以写成：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// Loop over a range from 0 to 10</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> Kotlin 中的  <code>for-in</code> 默认是正序且步长为1的，我们可以分别使用 <code>downTo</code> 和 <code>step</code> 两个关键字对其作更改 。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">10</span> downTo <span class="token number">1</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述代码的运行结果为：</p><p><img src="https://pic.lxtlovely.top/blog/20221015125052.png"></p><p><img src="https://pic.lxtlovely.top/blog/20221015130105.gif"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS43LjEwIiwicGxhdGZvcm0iOiJqYXZhIiwiYXJncyI6IiIsIm5vbmVNYXJrZXJzIjp0cnVlLCJ0aGVtZSI6ImlkZWEiLCJjb2RlIjoiZnVuIG1haW4oKSB7XG4vLyAgICAgdmFsIG5hbWUgPSBcInN0cmFuZ2VyXCIgICAgICAgIC8vIERlY2xhcmUgeW91ciBmaXJzdCB2YXJpYWJsZVxuLy8gICAgIHByaW50bG4oXCJIaSwgJG5hbWUhXCIpICAgICAgICAvLyAuLi5hbmQgdXNlIGl0IVxuLy8gICAgIHByaW50KFwiQ3VycmVudCBjb3VudDpcIilcbi8vICAgICBmb3IgKGkgaW4gMC4uMTApIHsgICAgICAgICAgIC8vIExvb3Agb3ZlciBhIHJhbmdlIGZyb20gMCB0byAxMFxuLy8gICAgICAgICBwcmludChcIiAkaVwiKVxuLy8gICAgIH1cbiAgICBwcmludGxuKG51bU1heCgxLDIpKVxuICAgIFxufVxuXG5mdW4gbnVtTWF4KG51bTE6IEludCwgbnVtMjogSW50KTogSW50e1xuICAgIHZhciByZXMgPSBpZihudW0xID4gbnVtMil7XG4gICAgICAgIG51bTFcbiAgICB9ZWxzZXtcbiAgICAgICAgbnVtMlxuICAgIH1cbiAgICByZXR1cm4gcmVzXG59In0=">Kotlin Playground: Edit, Run, Share Kotlin Code Online (kotlinlang.org)</a></p><p><a href="https://www.jianshu.com/p/08e57c2c74df">Kotlin-简约之美-进阶篇（二）：when的使用详解 - 简书 (jianshu.com)</a></p><p>《kotlin核心编程》</p><p>《第一行代码》(第三版)</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你踏入kotlin大门(二)|基本功_变量篇</title>
      <link href="/2022/10/18/dai-ni-ta-ru-kotlin-da-men-er/"/>
      <url>/2022/10/18/dai-ni-ta-ru-kotlin-da-men-er/</url>
      
        <content type="html"><![CDATA[<h1 id="带你踏入kotlin大门-二-基本功-变量篇"><a href="#带你踏入kotlin大门-二-基本功-变量篇" class="headerlink" title="带你踏入kotlin大门(二)|基本功_变量篇"></a>带你踏入kotlin大门(二)|基本功_变量篇</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第10天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><a href="https://juejin.cn/post/7151258942746656781">带你踏入Kotlin大门(一)|kotlin初识 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7151791231884853262">带你踏入kotlin大门(二)|基本功_变量篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152159139823616036">带你踏入kotlin大门(三)|基本功_函数篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154384691808698376">带你踏入kotlin大门(四)|基本功_逻辑控制篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154757492621180936">带你踏入kotlin大门(五)|基本功_类和继承篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7155124227958538253/">带你踏入Kotlin大门(六)|基本功_接口和特殊类篇 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有 <code>Java</code> 编程基础</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://juejin.cn/post/7151258942746656781">前文</a>为大家浅浅介绍了 <code>kotlin</code> 这一门语言，给大家讲述了 <code>kotlin</code> 这个新型基于 <code>jvm</code> 平台的语言的优势，以及我们 Android 开发者学习的必要性。话不多说，本篇正式开启 <code>kotlin</code> 的学习历程，带你正式踏入 <code>kotlin</code> 大门。</p><p>至于使用的编译工具，依旧是我们日常开发使用的 Android studio 或者 IDEA ，新建一个 kotlin 文件即可开启编码。或者可以使用 kotlin官方的 <a href="https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS43LjEwIiwicGxhdGZvcm0iOiJqYXZhIiwiYXJncyI6IiIsIm5vbmVNYXJrZXJzIjp0cnVlLCJ0aGVtZSI6ImlkZWEiLCJjb2RlIjoiZnVuIG1haW4oKSB7XG4gICAgdmFsIG5hbWUgPSBcInN0cmFuZ2VyXCIgICAgICAgIC8vIERlY2xhcmUgeW91ciBmaXJzdCB2YXJpYWJsZVxuICAgIHByaW50bG4oXCJIaSwgJG5hbWUhXCIpICAgICAgICAvLyAuLi5hbmQgdXNlIGl0IVxuICAgIHByaW50KFwiQ3VycmVudCBjb3VudDpcIilcbiAgICBmb3IgKGkgaW4gMC4uMTApIHsgICAgICAgICAgIC8vIExvb3Agb3ZlciBhIHJhbmdlIGZyb20gMCB0byAxMFxuICAgICAgICBwcmludChcIiAkaVwiKVxuICAgIH1cbn0ifQ==">在线网站</a> 来学习。</p><p><img src="https://pic.lxtlovely.top/blog/20221007174932.png"></p><p>（上述为在线网站截图，同时指出 <code>main</code> 函数如何写）</p><p>本篇文章，先带大家学习 <code>kotlin</code> 中的 <strong>变量</strong></p><h2 id="不一样的变量"><a href="#不一样的变量" class="headerlink" title="不一样的变量"></a>不一样的变量</h2><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><p>关于类型声明，我们在 <code>Java</code> 中会经常用到，就是我们在定义变量的时候，在变量名之前要写的声明。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java</span><span class="token class-name">String</span> stringValue <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Long</span> longValue <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述 <code>Java</code> 代码的变量声明，换到 <code>kotlin</code> 中是这样子的。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//kotlin</span><span class="token keyword">var</span> stringValue <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token keyword">var</span> intValue <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> longValue <span class="token operator">=</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>kotlin</code> 中，我们的变量类型声明变成了使用 <code>var</code> 或者 <code>val</code> 来进行声明,同时每一行<strong>末尾不再使用分号</strong></p><p>其中，<code>var</code> 全称是 <strong>variable</strong> ，意思为可变。其意思正是 <strong>可变变量</strong> ，对应于 <code>Java</code> 中的非 <code>final</code> 类型。</p><p><code>val</code> 全称是 <strong>value</strong> ，更精准的释义应该是：<strong>引用不可变</strong>，对应于 <code>Java</code> 中的 <code>final</code> 类型。</p><p>我们先来以 <code>var</code> 为例子学习 <code>kotlin</code> 中的变量，<code>val</code> 类型稍后再说。</p><p>大家对于上述的 <code>kotlin</code> 代码也许会有疑惑，为何 <code>kotlin</code> 可以不做类型声明呢，难道它能自己知道我要的是什么类型的变量么？</p><p>是的，<code>kotlin</code> 大部分情况下可以知道你要声明的是什么类型的变量，这是得益于它的 <strong>类型推导</strong> 机制。当我们在变量后面写了<strong>表达式</strong>或者<strong>对应的值</strong>时，我们可以<strong>不用声明变量的类型</strong>，让编译器自动推导类型。</p><p>那当我们偏要声明变量类型，或者我们未赋值时候，如何声明变量呢？</p><p>在 <code>kotlin</code> 中，<strong>类型声明</strong>是使用 <code>&lt;name&gt;:&lt;object&gt;</code> 这种类型来声明的，我们继续使用上述的demo。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//偏要声明</span><span class="token keyword">var</span> stringValue<span class="token operator">:</span>String <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token keyword">var</span> intValue<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> longValue<span class="token operator">:</span>Long <span class="token operator">=</span> <span class="token number">1234</span><span class="token comment">//无法类型推导，必须做类型声明</span><span class="token keyword">var</span> stringValue<span class="token operator">:</span>String<span class="token keyword">var</span> intValue<span class="token operator">:</span>Int<span class="token keyword">var</span> longValue<span class="token operator">:</span>Long<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会发现 <code>Java</code> 中的 <code>int</code> 和 <code>long</code> 这里的首字母变成了大写。那是因为，<code>kotlin</code> 中不再有基本变量类型，全面转变为对象数据类型。下面给出对应的表格</p><p><img src="https://pic.lxtlovely.top/blog/20221007220609.png"></p><h3 id="val-引用不可变"><a href="#val-引用不可变" class="headerlink" title="val 引用不可变"></a>val 引用不可变</h3><p>为什么 <code>val</code> 更准确的说法是 <strong>引用不可变</strong> 呢？</p><p>因为 <code>val</code> 的设计和 <code>Java</code> 中的 <code>final</code> 是一样的，不可变的是指引用的数据地址不可变，而非地址内的值不可变。如果这样子说，你依旧感到晦涩，可以查看下述的代码。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> num <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.lxtlovely.top/blog/20221007222558.png"></p><p>上述代码中，我们直接修改 <code>val</code> 类型的变量，给这个变量赋予新的数组。会出现报错，告知我们 <code>val</code> 类型不可重复赋值。但当我们修改代码如下，会发现数组的内容是可以修改的。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> num <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//     num = intArrayOf(2,2,3)</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.lxtlovely.top/blog/20221007223201.png"></p><p>所以说，val 中不可变的是对变量的引用，而非变量本身的内容。</p><p>而出现这种现象的根本原因是<strong>底层数据设计的问题</strong>。</p><p>我们知道，在 <code>Java</code> 中，<code>final</code> 修饰的<strong>基本数据类型</strong>是放在<strong>运行时常量池</strong>中，修饰的<strong>类信息</strong>是放在<strong>堆的方法区</strong>中，本质上他们都是放置于 <strong>堆内存</strong> 中。</p><p>相同的，<code>val</code> 的特性实现和 <code>final</code> 一样，它修饰的数组也是存储于 <strong>堆内存</strong> 中。所以也意味着只是引用不可改，但是引用的对象可改。</p><h3 id="var-存在的意义"><a href="#var-存在的意义" class="headerlink" title="var 存在的意义"></a>var 存在的意义</h3><p><code>val</code> 是 <code>kotlin</code> 中默认推荐的修饰，我在这里也推荐你，优先使用 <code>val</code> 来声明一个变量。为什么呢？因为 <code>val</code> 是引用不可变，使用这种修饰，会是你的编程好习惯，它能避免你的变量在不知情的情况下被别人修改，这也就可以避免很多不必要的bug。同时，也建议你在使用 Java的时候，默认给变量都加上 <code>final</code> 。</p><p>val 那么好，那为啥 var 还要存在呢？</p><p>var 是表示某个变量可变，我们日常开发中，总会需要某个变量是可变的。否则，当我们要使某个数递增的时候，会变得异常困难。这就是它存在的道理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/9c0379912821">从内存角度理解static与final关键字 - 简书 (jianshu.com)</a></p><p>《kotlin核心编程》</p><p>《第一行代码》(第三版)</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你踏入Kotlin大门(一)|kotlin初识</title>
      <link href="/2022/10/16/dai-ni-ta-ru-kotlin-da-men-yi/"/>
      <url>/2022/10/16/dai-ni-ta-ru-kotlin-da-men-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="带你踏入Kotlin大门-一-kotlin初识"><a href="#带你踏入Kotlin大门-一-kotlin初识" class="headerlink" title="带你踏入Kotlin大门(一)|kotlin初识"></a>带你踏入Kotlin大门(一)|kotlin初识</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第9天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><a href="https://juejin.cn/post/7151258942746656781">带你踏入Kotlin大门(一)|kotlin初识 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7151791231884853262">带你踏入kotlin大门(二)|基本功_变量篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152159139823616036">带你踏入kotlin大门(三)|基本功_函数篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154384691808698376">带你踏入kotlin大门(四)|基本功_逻辑控制篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154757492621180936">带你踏入kotlin大门(五)|基本功_类和继承篇 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7155124227958538253/">带你踏入Kotlin大门(六)|基本功_接口和特殊类篇 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有 <code>Java</code> 编程基础</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名 <code>Java</code> 使用者，相信大家对 Java 的各种规范已经深入了解，这些规范是一种行业标准，它使得 Java 具有了更好的兼容性。但随着函数式编程的兴盛，这些规范又开始束缚了开发者的创造，成为了拖累 Java 的因素。</p><p>所以，Java8 出现了，它基于 Java5 做了一些拓展，让Java更好的适应时代。</p><p>它提出了 高阶函数和<code>lambda</code>、<code>stream</code>类 和 <code>optional</code>类，这几个让 <code>Java</code> 更简洁，可读性增强以及解决空安全。这是 <code>Java</code> 对自身的变革。</p><p>但在人们希望Java更好的同时，也有 “更好的Java” 的实践，学界和工业界分别 创造了 <code>Scala</code> 和 <code>Kotlin</code> ，并使他们成为了更好的 <code>Java</code>。</p><p>但是，<code>Scala</code> 和 <code>kotlin</code> 作为不同的语言，他们各有自身优势。前者重于提高 <code>Java</code> 的广度；而后者重于提高 <code>Java</code> 的广度同时，继续保持易用性可规范性。所以在工业界看来，<code>kotlin</code> 才是最适合做业务的，称得上更好的 <code>Java</code>。</p><p>下面，将带大家了解和比较 <code>Scala</code> 和 <code>kotlin</code> 的异同，以便更好的理解他们的设计理念，设计哲学。</p><h2 id="Scala是什么"><a href="#Scala是什么" class="headerlink" title="Scala是什么"></a>Scala是什么</h2><p><code>Scala</code> 语言是Java的研发者之一、Java5 中泛型的创造者 ——Martin Odersky 教授的作品。该语言与 Java 一样，是依靠JVM平台的。它被创造出来的初衷是突破Java的约束和规范，让其合理的服务于学术，同时也具有实用价值。</p><p>Scala 在突破 Java 的约束和规范的时候，做了大量的拓展，使得 Scala 可以实现很多的编程特性。但是由于其突破了Java编程规范约束，它的语法被认为过于学院派，虽然强大灵活，但是其语言逻辑的不同，使得它不容易学懂；其不守规范的多选择性，也让其难以在工业界收到一致的好评。</p><p>但是 Scala 在大数据领域已是热门语言，该领域的众多知名项目正是由此语言开发的。可见，Scala 的灵活性虽未讨得大部分人的追捧，但是其对 Java 的拓展和解放也引得很多人的认可。 </p><h2 id="kotlin更好吗"><a href="#kotlin更好吗" class="headerlink" title="kotlin更好吗"></a>kotlin更好吗</h2><p>同样的，<code>kotlin</code> 也是一门作为依靠 <code>JVM</code> 平台而出现的语言。它由大名鼎鼎的 <strong>JetBrains</strong> 公司打造，目的很简单，就是改良 <code>Java</code> ，致力成为“更好的Java”。</p><p><code>Kotlin</code> 也是在突破<code>Java</code>的束缚，但其突破束缚的程度确是有限的。它在保留Java大部分重要的规范的同时，也提出了很多可以提高生产力的拓展，譬如默认属性不可空，数据类，智能推导等。这使得kotli~n即拓展了语言的特性，也使得其更加易用。</p><p><code>kotlin</code> 对 <code>Java</code> 极度兼容，其在用法方面用法是相对于Java做出了部分简化和改良，使得Java程序员很容易就可上手；而在兼容范围方面，<code>kotlin</code>可以兼容到<strong>Java6</strong>，可以实现 <code>Java</code> 与 <code>kotlin</code> 之间无缝相互调用。这正是工业界所喜爱的。</p><h2 id="为何要入门-kotlin"><a href="#为何要入门-kotlin" class="headerlink" title="为何要入门 kotlin"></a>为何要入门 kotlin</h2><p>作为依靠 jvm 平台的语言，kotlin 和 Scala 都是将源文件编译为 class 文件，再交予 jvm 运行。所以这些语言并不会影响运行的性能，我们只需关注其是否能给我们带来开发效益上的提高即可。而事实上，kotlin 能给我们带来很大的开发效益，具体有以下几点。</p><ol><li>代码量大幅减少。基于 kotlin 的语法简洁的特性，对比Java，能大幅减少我们的代码数量</li><li>提高开发效率。kotlin 使用了函数式等更优的语言特性，让我们在开发的时候效率大幅提升。</li><li>答复减少空指针异常。kotlin 默认属性不得为空，可以让空指针异常答复降低。</li></ol><p>同时，Android 官方已指定 kotlin 为官方语言，且默认优先使用它在各种新功能上，譬如最小的 compose 只能使用 kotlin 语言。由此可知，kotlin 必然会成为Android 开发的最主要的语言，我们此时学习也是刻不容缓。</p><p>加油！永远相信我们的代码可以改变世界。</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图+源码，读懂View的MeasureSpec</title>
      <link href="/2022/10/15/tu-yuan-ma-du-dong-view-de-measurespec/"/>
      <url>/2022/10/15/tu-yuan-ma-du-dong-view-de-measurespec/</url>
      
        <content type="html"><![CDATA[<h1 id="图-源码，读懂View的MeasureSpec"><a href="#图-源码，读懂View的MeasureSpec" class="headerlink" title="图+源码，读懂View的MeasureSpec"></a>图+源码，读懂View的MeasureSpec</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第13天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p><strong>读懂 View 三大绘制方法的文章</strong></p><p><a href="https://juejin.cn/post/7152902416046751780">图+源码，读懂View的MeasureSpec - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7153157173525086244">图+源码，读懂View的Measure方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7153606917351604255">图+源码，读懂View的Layout方法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7154013916400451620">图+源码，读懂View的Draw方法 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有Android开发基础</li><li>了解 View 体系</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在青训营系列的文章中，我们用两篇文章讲解了 <a href="https://juejin.cn/post/7123962969095929893">View体系</a> 的知识。但是碍于时间和篇幅的限制，我们还未将该知识点完全打通，所以在这篇文章中，笔者将给大家继续讲述 View 的知识，本文使用 图+源码 的形式给大家讲解，希望这样子能讲得更加明白，大家也能有所收获。</p><p>阅读本系列，你可以学到在Android中， View 三大绘制方法 <strong>Measure</strong> 、<strong>Layout</strong> 和 <strong>Draw</strong> 的原理。</p><p>而今天这篇文章，我们讲解的是  <strong>Measure</strong> 方法的前置知识，<strong>View的MeasureSpec类</strong>。</p><h2 id="何为-MeasureSpec"><a href="#何为-MeasureSpec" class="headerlink" title="何为 MeasureSpec"></a>何为 MeasureSpec</h2><p>在学习三大方法之前，我们先来了解一下 View 的内部类，<strong>MeasureSpec</strong> 的作用和原理。</p><p><strong>MeasureSpec</strong> 在 View 的测量(measure)过程中，担任着<strong>存储 View 的规格尺寸</strong>的作用。每次启动 <strong>Measure</strong> 方法的时候，我们都会需要传入对应的 <strong>MeasureSpec</strong> 参数才能执行。所以说，在 View 的绘制中，我们<strong>必须先获取每个 View 的 MeasureSpec 参数，才能执行 Measure 方法</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MeasureSpec</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MODE_SHIFT <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MODE_MASK  <span class="token operator">=</span> <span class="token number">0x3</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span>    <span class="token comment">/** @hide */</span>    <span class="token annotation punctuation">@IntDef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>UNSPECIFIED<span class="token punctuation">,</span> EXACTLY<span class="token punctuation">,</span> AT_MOST<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MeasureSpecMode</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">//1</span>    <span class="token comment">/**         * Measure specification mode: The parent has not imposed any constraint         * on the child. It can be whatever size it wants.         */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNSPECIFIED <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span>    <span class="token comment">/**         * Measure specification mode: The parent has determined an exact size         * for the child. The child is going to be given those bounds regardless         * of how big it wants to be.         */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXACTLY     <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span>    <span class="token comment">/**         * Measure specification mode: The child can be as large as it wants up         * to the specified size.         */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> AT_MOST     <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span>    <span class="token comment">/**         * Creates a measure specification based on the supplied size and mode.         *         * The mode must always be one of the following:         * &lt;ul&gt;         *  &lt;li&gt;{@link android.view.View.MeasureSpec#UNSPECIFIED}&lt;/li&gt;         *  &lt;li&gt;{@link android.view.View.MeasureSpec#EXACTLY}&lt;/li&gt;         *  &lt;li&gt;{@link android.view.View.MeasureSpec#AT_MOST}&lt;/li&gt;         * &lt;/ul&gt;         *         * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On API level 17 and lower, makeMeasureSpec's         * implementation was such that the order of arguments did not matter         * and overflow in either value could impact the resulting MeasureSpec.         * {@link android.widget.RelativeLayout} was affected by this bug.         * Apps targeting API levels greater than 17 will get the fixed, more strict         * behavior.&lt;/p&gt;         *         * @param size the size of the measure specification         * @param mode the mode of the measure specification         * @return the measure specification based on size and mode         */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span><span class="token annotation punctuation">@IntRange</span><span class="token punctuation">(</span>from <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>MODE_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@MeasureSpecMode</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sUseBrokenMakeMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> size <span class="token operator">+</span> mode<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">&amp;</span> <span class="token operator">~</span>MODE_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**         * Like {@link #makeMeasureSpec(int, int)}, but any spec with a mode of UNSPECIFIED         * will automatically get a size of 0. Older apps expect this.         *         * @hide internal use only for compatibility with system widgets and older apps         */</span>    <span class="token annotation punctuation">@UnsupportedAppUsage</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">makeSafeMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sUseZeroUnspecifiedMeasureSpec <span class="token operator">&amp;&amp;</span> mode <span class="token operator">==</span> UNSPECIFIED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**         * Extracts the mode from the supplied measure specification.         *         * @param measureSpec the measure specification to extract the mode from         * @return {@link android.view.View.MeasureSpec#UNSPECIFIED},         *         {@link android.view.View.MeasureSpec#AT_MOST} or         *         {@link android.view.View.MeasureSpec#EXACTLY}         */</span>    <span class="token annotation punctuation">@MeasureSpecMode</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMode</span><span class="token punctuation">(</span><span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//noinspection ResourceType</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>measureSpec <span class="token operator">&amp;</span> MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**         * Extracts the size from the supplied measure specification.         *         * @param measureSpec the measure specification to extract the size from         * @return the size in pixels defined in the supplied measure specification         */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>measureSpec <span class="token operator">&amp;</span> <span class="token operator">~</span>MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">adjust</span><span class="token punctuation">(</span><span class="token keyword">int</span> measureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> mode <span class="token operator">=</span> <span class="token function">getMode</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">getSize</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> UNSPECIFIED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// No need to adjust size for UNSPECIFIED mode.</span>            <span class="token keyword">return</span> <span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> UNSPECIFIED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size <span class="token operator">+=</span> delta<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>VIEW_LOG_TAG<span class="token punctuation">,</span> <span class="token string">"MeasureSpec.adjust: new size would be negative! ("</span> <span class="token operator">+</span> size <span class="token operator">+</span>                  <span class="token string">") spec: "</span> <span class="token operator">+</span> <span class="token function">toString</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" delta: "</span> <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>            size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**         * Returns a String representation of the specified measure         * specification.         *         * @param measureSpec the measure specification to convert to a String         * @return a String with the following format: "MeasureSpec: MODE SIZE"         */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mode <span class="token operator">=</span> <span class="token function">getMode</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">getSize</span><span class="token punctuation">(</span>measureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"MeasureSpec: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> UNSPECIFIED<span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"UNSPECIFIED "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> EXACTLY<span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"EXACTLY "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> AT_MOST<span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"AT_MOST "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述是 MeasureSpec 的源码，首先，我们看到了 <strong>MeasureSpecMode</strong> (标注1处) 这个注解定义，注解中表明了有三个枚举类。从这三个枚举类的常量定义中，我们发现他们使用了位计算，0，1，2 三个数全部左移 30 位，其二进制刚好就是int32位的高两位。可见，该类是想将32位二进制数的前两位赋予 <strong>MeasureSpecMode</strong> 。这三个常量称之为 **specMode(测量规格模式)**，占据了 32位int值的高两位；而其余低的30位，称之为 **specSize(测量规格大小)**。</p><p>这三种模式释义如下。</p><blockquote><ul><li><p><strong>UNSPECIFIED</strong></p><p><strong>未指定模式</strong>。View可以任意大，父布局不对其进行约束。多用于系统内部测量。</p></li><li><p><strong>EXACTLY</strong></p><p><strong>精确模式</strong>。子View的大小已被父View确定，确定的值为是 specSize ，子View大小是被限制，无法被更改的。<strong>对应了match_parent和具体的数值</strong>。</p></li><li><p><strong>AT_MOST</strong></p><p><strong>最大模式</strong>。子View可以任意大，最终可达到最终指定的specSize值，但是不能大于这个值。<strong>对应wrap_content属性</strong>。</p></li></ul></blockquote><p>然后，我们看到有 <code>makeMeasureSpec</code>、<code>getMode</code> 和 <code>getSize</code> 这些方法，他们的作用也正如方法名一样，分别是载入保存模式和大小，获得模式、获得大小。</p><h2 id="DecorView-如何生成-MeasureSpec"><a href="#DecorView-如何生成-MeasureSpec" class="headerlink" title="DecorView 如何生成 MeasureSpec"></a>DecorView 如何生成 MeasureSpec</h2><p>我们知道，每一个View中都会持有自己的一个 MeasureSpec 信息。那在现在介绍完 MeasureSpec 类的构成之后，我们来看一下，<strong>顶层 View (DecorView) 是如何获得自己的  MeasureSpec 信息的</strong>。</p><p>我们看一下 View 工作流开启的方法 <code>performTraversals()</code> ，我们看到<strong>注释1和2</strong>处，可以看到是 <code>getRootMeasureSpec</code> 方法生成了对应的<code>childWidthMeasureSpec</code> 和 <code>childHeightMeasureSpec</code> 值，再载入到<strong>注释3</strong>的 <code>performMeasure</code> 中执行对应的 Measure 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// TODO: In the CL "ViewRootImpl: Fix issue with early draw report in</span>        <span class="token comment">// seamless rotation". We moved processing of RELAYOUT_RES_BLAST_SYNC</span>        <span class="token comment">// earlier in the function, potentially triggering a call to</span>        <span class="token comment">// reportNextDraw(). That same CL changed this and the next reference</span>        <span class="token comment">// to wasReportNextDraw, such that this logic would remain undisturbed</span>        <span class="token comment">// (it continues to operate as if the code was never moved). This was</span>        <span class="token comment">// done to achieve a more hermetic fix for S, but it's entirely</span>        <span class="token comment">// possible that checking the most recent value is actually more</span>        <span class="token comment">// correct here.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mStopped <span class="token operator">||</span> mReportNextDraw<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mWidth <span class="token operator">!=</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> mHeight <span class="token operator">!=</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">||</span> dispatchApplyInsets <span class="token operator">||</span> updatedConfiguration<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> childWidthMeasureSpec <span class="token operator">=</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span>mWidth<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>width<span class="token punctuation">,</span>                                                               lp<span class="token punctuation">.</span>privateFlags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>                <span class="token keyword">int</span> childHeightMeasureSpec <span class="token operator">=</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span>mHeight<span class="token punctuation">,</span> lp<span class="token punctuation">.</span>height<span class="token punctuation">,</span>                                                                lp<span class="token punctuation">.</span>privateFlags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_LAYOUT<span class="token punctuation">)</span> <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>mTag<span class="token punctuation">,</span> <span class="token string">"Ooops, something changed!  mWidth="</span>                                        <span class="token operator">+</span> mWidth <span class="token operator">+</span> <span class="token string">" measuredWidth="</span> <span class="token operator">+</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token operator">+</span> <span class="token string">" mHeight="</span> <span class="token operator">+</span> mHeight                                        <span class="token operator">+</span> <span class="token string">" measuredHeight="</span> <span class="token operator">+</span> host<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token operator">+</span> <span class="token string">" dispatchApplyInsets="</span> <span class="token operator">+</span> dispatchApplyInsets<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Ask host how big it wants to be</span>                <span class="token function">performMeasure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>didLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">performLayout</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">performDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mSyncBufferCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mSyncBufferCallback<span class="token punctuation">.</span><span class="token function">onBufferReady</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么， <code>getRootMeasureSpec</code> 方法又做了上什么呢？我们可以查看一下源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRootMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> windowSize<span class="token punctuation">,</span> <span class="token keyword">int</span> measurement<span class="token punctuation">,</span> <span class="token keyword">int</span> privateFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> measureSpec<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> rootDimension <span class="token operator">=</span> <span class="token punctuation">(</span>privateFlags <span class="token operator">&amp;</span> PRIVATE_FLAG_LAYOUT_SIZE_EXTENDED_BY_CUTOUT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>        <span class="token operator">?</span> MATCH_PARENT <span class="token operator">:</span> measurement<span class="token punctuation">;</span><span class="token comment">//1</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>rootDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token class-name">ViewGroup<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span>MATCH_PARENT<span class="token operator">:</span>            <span class="token comment">// Window can't resize. Force root view to be windowSize.</span>            measureSpec <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">ViewGroup<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span>WRAP_CONTENT<span class="token operator">:</span>            <span class="token comment">// Window can resize. Set max size for root view.</span>            measureSpec <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token comment">// Window wants to be an exact size. Force root view to be that size.</span>            measureSpec <span class="token operator">=</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>rootDimension<span class="token punctuation">,</span> <span class="token class-name">MeasureSpec</span><span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> measureSpec<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现 <code>getRootMeasureSpec</code> 这个函数传入了三个值。第一个是窗口大小，第二个是测量信息，第三个是私有标签。</p><p>在这段代码的注释1处，我们可以看到第二、第三个参数最后生成了 <code>rootDimension</code> ，这个其实就是DecorView 的 MeasureSpec 类里面的布局参数。由此可得，<strong>DecorView 的 MeasureSpec 类是由 DecorView 自身的布局参数和窗口大小决定的</strong>。</p><p>出于好奇心，我们可以再看一下 <code>performMeasure</code> 方法是执行了什么？我们可以看到，它是直接执行 View 的 <code>measure</code> 方法了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> childWidthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> childHeightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mView <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span><span class="token class-name">Trace</span><span class="token punctuation">.</span>TRACE_TAG_VIEW<span class="token punctuation">,</span> <span class="token string">"measure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        mView<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行View的measure方法</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token class-name">Trace</span><span class="token punctuation">.</span>TRACE_TAG_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对应执行图</strong></p><p><img src="https://pic.lxtlovely.top/blog/20221010231221.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=29138?q=MeasureSp&amp;ss=android/platform/superproject">View.java - Android Code Search</a></p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=4063?q=getRootMeasureSpec&amp;ss=android/platform/superproject">ViewRootImpl.java - Android Code Search</a></p><p>《Android进阶之光》</p>]]></content>
      
      
      <categories>
          
          <category> View的事件体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> View的工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View体系(下)|青训营笔记</title>
      <link href="/2022/10/10/view-ti-xi-xia/"/>
      <url>/2022/10/10/view-ti-xi-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="View体系-下-青训营笔记"><a href="#View体系-下-青训营笔记" class="headerlink" title="View体系(下)|青训营笔记"></a>View体系(下)|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第4天</strong></p><p>熟悉完 <code>View</code> 的基础，了解完其分发流程，事件分发的传递规则。我们需要深入理解 <code>View</code> 的工作流程，包括绘制原理以及三大方法的流程，洞悉其原理和实现。</p><p><img src="https://pic.lxtlovely.top/blog/305e0ff5-c357-4a55-9b85-939dfddd3fa1.png"></p><h2 id="页面绘制流程"><a href="#页面绘制流程" class="headerlink" title="页面绘制流程"></a>页面绘制流程</h2><h3 id="页面如何展示到屏幕"><a href="#页面如何展示到屏幕" class="headerlink" title="页面如何展示到屏幕"></a>页面如何展示到屏幕</h3><p>当我们在 <code>Activity</code> 的 <code>onCreate</code>() 中调用 <code>setContentView()</code> 来设置根布局的时候，这个方法是一步步新建了一个 <code>PhoneWindow</code> ，再然后 <code>PhoneWindow</code> 就是以 <code>DecorView</code> 作为一个根部的 <code>View</code> 来添加内容。那么 <code>DecorView</code> 是如何被加载到 <code>Window</code> 的呢？</p><p>事实上，<code>Activity</code> 在执行了 <code>onCreate()</code> 的相关方法之后,会跳转到执行 <code>onResume()</code> 的相关方法，<code>DecorView</code> 就是在这个阶段被加载到 <code>Window</code> 的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b00d3fb54405463d8295edc9a8b11b36~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>页面绘制的总体流程如上图</p><p>最左侧的序列，最后完成的是 <code>addView()</code>，所添加的 <code>View</code> 其实是 <code>DecorView</code>。在管理着 <code>Activity</code> 生命周期的 <code>onResume()</code> 时期的 <code>handleResumeActivity()</code>方法中，该方法在成功的发起了 <code>onResume()</code> 方法之后，就会开启这个序列。这也是为什么在 <code>onResume()</code> 执行的时期，<code>Activity</code> 才会可见，因为这个时候才会把顶层的  <code>DecorView</code> 添加进去。</p><p>接着是 <code>ViewRootImpl</code> 这个方法的序列。在 <code>addView()</code> 里面，<code>ViewRootImpl</code> 会调用 <code>setView()</code> 来设置 <code>DecorView</code>，和调用 <code>requesLayout()</code> 来请求开始绘制流程。<strong>这时候并非一请求就会开始绘制了，何时开始绘制是由下一个序列的 <code>Choregrapher</code> 所决定的</strong>。</p><p>到达 <code>Choregrapher(舞蹈编导)</code> 管理的这个序列，从名字我们就可以了解到这是一个管理的方法。它的主要作用就是管理什么时候执行绘制，在其调用了回调之后，页面才会开始执行绘制，到最后的调用三大方法。</p><p>在最后的一个序列中，调用 <code>WindowManagerService</code> 方法之后，<code>addVindow</code>() 才会被调用来展示页面到屏幕。</p><h3 id="页面多久绘制一次"><a href="#页面多久绘制一次" class="headerlink" title="页面多久绘制一次"></a>页面多久绘制一次</h3><p><img src="https://pic.lxtlovely.top/blog/00720825-ad55-4e2b-91e5-d950559d1fcd.png"></p><p>我们在 Activity 中设置了布局文件之后，还会有很多页面的改动，动画的执行。那么是一执行到这些改动，页面就会立刻响应变化吗？有多个改动的话，是一个个排队执行改动吗？</p><p>其实是和上文提到的一样，这些改动是由 <code>Choregrapher</code> 来管理的。那么它如何管理的呢。这涉及到一个帧率的概念，譬如 60 帧就是指屏幕每秒会刷新60次。而页面的改动，统一就是在每一帧刷新的时候进行更新改动的。</p><p>我们可以查看上图，在每个时间片内，蓝色阶段是 CPU 执行 <code>Measure</code> <code>Layout</code>  <code>Draw</code> 这些个方法，绿色阶段则是 GPU 对这些的合成。然后到达了 VSync 这个时间的时候，就是屏幕刷新来展示这些新的或者更改后的页面了。那么有没有 CPU + GPU 执行的时间超时的情况呢，当出现这个情况的时候，就是出现了丢帧现象，说明我们需要对业务进行优化了。</p><p>附：页面执行绘制的渲染流程</p><p><strong>UI渲染流程</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69f2f0ae5dd242b6b49930acd17e7c2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>渲染流程</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a876c9a2bbf48ff89b518a7435890a1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> View的事件体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单一职责原则|设计原则</title>
      <link href="/2022/10/10/dan-yi-zhi-ze-yuan-ze/"/>
      <url>/2022/10/10/dan-yi-zhi-ze-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="单一职责原则-设计原则"><a href="#单一职责原则-设计原则" class="headerlink" title="单一职责原则|设计原则"></a>单一职责原则|设计原则</h1><p> 持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第3天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>设计原则系列文章</p><p><a href="https://juejin.cn/post/7149189472368721934">单一职责原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149927872331776031">里氏替换原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150923846386712612">迪米特原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152528995723149326">六大原则之外的设计原则|设计原则 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有项目编写经历</li><li>听说过设计模式</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们经常有听过设计模式，也明白设计模式对项目和代码设计逻辑的重要性。但是你是否知道，所有的设计模式，无论是经典的23种设计模式之内，或者23种之外的，其实他们都是基于最基本的6种设计原则展开的。理解6种设计原则，我们可以从根源更好的理解23种经典的设计模式。甚至待到你的经验炉火纯青之时，可以创造出自己的一种设计模式。</p><p>本文带大家学习和了解第一种设计原则，<strong>单一职责原则</strong></p><p><strong>单一职责原则</strong> </p><p><strong>定义</strong>：就一个类而言，应该仅有一个引起它变化的原因。应该只有一个职责。  每一个职责都是变化的一个轴线，如果一个类有一个以上的职责，这些职责就耦合在了一起。这会导致脆弱的设计。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起，会影响<a href="https://baike.baidu.com/item/%E5%A4%8D%E7%94%A8%E6%80%A7/12719815?fromModule=lemma_inlink">复用性</a>。例如：要实现逻辑和界面的分离。</p><p>上文的定义源自百度，其意思简单来说为：<strong>一个类或者模块只承担一个职责</strong></p><h2 id="单一职责指的是到哪个程度的单一？"><a href="#单一职责指的是到哪个程度的单一？" class="headerlink" title="单一职责指的是到哪个程度的单一？"></a>单一职责指的是到哪个程度的单一？</h2><p>单一职责原则实际上很好理解，但是其边界我们却难以判定。</p><p>那么，一个类完成一个业务功能是单一职责，还是一个类完成一个业务功能中某个流程步骤的功能称之为单一职责？</p><p>同时单一职责描述的是类和模块，那么类可以被称之为模块吗？还是说多个类才能祖成一个模块？我们实际中的单一职责应该针对某个类，还是针对多个类组成的模块呢？</p><p>要回答上述的这些问题，需要我们对单一职责有更加深的理解。</p><p>事实上，对于 <strong>单一职责原则</strong> 这种较为难以界定实际边界的规则，我们对其的定义应该是随着业务的变化而变化的，其定义应该是动态化的。</p><p>当业务需求小的时候，我们认为模块是类的抽象化表达，那么一个类能完成的一个功能块，我们也称之为模块。那我们的单一职责自然也是一个类而已。</p><p>当业务需求变大了，我们抽取出多个类一起完成某个功能，那我们认为这个功能涉及到的类合起来实现的为一个模块。但是这个时候，单一职责并非就全指整个模块了，<strong>对于整个模块</strong>，单一职责的评判是该模块是否实现的是单一的一个大功能，没有去实现其他的功能。<strong>对于其中的类</strong>，我们需要看是否包含其他业务领域的操作，如果包含，且存在该领域的业务，那么我们应该把这些关于其他业务领域的代码拆解出来，成为一个新的类；而如果包含，但目前不存在该领域的业务，那这个类也可认为是足够单一的类了。</p><blockquote><p>举个例子：</p><p>某个功能类中包含订单和地址的信息和操作</p><p>但是目前并不需要关于订单或者地址的功能，那么该功能类可认为是符合单一职责原则了</p><p>若是目前有涉及订单和地址的业务，我们就需要把订单和地址单独出来成为一个类，这样子才算符合单一职责</p></blockquote><p>所以说，单一职责的范围，取决于我们的业务范围</p><p>所以我们代码是否单一，都是基于当前的业务来说的，我们要维护代码符合该原则，就需要不断地持续重构</p><blockquote><p>我们可以先写一个粗粒度的类，满足业务需求。随着业务的发展，如果粗粒度的类越来越庞大，代码越来越多，这个时候，我们就可以将这个粗粒度的类，拆分成几个更细粒度的类。这就是所谓的持续重构</p></blockquote><p>那么基于当前编程界的实际经验，我们有哪些清晰的原则判断是否符合单一原则呢？</p><p>我们可以从以下方面判断</p><blockquote><p>类中的代码行数、函数或属性过多，会影响代码的可读性和可维护性，我们就需要考虑对类进行拆分；</p><p>类依赖的其他类过多，或者依赖类的其他类过多，不符合高内聚、低耦合的设计思想，我们就需要考虑对类进行拆分；</p><p>私有方法过多，我们就要考虑能否将私有方法独立到新的类中，设置为 public 方法，供更多的类使用，从而提高代码的复用性；</p><p>比较难给类起一个合适名字，很难用一个业务名词概括，或者只能用一些笼统的 Manager、Context 之类的词语来命名，这就说明类的职责定义得可能不够清晰；</p><p>类中大量的方法都是集中操作类中的某几个属性，比如，在 UserInfo 例子中，如果一半的方法都是在操作 address 信息，那就可以考虑将这几个属性和对应的方法拆分出来。</p></blockquote><h2 id="我们设计的类越单一就一定越好吗？"><a href="#我们设计的类越单一就一定越好吗？" class="headerlink" title="我们设计的类越单一就一定越好吗？"></a>我们设计的类越单一就一定越好吗？</h2><p>实际上并非如此，单一的范围是有限度的，我们将单一职责的规定过于细化的时候，想让每一个小功能都更单一时候，会适得其反，导致代码易用性遭到破坏。</p><p>我们设计的时候，把一些其中功能相关性较大的类，为了单一职责，而把其拆开为多个类。反而导致代码内聚性和可维护性减低。</p><p>所以说，我们是否要设置的更加单一，还是要以实际的操作和功能来判断</p><blockquote><p>不管是应用设计原则还是设计模式，最终的目的还是提高代码的可读性、可扩展性、复用性、可维护性等。我们在考虑应用某一个设计原则是否合理的时候，也可以以此作为最终的考量标准</p><p>单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、低耦合。但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/article/171771?screen=full">15 | 理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？ (geekbang.org)</a></p><p><a href="https://baike.baidu.com/item/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/9456515?fr=aladdin">单一职责原则_百度百科 (baidu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六大原则之外的设计原则|设计原则</title>
      <link href="/2022/10/10/liu-da-yuan-ze-zhi-wai-de-she-ji-yuan-ze/"/>
      <url>/2022/10/10/liu-da-yuan-ze-zhi-wai-de-she-ji-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="六大原则之外的设计原则-设计原则"><a href="#六大原则之外的设计原则-设计原则" class="headerlink" title="六大原则之外的设计原则|设计原则"></a>六大原则之外的设计原则|设计原则</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第12天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>设计原则系列文章</p><p><a href="https://juejin.cn/post/7149189472368721934">单一职责原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149927872331776031">里氏替换原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150923846386712612">迪米特原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152528995723149326">六大原则之外的设计原则|设计原则 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>已学习六大设计原则</li><li>了解设计模式基础</li><li>有项目经历</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面的几篇设计原则文章中，我们分别讲述了经典的六大设计原则。但是事实上，我们在开发中还有几个重要的设计原则，在这篇文章中，一并给大家讲述。</p><p>这几个原则分别是 <strong>KISS 原则</strong>、<strong>YAGNI 原则</strong>、<strong>DRY 原则</strong> 。</p><p>下面，本文将逐个阐述这几个原则的重点，以及不同。</p><h2 id="KISS-原则"><a href="#KISS-原则" class="headerlink" title="KISS 原则"></a>KISS 原则</h2><p>KISS 原则，其英文阐述是：<strong>Keep It Simple and Stupid.</strong> </p><p>译为中文就是：<strong>尽量保持简单</strong>。</p><h3 id="什么尽量保持简单？如何界定简单？"><a href="#什么尽量保持简单？如何界定简单？" class="headerlink" title="什么尽量保持简单？如何界定简单？"></a>什么尽量保持简单？如何界定简单？</h3><p>事实上，KISS 原则是较为广泛的原则，譬如其应用在建筑上面叫做轻奢，而应用在手机设计上面叫做极简风，他们所遵循的都是简单原则。</p><p>那么在编程中的 KISS 原则，具体讲的是什么的简单呢？ </p><p>可能有人对此做严格定义，代码行数少的、或者说逻辑简单的，就是符合KISS 原则。但实际上，KISS 原则和之前的设计原则一样，都是 <strong>具体问题具体分析的</strong>，在<strong>不同的业务场景下</strong>判定是否符合 KISS 原则的<strong>标准也是不同的</strong>。</p><p>而判断是否符合 KISS 原则，有以下两条标准</p><ul><li><strong>一般情况下，逻辑简单、实现难度小、可读性好的代码，符合 KISS 原则</strong>。由于软件开发往往是会有时限的，所以我们都会需要追求性能和时间的平衡。那么基于这一点，我们认为业务代码的实现<strong>有 Java包 或者 现成库 的，直接调用来实现业务即可</strong>；这样子的代码便是逻辑简单，实现难度小的代码，同时使用这些方法也会让我们的代码可读性较好。若没有可调用的类库，我们再做简单的处理即可。</li><li><strong>而当业务问题本身就复杂且重要的时候，我们的代码逻辑复杂是遵循 KISS 原则的体现。因为复杂的问题就是要用复杂的方法来解决。</strong>但是我们要界定清楚该问题是否为主要影响系统的问题，用复杂的方法解决该问题<strong>是否能大幅提高我们系统的性能</strong>；如果不能，那使用复杂的逻辑来解决这个问题<strong>就不符合 KISS 原则</strong>了，那倒不如使用快捷的类库性价比高，而不是自己编写的某种高性能的算法。</li></ul><h3 id="如何编写满足-KISS-原则的代码？"><a href="#如何编写满足-KISS-原则的代码？" class="headerlink" title="如何编写满足 KISS 原则的代码？"></a>如何编写满足 KISS 原则的代码？</h3><p>那么我们应该如何编写满足 KISS 原则的代码呢？我们在日常开发中注意以下几点即可。</p><ol><li>不要重复造轮子。使用语言自带的类库或者业内著名的开源库，实现业务的性价比是最高的，出错几率小也易于维护。</li><li>统一开发的技术栈。不要使用合作者不熟悉的技术或者领域开发，要统一团队的开发水平和能力范围，才不会出现你认为简单，我认为复杂、可读性差的问题。</li><li>不要过度优化。过度优化会造成代码可读性变差，且浪费时间。</li><li>Code Review 。团队内定期 Code Review 可以发现很多问题。合作者认为你的代码不简单，难以阅读。那99%确定你的代码不符合 KISS 原则，不够简单了。</li></ol><h2 id="YAGNI-原则"><a href="#YAGNI-原则" class="headerlink" title="YAGNI 原则"></a>YAGNI 原则</h2><p>YAGNI 原则，其英文阐述是：<strong>You Ain’t Gonna Need It</strong></p><p>直译是：你不需要它。其意义是：<strong>不要去编码设计目前用不到的功能或代码</strong>，其核心意思是：<strong>不要过度设计</strong></p><p>这个含义，好像和上面的 KISS 原则含义接近，那他们之间<strong>有何不同</strong>呢？</p><p>这两个含义其实是不同的。<strong>KISS 原则讲的是 “如何做”，如何尽量保持简单；而 YAGNI 原则讲的是“要不要做”，目前不需要的就不要做</strong>。</p><p>这个原则<strong>如何应用呢？</strong>例如，我在建立项目框架的时候，会提前引入大量的开源库，我是凭借经验引入的，<strong>这样子是违背 YAGNI 原则</strong>了。但当设计 <code>EventBus</code> 消息类的时候，我预测以后会有不同的消息类需要发送；虽然我不清楚是什么消息类，但是我对目前的功能做了抽象，预留了拓展接口。<strong>这样子是遵守了 YAGNI 原则</strong>。我们可以看到，前者属于过度设计，但是后者却并未过度设计。</p><h2 id="DRY-原则"><a href="#DRY-原则" class="headerlink" title="DRY 原则"></a>DRY 原则</h2><p>DRY 原则，其英文阐述是：<strong>Don’t Repeat Yourself</strong></p><p>直译过来是：不要重复你自己。意思就是：<strong>不要写重复的代码</strong>。</p><p>那么问题来了，哪种算重复的代码 ？</p><h3 id="不要写哪种重复的代码？"><a href="#不要写哪种重复的代码？" class="headerlink" title="不要写哪种重复的代码？"></a>不要写哪种重复的代码？</h3><p>重复包括 <strong>实现逻辑的重复</strong> 、<strong>功能语义的重复</strong>、<strong>代码执行的重复</strong></p><ul><li><p><strong>实现逻辑的重复</strong></p><p>实现逻辑的重复指的是：两段代码实现的业务功能不同，但是他们内部实现的代码是一致的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//姓名检查</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkNameInput</span><span class="token punctuation">(</span><span class="token class-name">TextInputLayout</span> textInputLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"输入内容超过上限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"最少2位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//Id检查</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkIdInput</span><span class="token punctuation">(</span><span class="token class-name">TextInputLayout</span> textInputLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"输入内容超过上限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"最少2位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如上方的两端代码，他们内部实现的逻辑是一样的，<strong>但是他们不违背 DRY 原则</strong> 。因为他们的功能是不同的，一个是姓名检查，一个是Id检查。我们也无需将他们合并为一个函数，因为我们的业务随时可能变化，Id检查功能检测的输入上线有可能是要变化的，现在将其合并之后很可能还要重新拆解他们。而想减少重复的代码，做其他更细粒度的功能拆解，再使得他们组合完成一个大功能即可。</p></li><li><p><strong>功能语义的重复</strong></p><p>功能语义的重复指的是：虽然他们内部实现的代码是不同的，但是两段代码实现的业务功能是相同的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//姓名检查</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkNameInput</span><span class="token punctuation">(</span><span class="token class-name">TextInputLayout</span> textInputLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"输入内容超过上限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"最少2位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//姓名检查</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">nameInputCheck</span><span class="token punctuation">(</span><span class="token class-name">TextInputLayout</span> textInputLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>；    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"最少2位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>textInputLayout<span class="token punctuation">.</span><span class="token function">getEditText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        textInputLayout<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"输入内容超过上限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两个函数的名称和实现逻辑都不同，<strong>但是他们违背了 DRY 原则</strong>。由于他们实现的是同一个功能，也许是出自两个工程师之手，但是我们必须更改，将其统一为使用同一个函数。因为也许后续业务需求的更改，需要更改这个功能，但是由于有两个不同的实现，我们很可能忘记某个更改某个实现，<strong>导致出现业务更替不全面出现bug</strong>。</p></li><li><p><strong>代码执行的重复</strong></p><p>代码执行的重复指的是：原本只需要某个功能一次的代码，出现了重复执行的问题。</p><p>这个重复就不做代码解释了，相信大家都容易理解。<strong>这种重复也算违背了 DRY 原则</strong>，因为重复的代码如果是IO操作或者说网络操作，那么对系统执行时间的影响就会非常大，<strong>这时候我们就需要重构除去这种重复</strong>。</p></li></ul><p>由上述可知，<strong>功能语义的重复、代码执行的重复 都是违反 DRY 原则的</strong></p><h3 id="何为代码复用？"><a href="#何为代码复用？" class="headerlink" title="何为代码复用？"></a>何为代码复用？</h3><p>我们上面说了那么多代码重复，那么和我们常说的 代码复用 又冲突么？还有，代码复用性又是什么呢？</p><p><strong>代码复用</strong>：一种行为，在开发新功能的时候，尽量复用已经存在的代码</p><p><strong>代码复用性</strong>：表示一段代码可被复用的特性或能力，我们编码时候需要让代码尽量可复用</p><p><strong>复用性和复用是不同的</strong>，前者是从代码开发者的角度来看的，后者是从使用者角度来看的。</p><p><strong>“不重复”并不代表“可复用“</strong>。DRY 中强调不重复，但不一定就说里面的代码一定可复用。所以说这是两个概念的东西</p><p><strong>那如何提高代码可复用性呢？</strong></p><blockquote><ul><li><p>减少代码耦合</p><p>对于高度耦合的代码，当我们希望复用其中的一个功能，想把这个功能的代码抽取出来成为一个独立的模块、类或者函数的时候，往往会发现牵一发而动全身。移动一点代码，就要牵连到很多其他相关的代码。所以，高度耦合的代码会影响到代码的复用性，我们要尽量减少代码耦合。</p></li><li><p>满足单一职责原则</p><p>我们前面讲过，如果职责不够单一，模块、类设计得大而全，那依赖它的代码或者它依赖的代码就会比较多，进而增加了代码的耦合。根据上一点，也就会影响到代码的复用性。相反，越细粒度的代码，代码的通用性会越好，越容易被复用。</p></li><li><p>模块化</p><p>这里的“模块”，不单单指一组类构成的模块，还可以理解为单个类、函数。我们要善于将功能独立的代码，封装成模块。独立的模块就像一块一块的积木，更加容易复用，可以直接拿来搭建更加复杂的系统。</p></li><li><p>业务与非业务逻辑分离</p><p>越是跟业务无关的代码越是容易复用，越是针对特定业务的代码越难复用。所以，为了复用跟业务无关的代码，我们将业务和非业务逻辑代码分离，抽取成一些通用的框架、类库、组件等。</p></li><li><p>通用代码下沉</p><p>从分层的角度来看，越底层的代码越通用、会被越多的模块调用，越应该设计得足够可复用。一般情况下，在代码分层之后，为了避免交叉调用导致调用关系混乱，我们只允许上层代码调用下层代码及同层代码之间的调用，杜绝下层代码调用上层代码。所以，通用的代码我们尽量下沉到更下层。</p></li><li><p>继承、多态、抽象、封装</p><p>在讲面向对象特性的时候，我们讲到，利用继承，可以将公共的代码抽取到父类，子类复用父类的属性和方法。利用多态，我们可以动态地替换一段代码的部分逻辑，让这段代码可复用。除此之外，抽象和封装，从更加广义的层面、而非狭义的面向对象特性的层面来理解的话，越抽象、越不依赖具体的实现，越容易复用。代码封装成模块，隐藏可变的细节、暴露不变的接口，就越容易复用。</p></li><li><p>应用模板等设计模式</p><p>一些设计模式，也能提高代码的复用性。比如，模板模式利用了多态来实现，可以灵活地替换其中的部分代码，整个流程模板代码可复用。</p><p>除了刚刚我们讲到的几点，还有一些跟编程语言相关的特性，也能提高代码的复用性，比如泛型编程等。实际上，除了上面讲到的这些方法之外，复用意识也非常重要。在写代码的时候，我们要多去思考一下，这个部分代码是否可以抽取出来，作为一个独立的模块、类或者函数供多处使用。在设计每个模块、类、函数的时候，要像设计一个外部 API 那样，去思考它的复用性。</p></li></ul><p>tips：第一次编写代码的时候，我们不考虑复用性；第二次遇到复用场景的时候，再进行重构使其复用。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/article/179607">21 | 理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？ (geekbang.org)</a></p><p><a href="https://time.geekbang.org/column/article/177448">20 | 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？ (geekbang.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口隔离原则|设计原则</title>
      <link href="/2022/10/10/jie-kou-ge-chi-yuan-ze/"/>
      <url>/2022/10/10/jie-kou-ge-chi-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="接口隔离原则-设计原则"><a href="#接口隔离原则-设计原则" class="headerlink" title="接口隔离原则|设计原则"></a>接口隔离原则|设计原则</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第6天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>设计原则系列文章</p><p><a href="https://juejin.cn/post/7149189472368721934">单一职责原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149927872331776031">里氏替换原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150923846386712612">迪米特原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152528995723149326">六大原则之外的设计原则|设计原则 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>了解单一职责原则  <a href="https://juejin.cn/post/7149189472368721934">单一职责原则|设计原则 - 掘金 (juejin.cn)</a></li><li>熟悉使用面向对象中的接口</li><li>有项目开发经历</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天为大家带来的依旧是 <strong>设计原则</strong> 的知识： <strong>接口隔离原则</strong></p><p>首先老规矩，先上百度的定义</p><blockquote><p><strong>定义</strong>：</p><p>一个类对另外一个类的依赖性应当是建立在最小的接口上的。</p><p>一个接口代表一个角色，不应当将不同的角色都交给一个接口。没有关系的接口合并在一起，形成一个臃肿的大接口，这是对角色和接口的污染。</p></blockquote><p>英文版的解释是这样的</p><blockquote><p>Clients should not be forced to depend upon interfaces that they do not use.</p></blockquote><p>结合上下两个定义，我们可以得出。接口隔离原则的意思大致为：<strong>服务调用者不该依赖与自己业务无关的接口</strong></p><p>这时候我们会发现，这个定义似乎和 <strong>单一职责原则</strong> 相类似。单一职责所说的是 <strong>一个类或者模块只承担一个职责</strong> ，而接口隔离也是强调<strong>不依赖与自身无关的东西</strong>。这两者确实是十分类似，但是本质上又是不同的。</p><p>具体哪里不同，我们先不着急回答，我们先看看接口隔离原则的具体应用和其优势。深入了解之后，我们就能知晓两者的不同了。</p><h2 id="如何进行接口隔离？"><a href="#如何进行接口隔离？" class="headerlink" title="如何进行接口隔离？"></a>如何进行接口隔离？</h2><p>对于接口的隔离，我们首先要明确我们所描述的接口是什么。</p><p>在技术圈，我们有很多种接口，除去物理接口不谈，我们有 SDK、JDK 里面的给我们调用的函数调用接口，有网络的 API接口，有面向对象定义的接口特性，甚至我们说写的函数也可称之为接口。</p><p>这么多的接口，事实上都适合于应用 <strong>接口隔离原则</strong> ，这些称之为接口的各种特性，他们事实上都可认定为一种协议。而对协议做<strong>单一化的规范</strong>，就是 接口隔离原则的任务所在。</p><p>下面让我们从 <strong>面向对象的接口</strong> 来举例说明，我们该如何进行接口隔离</p><p>假设我们有两个类，学生类和打字员类，学生要实现 <code>homeWork()</code> 方法，打字员要实现 <code>printWork()</code> 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonWork</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">homeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">printWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">PersonWork</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">homeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//空实现</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintPerson</span> <span class="token keyword">implements</span> <span class="token class-name">PersonWork</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">homeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//空实现</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，我们写了一个 <strong>PersonWork</strong> 接口，包括了两个抽象方法，然后对应的学生类和打字员类都来实现这个接口。</p><p>我们发现以上代码有以下的缺点</p><ol><li>不利于接口拓展，修改了一个接口，就得修改多处原本已实现的地方</li><li>实现类继承了无用的方法，导致做无用工</li><li>影响代码可读性，一个大而全的接口类，无法表明清楚接口的特性</li></ol><p>所以我们可以进行如下改造，使得符合 <strong>接口隔离原则</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonHomeWork</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">homeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonPrintWork</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">printWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">PersonHomeWork</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">homeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintPerson</span> <span class="token keyword">implements</span> <span class="token class-name">PersonPrintWork</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将上述的对应不同功能类的接口独立开，然后需要实现对应功能的类再实现对应的接口。这样子就符合了 <strong>接口隔离原则</strong> ，</p><p>上述的3个缺点也顺应的解决了。当我们想要拓展的时候，直接定义一个新的接口，进行接口多继承即可。</p><h2 id="接口隔离和单一职责的区别"><a href="#接口隔离和单一职责的区别" class="headerlink" title="接口隔离和单一职责的区别"></a>接口隔离和单一职责的区别</h2><p>通过上文，想必你已清楚接口隔离所对应的范围与单一职责是不同的。那么我们可以总结出以下的不同点</p><ol><li>应用范围的不同，接口隔离针对的是接口职责是否单一，而单一职责针对的是类或者模块</li><li>判断对象的不同，接口隔离原则判断是否单一的对象是接口调用者，而单一职责原则判断是否单一的对象是较为抽象的业务以及其自身</li></ol><p>到此，我们就回答完了前面抛出的问题，也深入理解了该原则</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/article/177442?screen=full">18 | 理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？ (geekbang.org)</a></p><p><a href="https://blog.csdn.net/qq_34222160/article/details/123560680">六大设计模式原则-接口隔离原则_晴天的空间的博客-CSDN博客_接口隔离原则</a></p><p><a href="https://baike.baidu.com/item/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/3104602?fr=aladdin">接口隔离原则_百度百科 (baidu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>里氏替换原则|设计原则</title>
      <link href="/2022/10/10/li-shi-ti-huan-yuan-ze/"/>
      <url>/2022/10/10/li-shi-ti-huan-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="里氏替换原则-设计原则"><a href="#里氏替换原则-设计原则" class="headerlink" title="里氏替换原则|设计原则"></a>里氏替换原则|设计原则</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第5天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>设计原则系列文章</p><p><a href="https://juejin.cn/post/7149189472368721934">单一职责原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149927872331776031">里氏替换原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150923846386712612">迪米特原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152528995723149326">六大原则之外的设计原则|设计原则 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有项目编写经历</li><li>做过代码的功能拓展</li><li>听说过设计模式</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文继续带大家学习 <strong>里氏替换原则</strong></p><p>里氏替换原则 <strong>定义</strong></p><p>里氏替换原则的内容可以描述为： “派生类（子类）对象可以在程序中代替其基类（超类）对象。” </p><p>上述解释来自百度，应该是机器直译的，所以听起来会较为抽象</p><p>下面我们可以看一下英文版本的描述</p><blockquote><p>If S is a subtype of T, then objects of type T may be replaced with objects of type S, without breaking the program。</p></blockquote><blockquote><p>Functions that use pointers of references to base classes must be able to use objects of derived classes without knowing it。</p></blockquote><p>其意思大致就是 <strong>子类可以扩展父类的功能，但不能改变父类原有的功能</strong>。</p><p>也可以做如下解释(From:<a href="https://time.geekbang.org/column/article/177110?screen=full">里式替换LSP</a>)</p><blockquote><p>子类对象（object of subtype/derived class）能够替换程序（program）中父类对象（object of base/parent class）出现的任何地方，并且保证原来程序的逻辑行为（behavior）不变及正确性不被破坏</p></blockquote><p>乍一看，这个描述和多态极为相似，但是实际上，它们两者还是有着本质的区别的。</p><p>下文我们进行详细的分析</p><h2 id="里氏替换原则的重点"><a href="#里氏替换原则的重点" class="headerlink" title="里氏替换原则的重点"></a>里氏替换原则的重点</h2><p>里氏替换原则中，其特性是子类是可以替换父类，但是它更重要的是对该原则的限制，那就是<strong>保证原有程序的逻辑或者说正确性不遭受破坏</strong>。</p><p>如何保证正确性不受破坏？</p><ol><li>不得违反父类要实现的功能</li><li>不得违反父类的输入输出类型和范围</li><li>不得违反父类的注释说明</li></ol><p>大致做到以上3点，遵从父类的约定，就可以保证原有程序不遭受破坏了</p><blockquote><p>里式替换原则是用来指导，继承关系中子类该如何设计的一个原则。理解里式替换原则，最核心的就是理解“design by contract，按照协议来设计”这几个字。父类定义了函数的“约定”（或者叫协议），那子类可以改变函数的内部实现逻辑，但不能改变函数原有的“约定”。这里的约定包括：函数声明要实现的功能；对输入、输出、异常的约定；甚至包括注释中所罗列的任何特殊说明</p></blockquote><h2 id="里氏替换原则与多态的不同"><a href="#里氏替换原则与多态的不同" class="headerlink" title="里氏替换原则与多态的不同"></a>里氏替换原则与多态的不同</h2><p>从代码实现的层面来看，里氏替换原则和面向对象中的多态是很相似的，我们要理清他们的不同需要从他们的设计初衷的角度来看。</p><p>多态：是一种面向对象语言的特性，实现代码的一种方式。</p><p>里氏替换原则：一种编程的设计模式，主要用于指导和规范子类的设计</p><blockquote><p>虽然从定义描述和代码实现上来看，多态和里式替换有点类似，但它们关注的角度是不一样的。多态是面向对象编程的一大特性，也是面向对象编程语言的一种语法。它是一种代码实现的思路。而里式替换是一种设计原则，用来指导继承关系中子类该如何设计，子类的设计要保证在替换父类的时候，不改变原有程序的逻辑及不破坏原有程序的正确性。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/article/177110?screen=full">17 | 理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？ (geekbang.org)</a></p><p><a href="https://baike.baidu.com/item/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/3744239">里氏替换原则_百度百科 (baidu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>依赖反转原则|设计原则</title>
      <link href="/2022/10/10/yi-lai-fan-zhuan-yuan-ze/"/>
      <url>/2022/10/10/yi-lai-fan-zhuan-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖反转原则-设计原则"><a href="#依赖反转原则-设计原则" class="headerlink" title="依赖反转原则|设计原则"></a>依赖反转原则|设计原则</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第7天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>设计原则系列文章</p><p><a href="https://juejin.cn/post/7149189472368721934">单一职责原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149927872331776031">里氏替换原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150923846386712612">迪米特原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152528995723149326">六大原则之外的设计原则|设计原则 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>了解开闭原则   <a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则</a></li><li>了解设计模式基础</li><li>有项目经历</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文带大家学习 <strong>依赖反转原则</strong></p><p>依赖反转也称为<strong>依赖倒置</strong>，它的定义是十分抽象的。</p><p>首先我们看一下它的英文释义：</p><blockquote><p>High-level modules shouldn’t depend on low-level modules. Both modules should depend on abstractions. In addition, abstractions shouldn’t depend on details. Details depend on abstractions.</p></blockquote><p>将上文翻译之后，其含义是这样子的：</p><blockquote><p><strong>高层模块</strong>不要依赖<strong>低层模块</strong>。高层模块和低层模块应该通过<strong>抽象</strong>来互相依赖。除此之外，<strong>抽象</strong>不要依赖具体<strong>实现细节</strong>，具体<strong>实现细节</strong>依赖抽象</p></blockquote><p>初看这个定义，会觉得很绕，啥是高层模块，啥是低层模块？怎么又通过抽象来相互依赖？等等的这些问题，让我们难以理解上文的释义</p><p>下文我们将对此进行介绍和举例，同时介绍与其相近的控制反转，以及依赖注入，相信阅读之后，你对依赖反转会有更深的理解</p><h2 id="依赖反转"><a href="#依赖反转" class="headerlink" title="依赖反转"></a>依赖反转</h2><p>理解 <strong>依赖反转</strong> 的定义，首先我们回答一下几个问题。</p><ul><li><p>何为高层模块、低层模块？</p><p>高层模块我们可以理解为<strong>调用方</strong>，而低层模块则理解为<strong>被调用方</strong>。</p></li><li><p>如何通过抽象来相互依赖？</p><p>即调用者与被调用者之间无直接依赖关系，而是两者都遵从某种协议、某些抽象类、或是某些接口</p></li><li><p>如何只由实现细节依赖抽象？</p><p>这一点是符合抽象的定义的，抽象只负责顶层指导，而由对应的继承者来实现这些抽象</p></li></ul><p>解释完上面的问题，我们会发现，这个依赖反转原则与“<strong>基于接口而非实现编程</strong>”有些类似。事实上，该原则的核心就是“<strong>基于接口而非实现编程</strong>”。依赖反转通俗来说就是，<strong>把高层依赖低层反转一下，变成高层底层都依赖抽象</strong>。</p><p>但是，<strong>依赖倒置原则</strong> 在业务开发中并不常见，因为业务开发中 <strong>高层模块直接依赖低层模块</strong> 是极为常用且正常的。更多的是使用到其核心，“<strong>基于接口而非实现编程</strong>”。<strong>依赖倒置原则更侧重与指导框架的设计</strong>，例如我在 <a href="https://juejin.cn/post/7132874564014931999">带你封装MVP架构(下)</a> 一文中，就使用到了依赖倒置原则。</p><p>相关的依赖倒置举例如下</p><p><strong>Tomcat</strong></p><blockquote><p>Tomcat 是运行 Java Web 应用程序的容器。我们编写的 Web 应用程序代码只需要部署在 Tomcat 容器下，便可以被 Tomcat 容器调用执行。按照之前的划分原则，Tomcat 就是高层模块，我们编写的 Web 应用程序代码就是低层模块。Tomcat 和应用程序代码之间并没有直接的依赖关系，两者都依赖同一个“抽象”，也就是 Servlet 规范。Servlet 规范不依赖具体的 Tomcat 容器和应用程序的实现细节，而 Tomcat 容器和应用程序依赖 Servlet 规范。</p></blockquote><p><strong>Room封装使用</strong></p><blockquote><p>数据库案例也符合<code>依赖倒置原则</code>，高层模块(业务层)不依赖于低层模块(SQLiteDao/RoomDao),而是依赖于抽象(IDao)——开闭原则设计</p></blockquote><h2 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h2><p><strong>控制反转</strong> 缩写为IOC(Inversion Of Control)，简单解释其意思为：<strong>把控制权反转过来</strong></p><p>具体是把控制权从谁手中反转过来呢？从程序员手中。那反转到谁那里呢，反转到代码框架那里。</p><p>这个概念的本意是，程序员在编写代码的时候，编写了设置了整个代码流程，此时控制权在程序员手中。</p><p>当对代码抽象框架化，代码拓展性提高，且最终由框架实现代码流程。程序员只输入少量代码启动代码流程，这个就是符合控制反转思想。</p><blockquote><p>框架提供了一个可扩展的代码骨架，用来组装对象、管理整个执行流程。程序员利用框架进行开发的时候，只需要往预留的扩展点上，添加跟自己业务相关的代码，就可以利用框架来驱动整个程序流程的执行。</p></blockquote><p>但是<strong>控制反转只是一种设计思想</strong>，具体的实现方式各式各样。前文 <strong>开闭原则</strong> 的demo中，其设计也是符合控制反转原则的，最终是由框架自行驱动程序。</p><p>对应的，<code>LiveData</code> 也是一种控制反转思想的变体，与 <code>MVP</code> 的由 <code>P层</code> 驱动 <code>View</code> 层一样，使用数据驱动 UI。</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p><strong>依赖注入</strong> 与控制反转不同的是，<strong>依赖注入是一种实现控制反转的具体方法</strong>。</p><p>其意思为：<strong>把被依赖项通过参数等的形式，注入到类中</strong></p><p>具体实现如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ImageGetter</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> imageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureStore</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">ImageGetter</span> imageGetter<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PictureStore</span><span class="token punctuation">(</span><span class="token class-name">ImageGetter</span> imageGetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageGetter <span class="token operator">=</span> imageGetter<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">imageGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> imageUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageGetter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>imageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 从aliyun获取</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliyunGetter</span> <span class="token keyword">implements</span> <span class="token class-name">ImageGetter</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> imageUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//....</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 从Tencent云获取</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TecentGetter</span> <span class="token keyword">implements</span> <span class="token class-name">ImageGetter</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> imageUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//....</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用图床类</span><span class="token class-name">ImageGetter</span> imageGetter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TecentGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PictureStore</span> pictureStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureStore</span><span class="token punctuation">(</span>imageGetter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//依赖注入</span>pictureStore<span class="token punctuation">.</span><span class="token function">imageGet</span><span class="token punctuation">(</span><span class="token string">"https://..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述的demo就是实现了依赖注入，把被调用的类通过构造函数注入了对应的类中。对应的控制、代码流程已经反转到框架来实现，所以说，依赖注入实现了控制反转，且其为控制反转的一种重要实现方式。</p><p>但是我们也发现了，虽然说控制权反转给了框架，程序员只需做对应的拓展和启动。但是终究这个框架还是要我们自己来实现，当项目变大的时候，我们还是会容易出错的，所以后端开发中常使用 <code>spring boot</code> 这种控制反转容器。这类称之为，<strong>依赖注入的框架</strong>，在Android中，我们也有常用的依赖注入框架，帮助我们更好的做依赖注入。<strong>Dagger2</strong> 就是 Google 开发的一款依赖注入框架，大家可自行了解。</p><h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><p>依赖反转原则是一种设计原则，与控制反转类似，都是框架层面的设计指导。只不过两者作用的对象不同，一个是依赖方，一个是控制权。</p><p>而依赖注入则纯为一种<strong>实现控制反转的方法</strong>，是一种规定好的技巧形式。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6968673763218964493">如何学好设计，做好架构？ - 掘金 (juejin.cn)</a></p><p><a href="https://time.geekbang.org/column/article/177444?screen=full">19 | 理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？ (geekbang.org)</a></p><p><a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventBus封装到项目架构|青训营笔记</title>
      <link href="/2022/10/10/ru-he-feng-zhuang-eventbus/"/>
      <url>/2022/10/10/ru-he-feng-zhuang-eventbus/</url>
      
        <content type="html"><![CDATA[<h1 id="EventBus封装到项目架构"><a href="#EventBus封装到项目架构" class="headerlink" title="EventBus封装到项目架构"></a>EventBus封装到项目架构</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第9天</strong></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>EventBus的基本使用 ：<a href="https://mp.weixin.qq.com/s/ZihYJ-9IuechILKIMavh6A">探索Android开源框架 - 5. EventBus使用及源码解析 (qq.com)</a></li><li>使用注解器 ：<a href="http://shusheng007.top/2021/09/09/019/">秒懂Android注解处理器（Android Annotation Processor） - ShuSheng007</a></li><li>会自己定义Application</li></ul><h2 id="封装过程"><a href="#封装过程" class="headerlink" title="封装过程"></a>封装过程</h2><p>封装该库到自己的项目的目的有两个</p><ol><li>便捷绑定和解绑 EventBus</li><li>便捷通过 EventBus 发送消息和处理消息</li><li>代码美观</li></ol><p>基于上面的目的，我们可以利用 <code>注解</code> 、编写 <code>工具类</code> 、<code>封装到基类</code> 和 <code>抽象消息类</code> 来实现</p><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><p>我们先引入对应的依赖</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//build.gradle(:app)</span>defaultConfig <span class="token punctuation">{</span>    <span class="token punctuation">...</span>    javaCompileOptions <span class="token punctuation">{</span>        annotationProcessorOptions <span class="token punctuation">{</span>            <span class="token comment">//此处路径填写自己的包名+类名</span>            arguments <span class="token operator">=</span> <span class="token punctuation">[</span> eventBusIndex <span class="token punctuation">:</span> <span class="token string">'com.qxy.potato.MyEventBusIndex'</span> <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">...</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    <span class="token punctuation">...</span>    <span class="token comment">//eventBus</span>    <span class="token keyword">def</span> eventbus_version <span class="token operator">=</span> <span class="token string">'3.2.0'</span>    implementation <span class="token string gstring">"org.greenrobot:eventbus:<span class="token expression"><span class="token punctuation">$</span>eventbus_version</span>"</span>    annotationProcessor <span class="token string gstring">"org.greenrobot:eventbus-annotation-processor:<span class="token expression"><span class="token punctuation">$</span>eventbus_version</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面引入了 <code>EventBus的注解器</code>，该注解器可以帮忙生成 <code>索引</code>，大幅度提高EventBus的使用效率</p><p><img src="https://upload-images.jianshu.io/upload_images/12032751-81dfc6670555ee40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/864/format/webp"></p><p>由上图可知，使用了注解可以利用索引的 EventBus ，效率是可以大幅度提升的，所以我们是很有必要去利用EventBus的索引类</p><p>使用索引的时候，我们需要注意如下点</p><blockquote><p><strong>索引要求</strong></p><ul><li>@Subscribe方法及其类<strong>必须是公共的</strong>。</li><li>事件类<strong>必须是公共的</strong>。</li><li>@Subscribe<strong>不能****在匿名类内部</strong>使用。</li></ul><p><strong>注意：</strong> 当 EventBus 无法使用索引时，例如，如果不满足上述要求，它将在运行时回退到反射。这可确保@Subscribe方法接收事件，即使它们不是索引的一部分。</p><p>Translate from <a href="https://greenrobot.org/eventbus/documentation/subscriber-index/">Subscriber Index - Open Source by greenrobot</a></p></blockquote><h3 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventBusUtil</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 发送消息(事件)     * @param event     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">BaseEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 发送 粘性 事件     *     * 粘性事件，在注册之前便把事件发生出去，等到注册之后便会收到最近发送的粘性事件（必须匹配）     * 注意：只会接收到最近发送的一次粘性事件，之前的会接受不到。     * @param event     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendStickyEvent</span><span class="token punctuation">(</span><span class="token class-name">BaseEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postSticky</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写注解类"><a href="#编写注解类" class="headerlink" title="编写注解类"></a>编写注解类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">BindEventBus</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Base封装"><a href="#Base封装" class="headerlink" title="Base封装"></a>Base封装</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> eventCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BaseEvent</span><span class="token punctuation">(</span><span class="token keyword">int</span> eventCode<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eventCode <span class="token operator">=</span> eventCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getEventCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> eventCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEventCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> eventCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eventCode <span class="token operator">=</span> eventCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Fragment也是类似</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">BindEventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">BindEventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成索引类"><a href="#生成索引类" class="headerlink" title="生成索引类"></a>生成索引类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BindEventBus</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 载入view的一些操作     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">PictureGirl</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BaseEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PictureGirl</span><span class="token punctuation">&gt;</span></span> ev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EventBusUtil</span><span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>threadMode <span class="token operator">=</span> <span class="token class-name">ThreadMode</span><span class="token punctuation">.</span>MAIN<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMainActivityEvent</span><span class="token punctuation">(</span><span class="token class-name">BaseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在需要使用到EventBus的对应继承类处添加 <code>@BindEventBus</code> 注解，先实现一个空的事件发送和接收。然后点击 AS 的 build-&gt;Rebuild Project，对项目进行编译。</p><p>编译结束后，我们可以可以在buid类中找到 <code>MyEventBusIndex</code> </p><p><img src="https://pic.lxtlovely.top/blog/20220810102522.png"></p><h3 id="声明添加索引"><a href="#声明添加索引" class="headerlink" title="声明添加索引"></a>声明添加索引</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用订阅索引，加快编译速度</span>        <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndex</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEventBusIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">installDefaultEventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>参照<a href="#%E7%94%9F%E6%88%90%E7%B4%A2%E5%BC%95%E7%B1%BB">上文 生成索引类</a>处的使用，在对应继承类中加入注解，发送消息时候使用 <code>EventBusUtil</code> 工具类即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/rikkatheworld/article/details/105701247">EventBus索引加速探究_RikkaTheWorld的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/25388d6446bf">EventBus索引分析 - 简书 (jianshu.com)</a></p><p><a href="https://greenrobot.org/eventbus/documentation/subscriber-index/">订阅者指数 - Greenrobot 的开源</a></p><p><a href="https://juejin.cn/post/6844903583847022600">EventBus的优雅封装 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View体系(上)|青训营笔记</title>
      <link href="/2022/10/09/view-ti-xi-shang/"/>
      <url>/2022/10/09/view-ti-xi-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="View体系-上-青训营笔记"><a href="#View体系-上-青训营笔记" class="headerlink" title="View体系(上)|青训营笔记"></a>View体系(上)|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第1天</strong></p><p><code>View</code> 体系是较为复杂的，但是又非常重要的一个知识点。我们把这部分知识吃透吃熟是十分必要的，打卡第一天，我把View体系的第一部分知识整理出来，快来和我一起学习吧。</p><h2 id="View树结构"><a href="#View树结构" class="headerlink" title="View树结构"></a>View树结构</h2><p><img src="https://developer.android.com/static/images/viewgroup_2x.png?hl=zh-cn" alt="https://developer.android.com/static/images/viewgroup_2x.png?hl=zh-cn"></p><p>官方给出我们使用的各种布局和各种 <code>View</code> 都是继承自 <code>ViewGroup</code> 、 <code>View</code> 或者他们的派生类。所以，了解View体系是极其重要的任务</p><p>如下图的 <code>View部分继承关系</code> ，我们可以看到常用的 <code>View</code> 组件、布局组件是如何继承的。</p><p><img src="https://img-blog.csdnimg.cn/20190815100748544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAxMjczMzI=,size_16,color_FFFFFF,t_70"></p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>学习 <code>View</code>，首先需要知道 <code>View</code> 的位置在 <code>Android</code> 中是如何定义和测量的。</p><p><img src="https://img-blog.csdn.net/20150115155321445?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFzb24wNTM5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><blockquote><p>上图之中的蓝色和绿色是有着不同作用含义，我们平时使用也是在不同的地方调用</p><p><strong>绿色</strong>：在 <code>View</code> 中获得 <code>View</code> 到其父控件之间的距离</p><p><strong>蓝色</strong>：来自于点击事件 <code>MotionEvent</code> 内部的方法，可以在重写 <code>View</code> 事件分发体系的的三大方法的时候，利用传入的事件调用上图的蓝色方法，获取点击的位置坐标</p></blockquote><h2 id="获取坐标绘制View的滑动"><a href="#获取坐标绘制View的滑动" class="headerlink" title="获取坐标绘制View的滑动"></a>获取坐标绘制View的滑动</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自定义一个View，点击该View可以随意滑动其位置</span><span class="token comment">//下面有5个方法可以实现，其中两个由于理解为移动的是屏幕框，会使得其他元素一起偏移</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoutomView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastX<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastY<span class="token punctuation">;</span>    <span class="token class-name">Scroller</span> mScroller<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CoutomView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">CoutomView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        mScroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">CoutomView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">CoutomView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">)</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>                lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token keyword">int</span> offsetX <span class="token operator">=</span> x <span class="token operator">-</span> lastX<span class="token punctuation">;</span>                <span class="token keyword">int</span> offsetY <span class="token operator">=</span> y <span class="token operator">-</span> lastY<span class="token punctuation">;</span><span class="token comment">//                M1 </span>                <span class="token function">layout</span><span class="token punctuation">(</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetX<span class="token punctuation">,</span><span class="token function">getTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetY<span class="token punctuation">,</span>                        <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetX<span class="token punctuation">,</span><span class="token function">getBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                M2</span><span class="token comment">//                offsetLeftAndRight(offsetX);</span><span class="token comment">//                offsetTopAndBottom(offsetY);</span><span class="token comment">//                M3</span><span class="token comment">//                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)getLayoutParams();</span><span class="token comment">//                layoutParams.leftMargin = getLeft()+offsetX;</span><span class="token comment">//                layoutParams.topMargin = getTop()+offsetY;</span><span class="token comment">//                setLayoutParams(layoutParams);</span><span class="token comment">//                M4 会使得其他元素一起偏移</span><span class="token comment">//                ((View)getParent()).scrollBy(-offsetX,-offsetY);</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * M5     * 提供给Activity调用滑动，也会使得其他元素一起偏移     *      * @param destX      * @param destY     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> destX<span class="token punctuation">,</span><span class="token keyword">int</span> destY<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> scrollX <span class="token operator">=</span> <span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> delta <span class="token operator">=</span> destX <span class="token operator">-</span> scrollX<span class="token punctuation">;</span>        mScroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span>scrollX<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>delta<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2><blockquote><p><strong>区别</strong></p><p>View动画：只展示普通动画效果，响应的点击时间的位置依旧在原来的地方。所以无法左交互效果</p><p>属性动画：利用属性和对象来控制 View ，同时使得动画执行后可交互</p></blockquote><p>属性动画的执行，可以带上属性以及属性参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ObjectAnimator</span> <span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> propertyName<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span>    <span class="token comment">//使用传入</span><span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>coutomView<span class="token punctuation">,</span><span class="token string">"translationX"</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">300f</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h3><p><strong>常用属性</strong></p><ul><li><code>translationX</code> 和 <code>translantionY</code> 沿轴平移</li><li><code>rotatian</code> 、 <code>rotatianX</code> 和 <code>rotatianY</code> 沿着某支点进行旋转</li><li><code>PrivotX</code> 和 <code>PrivotY</code> 可以控制支点位置，围绕支点旋转和缩放，支点默认为中心位置、</li><li><code>alpha</code> 透明度，默认为1，1不透明   0 全透明</li><li><code>x</code>，<code>y</code> View的终点位置</li></ul><blockquote><p>使用 <code>ObjectAnimator</code> 时，要调用某个属性，该属性需要有对应的 <code>get()</code> 和 <code>set()</code> 方法。<strong>若是没有</strong>，我们就需要自定义一个属性类或者包装类添加该方法</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//MainActivity</span><span class="token keyword">val</span> myView <span class="token operator">=</span> <span class="token function">MyView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>button<span class="token punctuation">)</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span>myView<span class="token punctuation">,</span><span class="token string">"width"</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//MyView,给MyView里面的 width 添加一个 set() 和 get() 功能</span><span class="token keyword">class</span> <span class="token function">MyView</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> mTarget<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width<span class="token operator">:</span> Int        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> mTarget<span class="token punctuation">.</span>layoutParams<span class="token punctuation">.</span>width        <span class="token keyword">set</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTarget<span class="token punctuation">.</span>layoutParams<span class="token punctuation">.</span>width <span class="token operator">=</span> width            mTarget<span class="token punctuation">.</span><span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ValueAnimator"><a href="#ValueAnimator" class="headerlink" title="ValueAnimator"></a>ValueAnimator</h3><p>这个方法不提供动画效果，类似数值发生器，你需要根据里面的 <code>AnimatorUpdateListener</code> 来监听数值，设置动画变化</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//传入的值被 a.animatedValue 获取到，根据该值设置做动画</span><span class="token keyword">val</span> animator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            <span class="token function">setTarget</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>button2<span class="token punctuation">)</span>            duration <span class="token operator">=</span> <span class="token number">1000</span>            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            addUpdateListener <span class="token punctuation">{</span> a <span class="token operator">-&gt;</span>                <span class="token keyword">val</span> mFloat <span class="token operator">=</span> a<span class="token punctuation">.</span>animatedValue <span class="token keyword">as</span> Float                binding<span class="token punctuation">.</span>button2<span class="token punctuation">.</span>rotation <span class="token operator">=</span> mFloat                binding<span class="token punctuation">.</span>button2<span class="token punctuation">.</span>translationX <span class="token operator">=</span> <span class="token number">100f</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment">//复杂些的动画</span>binding<span class="token punctuation">.</span>button8<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> anim <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">360f</span><span class="token punctuation">)</span>            anim<span class="token punctuation">.</span><span class="token function">addUpdateListener</span> <span class="token punctuation">{</span> animation <span class="token operator">-&gt;</span>                <span class="token keyword">val</span> angle <span class="token operator">=</span> animation<span class="token punctuation">.</span>animatedValue <span class="token keyword">as</span> Float                binding<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>rotation <span class="token operator">=</span> angle                binding<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>scaleX <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">180</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>angle <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">20f</span>                binding<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>scaleY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">180</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>angle <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">20f</span>                <span class="token keyword">var</span> shift_x <span class="token operator">=</span> <span class="token number">500</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">var</span> shift_y <span class="token operator">=</span> <span class="token number">500</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                binding<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>translationX <span class="token operator">=</span> shift_x                binding<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>translationY <span class="token operator">=</span> shift_y            <span class="token punctuation">}</span>            anim<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">4000</span>            anim<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动画的监听"><a href="#动画的监听" class="headerlink" title="动画的监听"></a>动画的监听</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//完整的监听，四个过程</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>layer<span class="token punctuation">,</span><span class="token string">"alpha"</span><span class="token punctuation">,</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Animator<span class="token punctuation">.</span><span class="token function">AnimatorListener</span><span class="token punctuation">{</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAnimationStart</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> Animator<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"Not yet implemented"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> Animator<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"Not yet implemented"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAnimationCancel</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> Animator<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"Not yet implemented"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAnimationRepeat</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> Animator<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string">"Not yet implemented"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//不完整的监听，匿名类中，重写其中的一个方法</span>ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>layer<span class="token punctuation">,</span><span class="token string">"alpha"</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">1f</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">1f</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">AnimatorListenerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>animation<span class="token operator">:</span> Animator<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAnimationEnd</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            duration <span class="token operator">=</span> <span class="token number">10000</span>            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AnimatorSet-组合动画"><a href="#AnimatorSet-组合动画" class="headerlink" title="AnimatorSet 组合动画"></a>AnimatorSet 组合动画</h3><p>我们可以调用  <code>AnimatorSet</code> 里面的  <code>play()</code> 方法，以及该方法内部的类，就可以完成多个动画的组合展示功能</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//eg,下面的执行顺序是 a3 -&gt; a2 -&gt; a1</span><span class="token keyword">val</span> a1 <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>coutomView<span class="token punctuation">,</span><span class="token string">"translationX"</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">300f</span><span class="token punctuation">,</span><span class="token number">0f</span><span class="token punctuation">)</span><span class="token keyword">val</span> a2 <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>coutomView<span class="token punctuation">,</span><span class="token string">"scaleX"</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token keyword">val</span> a3 <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>coutomView<span class="token punctuation">,</span><span class="token string">"rotationX"</span><span class="token punctuation">,</span><span class="token number">0.0f</span><span class="token punctuation">,</span><span class="token number">90f</span><span class="token punctuation">,</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token keyword">val</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token function">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    duration <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token function">play</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简单展示下对应方法的结构</span><span class="token comment">//play()</span><span class="token keyword">public</span> <span class="token class-name">AnimatorSet<span class="token punctuation">.</span>Builder</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> anim<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>anim <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>anim<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//Builder 结构，对应源码可自行查看</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Stub!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">AnimatorSet<span class="token punctuation">.</span>Builder</span> <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> anim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Stub!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">AnimatorSet<span class="token punctuation">.</span>Builder</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> anim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Stub!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">AnimatorSet<span class="token punctuation">.</span>Builder</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Animator</span> anim<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Stub!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">AnimatorSet<span class="token punctuation">.</span>Builder</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token keyword">long</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Stub!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>after(Animator anim)</code>    当下 <code>Builder</code> 的动画放到传入的动画之后执行</p><p><code>after(long delay)</code>   当下 <code>Builder</code> 的动画延迟指定的毫秒执行</p><p><code>before(Animator anim)</code>    当下 <code>Builder</code> 的动画放到传入的动画之前执行</p><p><code>with(Animator anim)</code>     当下 <code>Builder</code> 的动画与传入的动画并行执行</p></blockquote><p>根据这个属性，浅析一下这段代码的逻辑。<code>play(a1).with(a2).after(a3)</code>，</p><ul><li>首先传入 <code>play()</code> 的是 <code>a1</code> ,会返回一个含有 <code>a1</code> 的<code>Builder</code>对象，我们简称这个对象为 <code>b1</code></li><li>再次调用 <code>with()</code> 传入 <code>a2</code> ，其实就是传入 <code>b1</code> 的 <code>with()</code> 中。那当前动画就是 <code>a1</code> ,传入的是 <code>a2</code> ，两个并行执行。最后会返回  <code>this</code> 即为 <code>b1</code></li><li>最后再调用 <code>after()</code> 传入 <code>a3</code>，也还是 <code>b1</code> 内部的 <code>after()</code> 中。即当前动画还是 <code>a1</code> ,传入的是 <code>a3</code> ，<code>a1</code>  在 <code>a3</code> 后面执行。最后会返回  <code>this</code> 即为 <code>b1</code></li></ul><blockquote><p>所以最终的顺序是 ：<code>a3</code> -&gt; <code>a1</code>/<code>a2</code></p><p>由于这几个方法都是同一个对象内的，所以当前动画 <code>currentNode</code> 是不变的，一直都是 <code>a1</code> 。那么其他需要组合的动画，都还会是以 <code>a1</code> 为主题，看是插入到他的前或者后。</p><p>如果有两个动画是放置与同一个位置，即 <code>play(a1).after(a2).after(a3)</code> 。那么 <code>a2</code> 和 <code>a3</code> 是并行执行的，即顺序为 <code>a2</code> /<code>a3</code> -&gt; <code>a1</code></p></blockquote><h3 id="PropertyValuesHolder-组合动画"><a href="#PropertyValuesHolder-组合动画" class="headerlink" title="PropertyValuesHolder 组合动画"></a>PropertyValuesHolder 组合动画</h3><p>该动画无法实现前后关系，都是并行执行的。用法如下</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> valuesHolder1 <span class="token operator">=</span> PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"scaleX"</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token keyword">val</span> valuesHolder2 <span class="token operator">=</span> PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"rotationX"</span><span class="token punctuation">,</span><span class="token number">0.0f</span><span class="token punctuation">,</span><span class="token number">90.0f</span><span class="token punctuation">,</span><span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token keyword">val</span> valuesHolder3 <span class="token operator">=</span> PropertyValuesHolder<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">"alpha"</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">0.3f</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">)</span>        ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofPropertyValuesHolder</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>coutomView<span class="token punctuation">,</span>valuesHolder1<span class="token punctuation">,</span>valuesHolder2<span class="token punctuation">,</span>valuesHolder3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        duration <span class="token operator">=</span> <span class="token number">2000</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xml-使用属性动画"><a href="#xml-使用属性动画" class="headerlink" title="xml 使用属性动画"></a>xml 使用属性动画</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//aimator.scale.xml<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>objectAnimator</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3000<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>propertyName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scaleX<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>valueFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>valueTo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>valueType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>floatType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>objectAnimator</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">AnimatorInflater<span class="token punctuation">.</span><span class="token function">loadAnimator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>R<span class="token punctuation">.</span>animator<span class="token punctuation">.</span>scale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    <span class="token function">setTarget</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>coutomView<span class="token punctuation">)</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Scroller"><a href="#Scroller" class="headerlink" title="Scroller"></a>Scroller</h2><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[startScroll]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[invalidate]</span> <span class="token arrow operator">--&gt;</span> C<span class="token text string">[draw]</span> <span class="token arrow operator">--&gt;</span> D<span class="token text string">[computeScroll]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smoothScrollTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> destX<span class="token punctuation">,</span><span class="token keyword">int</span> destY<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> scrollX <span class="token operator">=</span> <span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> delta <span class="token operator">=</span> destX <span class="token operator">-</span> scrollX<span class="token punctuation">;</span>        mScroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span>scrollX<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>delta<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">computeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">)</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mScroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Scroller</code> 并不能直接实现滑动，他最大的功能是在 <code>startScroll()</code> 处保存传入的滑动信息。后面再不断调用到 <code>computeScroll()</code> 这个方法，使用其中的 <code>scrollTo()</code> 来实现滑动。</p><p><code>computeScroll() </code> 中，在判断方法中会调用到 <code>mScroller.computeScrollOffset()</code> ，这是用于获取 <code>scrollX</code> 和 <code>scrollY</code> 两个位置参数以及做出判断是否滑动结束。若是未滑动结束，就会让 <code>computeScroll()</code> 不断滑动重绘。</p><h2 id="View事件分发"><a href="#View事件分发" class="headerlink" title="View事件分发"></a>View事件分发</h2><p><img src="https://upload-images.jianshu.io/upload_images/18657923-33af5bb33bc3f365.png"></p><center>Activity构成图<p>Activity 的层级基本如上所示，在 <code>xml</code> 文件中构建的布局就是在 <code>contentParent</code> 位置，也就是 <code>contentView</code>  位置。</p><h3 id="分发机制"><a href="#分发机制" class="headerlink" title="分发机制"></a>分发机制</h3><p>首先需要了解的是  <code>MotionEvent</code> ，当屏幕被点击 -&gt;产生点击事件 -&gt;<code>MotionEvent</code> 产生。</p><p>点击事件产生后层层下发，不断传递到根 <code>ViewGroup</code> 。</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[MotionEvent]</span> <span class="token arrow operator">--&gt;</span> B<span class="token text string">[Activity]</span>B <span class="token arrow operator">--&gt;</span> C<span class="token text string">[PhoneWindow]</span>C <span class="token arrow operator">--&gt;</span> D<span class="token text string">[DecorView]</span>D <span class="token arrow operator">--&gt;</span> E<span class="token text string">[ViewGroup]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>事件分发的三大方法</strong></p><blockquote><ul><li><code>dispatchTouchEvent(MotionEvent event)</code> : 用以事件分发。下面简称<strong>dTE()方法</strong></li><li><code>onInterceptTouchEvent(MotionEvent e)</code> : 用以拦截事件，在 <code>dispatchTouchEvent(MotionEvent event)</code> 中被调用来拦截。该方法只有 <code>ViewGroup</code> 中有， <strong><code>View</code> 中没有</strong></li><li><code>onTouchEvent(MotionEvent e)</code> : 用以处理点击事件，在 <code>dispatchTouchEvent(MotionEvent event)</code> 中被调用。这个方法是 <code>View</code> 中的，但是由于 <code>ViewGroup</code> 是继承自 <code>View</code> 的，所以 <code>ViewGroup</code> 可以使用。下面简称<strong>oTE()方法</strong></li></ul></blockquote><p><img src="https://pic.lxtlovely.top/blog/different_Of_ote_dpe_opte.png"></p><p>下面简述一下 <code>dispatchTouchEvent(MotionEvent event)</code> 方法，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ViewGroup内</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> ev<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//拦截部分</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment">//点击处理事件</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>child<span class="token punctuation">,</span>idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cancel<span class="token punctuation">,</span><span class="token class-name">View</span> child<span class="token punctuation">,</span><span class="token keyword">int</span> desiredPointerIdBits<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//View内</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> ev<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result <span class="token operator">&amp;&amp;</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拦截的处理逻辑"><a href="#拦截的处理逻辑" class="headerlink" title="拦截的处理逻辑"></a>拦截的处理逻辑</h4><p><img src="https://pic.lxtlovely.top/blog/onInterceptTouchEvent.svg"></p><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 传入evreq<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 允许拦截？op<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 发起拦截事件cond<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 没被拦截 或 <span class="token constant">DOWN</span>事件？intY<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 设置被拦截为 <span class="token boolean">true</span>intN<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 设置被拦截为 <span class="token boolean">false</span>e<span class="token operator">=&gt;</span>end<span class="token operator">:</span> endst<span class="token operator">-</span><span class="token operator">&gt;</span>cond<span class="token operator">-</span><span class="token operator">&gt;</span>req<span class="token operator">-</span><span class="token operator">&gt;</span>op<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>req<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>intY<span class="token function">req</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op<span class="token function">req</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>intN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这其中的 <code>允许拦截？</code> ，一般通过子View的 <code>requestDisallowInterceptTouchEvent</code> 来设置，这也是处理滑动冲突的方法之一。</p><p>当事件在 <code>ViewGroup</code> 被拦截之后，后续的事件序列都交给其处理了</p></blockquote><h4 id="点击事件处理逻辑"><a href="#点击事件处理逻辑" class="headerlink" title="点击事件处理逻辑"></a>点击事件处理逻辑</h4><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 事件已被当前<span class="token constant">VG</span>拦截conLoop<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 子View数量<span class="token constant">C</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token operator">?</span>conView<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 触点在子View内 或 子View在播动画<span class="token operator">?</span>op1<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token function">执行dTTE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法conSC<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 子View <span class="token operator">==</span> <span class="token type tag">null</span><span class="token operator">?</span>opC<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token function">执行子View的dTE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法opS<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token function">执行父View的dTE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法conOnTouchListener<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> <span class="token punctuation">(</span>OTListener<span class="token operator">!=</span><span class="token type tag">null</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">.</span>onTouch<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>opRdT1<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> View的dTE层级result <span class="token operator">=</span> <span class="token boolean">true</span>，表示事件被消费opOTE<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token function">执行oTE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法conUPL<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 点击或长按<span class="token operator">?</span>opperformClick<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> performClickopRoTt<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token constant">OTE</span>层 <span class="token keyword">return</span> <span class="token boolean">true</span>，表示消耗该事件opRoTf<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token constant">OTE</span>层 <span class="token keyword">return</span> <span class="token boolean">false</span>，表示不消耗该事件conOnClick<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> OnClickListener被设置<span class="token operator">?</span>opOnClick<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token function">执行onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法opOnClickT<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> performClick层 result <span class="token operator">=</span> <span class="token boolean">true</span>opOnClickF<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> performClick层 result <span class="token operator">=</span> <span class="token boolean">false</span>opRdT2<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> View的dTE层级result <span class="token operator">=</span> <span class="token boolean">true</span>，表示事件被消费opRdT3<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> View的dTE层级result <span class="token operator">=</span> <span class="token boolean">false</span>，事件未被消费opSuperdTE<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 父View的<span class="token constant">OTE</span>处理opOmit<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token operator">...</span><span class="token operator">...</span>sub<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token constant">C</span><span class="token operator">--</span>end1<span class="token operator">=&gt;</span>end<span class="token operator">:</span> <span class="token constant">END</span>end2<span class="token operator">=&gt;</span>end<span class="token operator">:</span> <span class="token constant">END</span>end3<span class="token operator">=&gt;</span>end<span class="token operator">:</span> <span class="token constant">END</span>st<span class="token operator">-</span><span class="token operator">&gt;</span>conLoop<span class="token operator">-</span><span class="token operator">&gt;</span>conView<span class="token operator">-</span><span class="token operator">&gt;</span>op1<span class="token operator">-</span><span class="token operator">&gt;</span>conSC<span class="token operator">-</span><span class="token operator">&gt;</span>opS<span class="token operator">-</span><span class="token operator">&gt;</span>conOnTouchListener<span class="token operator">-</span><span class="token operator">&gt;</span>opOTE<span class="token operator">-</span><span class="token operator">&gt;</span>conUPL<span class="token operator">-</span><span class="token operator">&gt;</span>opperformClick<span class="token operator">-</span><span class="token operator">&gt;</span>conOnClickopRoTt<span class="token operator">-</span><span class="token operator">&gt;</span>opRdT2<span class="token operator">-</span><span class="token operator">&gt;</span>end2<span class="token function">conLoop</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>conView<span class="token function">conLoop</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>end1<span class="token function">conView</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op1<span class="token function">conView</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>sub<span class="token operator">-</span><span class="token operator">&gt;</span>conLoop<span class="token function">conSC</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>opS<span class="token operator">-</span><span class="token operator">&gt;</span>conOnTouchListener<span class="token function">conSC</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>opC<span class="token operator">-</span><span class="token operator">&gt;</span>conOnTouchListener<span class="token function">conOnTouchListener</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>opRdT1<span class="token operator">-</span><span class="token operator">&gt;</span>end3<span class="token function">conOnTouchListener</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>opOTE<span class="token function">conUPL</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>opperformClick<span class="token operator">-</span><span class="token operator">&gt;</span>conOnClick<span class="token function">conUPL</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>opRoTf<span class="token operator">-</span><span class="token operator">&gt;</span>opRdT3<span class="token operator">-</span><span class="token operator">&gt;</span>opSuperdTE<span class="token operator">-</span><span class="token operator">&gt;</span>opOmit<span class="token function">conOnClick</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>opOnClick<span class="token operator">-</span><span class="token operator">&gt;</span>opOnClickT<span class="token operator">-</span><span class="token operator">&gt;</span>opRoTt<span class="token function">conOnClick</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>opOnClickF<span class="token operator">-</span><span class="token operator">&gt;</span>opRoTt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>事件被拦截后会被当前的 <code>ViewGroup</code> 处理，上图就是详细的点击事件处理流程图。</p><p>注意：onTouch() 优先级大于 onClick()，事实上， View.OnClickListener()等常用点击时间都是对交互时间的二次封装</p></blockquote><h4 id="事件分发传递规则"><a href="#事件分发传递规则" class="headerlink" title="事件分发传递规则"></a>事件分发传递规则</h4><p><code>View</code> 的事件分发是，首先 <code>View</code> 层层分发下来，若是 <code>onInterceptTouchEvent(ev)</code> 为 <code>true</code> 就拦截，为 <code>false</code> 就继续下发。</p><p>当某一层级拦截后，就调用 <code>onTouchEvent(event)</code> 来处理，若是该层无法处理，就传递给父层的 <code>onTouchEvent(event)</code> 来处理。如此层层传递直到有对应可以处理的父层。</p><p>这是一个<strong>V型结构</strong>，先下后上。</p><p>整个事件的分发过程看起来复杂，当最终归于三大方法可以用下面的伪代码表示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> ev<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>设置点击事件逻辑的时候，最基础的办法就是先用 <code>findViewById()</code> 来绑定实例，其次就是设置一个匿名内部类来监听点击，继而处理事件。那么我们可以提出以下的问题。</p><ol><li><p><code>findViewById()</code> 如何找到并绑定对应的 View</p><p>首先，<code>findViewById()</code> 会做一个层层代理，执行到 <code>DecorView</code> 这一层的 <code>findViewById()</code> 中。</p><p>然后，<code>DecorView</code> 本质上是 <code>ViewGroup</code>，那么就变成了在 <code>ViewGoup</code> 上寻找对应的 <code>View</code>。</p><p><strong>由于 <code>ViewGroup</code> 是继承自 <code>View</code> 的</strong>，我们先来查看 <code>View</code> 的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//View</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">View</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@IdRes</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> NO_ID<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">findViewTraversal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">View</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">findViewTraversal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@IdRes</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> mID<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述的代码可以看出，View 中如果 id 不存在就会返回null；如果存在且等于自己，就会返回自己。</p><p>下面我们来<strong>看 ViewGroup 中的代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ViewGroup</span><span class="token comment">/**     * {@hide}     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">View</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">findViewTraversal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@IdRes</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> mID<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token class-name">View</span><span class="token punctuation">[</span><span class="token punctuation">]</span> where <span class="token operator">=</span> mChildren<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> len <span class="token operator">=</span> mChildrenCount<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">View</span> v <span class="token operator">=</span> where<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_IS_ROOT_NAMESPACE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> v<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ViewGroup</code> 是继承自 <code>View</code> 的，直接使用了 View 的 <code>findViewById()</code> 方法，所以只复写了 <code>ViewGroup</code> 的 <code>findViewTraversal()</code>。其处理逻辑是，迭代查看它的哪个子View符合，然后返回；否则返回 null。</p></li><li><p>我们常重写的 onClick() 是和 onLongClick() 他们同时设置的话会同时执行吗？执行逻辑有何不同？</p><p>这两个方法如何执行的，我们需要查看它的源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//View </span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clickable <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> TOOLTIP<span class="token punctuation">)</span> <span class="token operator">==</span> TOOLTIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                    mPrivateFlags3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG3_FINGER_DOWN<span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> prepressed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mHasPerformedLongPress <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mIgnoreNextUpEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// This is a tap, so remove the longpress check</span>                            <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标注2</span>                            <span class="token comment">// Only perform take click actions if we were in the pressed state</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>focusTaken<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment">// Use a Runnable and post this rather than calling</span>                                <span class="token comment">// performClick directly. This lets other visual state</span>                                <span class="token comment">// of the view update before click actions start.</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPerformClick <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    mPerformClick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标注1</span>                                <span class="token punctuation">}</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">post</span><span class="token punctuation">(</span>mPerformClick<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token function">performClickInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    mIgnoreNextUpEvent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clickable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">checkForLongClick</span><span class="token punctuation">(</span><span class="token comment">//标注3</span>                                <span class="token class-name">ViewConfiguration</span><span class="token punctuation">.</span><span class="token function">getLongPressTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                x<span class="token punctuation">,</span>                                y<span class="token punctuation">,</span>                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上文我们知道 <code>onClick()</code> 方法是通过上述代码<strong>标注1</strong>处来设置的，可知手指离开屏幕的时候，此处执行的是普通的点击事件。</p><p>下面我们说下普通点击和长按点击分别如何执行。现在我们再看回<strong>标注3</strong>，此处执行的是 <code>checkForLongClick()</code> ，即一点击屏幕就会执行该方法，该方法会开启一个线程来计时和处理 <code>onLongClick()</code>。然后就看到条件为手指离开屏幕处的<strong>标注2</strong>，此处是判断此时是否已经执行了 <code>onLongClick()</code>，若是未执行，就说明是未能到达触发条件，此时移除不执行长按事件。移除后，就会去到<strong>标注3</strong>处，执行 <code>onClick()</code> 普通的点击事件。</p></li><li><p>常用的交互事件和触摸事件有哪些</p><p><strong>交互事件</strong></p><p><img src="https://pic.lxtlovely.top/blog/onclick_event.png"></p><p>上文方法中的 <code>onTouch()</code> 和 <code>onClick()</code> 之类的方法的关系是前者包含后者，包括 <code>onLongClick()</code> 都是基于此封装的。<code>onTouch()</code> 是他们的入口。</p><p><strong>触摸事件</strong></p><p><img src="https://pic.lxtlovely.top/blog/ACTION_UPDOWNCACELmm.png"></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db32eef138a24231b31fa37033737128~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>以上就是 <code>View</code> 体系的基础内容，理解 <code>View</code> 的事件分发原理，是我们能化用 View 的前提。<code>View</code> 处理事件层层下发的思想，是非常具有借鉴学习价值的，我们代码的设计也可以借鉴这套思想，提高代码的质量。</p><h3 id="View-事件分发的一些结论"><a href="#View-事件分发的一些结论" class="headerlink" title="View 事件分发的一些结论"></a>View 事件分发的一些结论</h3><ol><li><p>一般一个事件序列只能被一个 View 拦截并消耗，消耗的地点在 <code>onTouchEvent</code>。同时如果在 <code>onTouchEvent</code> 做处理的话，可以将事件传递给其他 <code>View</code>，比如返回 <code>false</code>，就可以将事件传递给上层 <code>View</code> 做处理。</p></li><li><p>当 <code>View</code> 不消耗 <code>ACTION_DOWN</code> 的时候，那么就是  <code>onTouchEvent</code> 会返回 <code>false</code>，即将事件传递给父元素处理了。如果消耗的话，那么同一时间序列都会被处理掉。</p></li><li><p><code>ViewGroup</code> 的 <code>onInterceptTouchEvent</code> 默认返回 <code>false</code>。</p></li><li><p><code>View</code> 没有 <code>onInterceptTouchEvent</code> 方法，收到事件后，就会立即调用 <code>onTouchEvent</code> 消耗事件。</p></li><li><p><code>View</code> 默认消耗事件，即为 <code>onTouchEvent</code> 返回 <code>true</code>。但当它是不可点击的时候，则返回 <code>false</code>，即 <code>clickable</code> 和 <code>longClickable</code> 同时为 <code>false</code> 时候。注意 <code>enable</code> 属性不会对其返回值产生影响。</p></li><li><p>当 <code>View</code> 是可点击的，且收到 <code>down</code> 和 <code>up</code> 的事件时候，<code>onClick</code> 才会发生。</p></li><li><p><code>requestDisallowInterceptTouchEvent</code> 方法会改变 <code>FLAG_DISALLOW_INTERCEPTER</code> 标记位，当该 <code>FLAG</code> 被设置时候，就无法拦截除了 ACTION_DOWN 之外的其他事件。因为 ACTION_DOWN 会重置 <code>FLAG_DISALLOW_INTERCEPTER</code> 标记位，导致标记位无效。</p><p>所以，一般是在 ACTION_DOWN 中调用 <code>onInterceptTouchEvent</code> 来判断是否做拦截。</p></li><li><p><code>onInterceptTouchEvent</code> 不是每次都会被调用的，所以最稳妥想处理事件的方式是在 <code>dispatchTouchEvent</code> 处理。</p></li><li><p><code>OnTouchListener</code> &gt; <code>OnTouchEvent</code> &gt; <code>OnClickListener</code>,这样放置的原因，是为了让 OnTouchListener 方便在外部调用。</p></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/u010127332/article/details/99622561">Android中View的继承关系图_Huangrong_000的博客-CSDN博客</a></p><p><a href="https://developer.android.google.cn/guide/topics/ui/declaring-layout?hl=zh_cn">布局  | Android 开发者  | Android Developers (google.cn)</a></p><p><a href="https://blog.csdn.net/jason0539/article/details/42743531">android之View坐标系（view获取自身坐标的方法和点击事件中坐标的获取）_炸斯特的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/b052900e2073">Activity 的组成 - 简书 (jianshu.com)</a></p><p><a href="https://item.jd.com/13127482.html">《Android进阶之光（第2版） (博文视点出品)》(刘望舒)【摘要 书评 试读】- 京东图书 (jd.com)</a></p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=15967">View.java - Android Code Search</a></p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java">ViewGroup.java - Android Code Search</a></p></center>]]></content>
      
      
      <categories>
          
          <category> View的事件体系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承和组合如何选择|设计基础</title>
      <link href="/2022/09/30/duo-yong-zu-he-shao-yong-ji-cheng/"/>
      <url>/2022/09/30/duo-yong-zu-he-shao-yong-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="继承和组合如何选择-设计基础"><a href="#继承和组合如何选择-设计基础" class="headerlink" title="继承和组合如何选择|设计基础"></a>继承和组合如何选择|设计基础</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第2天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>了解面向对象三大特性 <a href="https://juejin.cn/post/7142868931466756132">浅谈 Java 三大特性的意义</a></li><li>熟悉使用接口</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前文我们讲解继承的特性时提到，继承为解决代码复用问题而生，但是在实际使用时，需要<strong>多用组合，少用继承</strong>。</p><p>有同学可能会问，组合是什么？</p><p>事实上，组合可以泛指一个类作为另一个类的成员变量出现。如下方代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//聚合，不依赖的包含关系。即使对象KUNKUN消亡了，这种关系下的Chick对象也不会消亡</span><span class="token keyword">class</span> KUNKUN <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Chick</span> chick<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">KUNKUN</span><span class="token punctuation">(</span><span class="token class-name">Chick</span> chick<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chick <span class="token operator">=</span> chick<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//组合，依赖的包含关系。对象KUNKUN消亡了，这种关系下的Chick对象会随之消亡</span><span class="token keyword">class</span> KUNKUN <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Chick</span> chick<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">KUNKUN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在日常识别或者使用中，可以把以上的 <strong>聚合</strong> ，<strong>组合</strong> 这两种关系都称之为 <strong>组合关系</strong> </p><p>理清以上关系，我们会发现，事实上我们使用组合的频率是很高的。那组合的作用是什么呢，组合的作用和继承实际上是一样的，<strong>都是代码复用</strong>，所以这也引出了我们的问题，组合和继承这两者，我们该如何选择呢？</p><p>正如上文所说，答案是：<strong>多用组合，少用继承</strong>。这是业界大牛们经过理论推敲和实践得出的答案</p><p>本文带大家来探讨一下，这个业界标准的原因，以及回答什么时候用继承？什么时候用组合？</p><h2 id="少用继承的原因"><a href="#少用继承的原因" class="headerlink" title="少用继承的原因"></a>少用继承的原因</h2><p>首先回答<strong>为何少用继承</strong>。</p><p>继承的主要功能是<strong>代码复用</strong>。但是我们是不是一旦需要复用就使用继承就好了呢？</p><p>事实上，继承在除了能解决代码复用，它还表示着类与类之间的实际关系。一旦出现了继承关系，就代表了子类以及父类的关系。所以如果仅仅只是代码复用，但是类与类之间却是并没有实际意义的继承关系的，就胡乱去定义一个父类，给不相干的子类去继承，会造成逻辑的混乱。例如 <code>NoteBook</code> 类要复用到 <code>Person</code> 类的 <code>getID</code>() 代码，我们使用继承就会乱了套了。<strong>所以对于继承，需要满足高层次抽象的，有父子类关系的，我们才去使用</strong>。</p><p>所以，我们使用继承的时候，要设计好继承的父类，子类的关系。<strong>父类永远是比子类更加抽象，覆盖的范围更加广泛的</strong>。</p><p>譬如我们设定鸟类为父类，各种鸟为子类。父类定义的一个基础方法是<strong>会飞</strong>，子类在继承这个鸟类的父类后，再拓展其他的不同品种鸟类的特性。</p><p>但是之后我们会发现，很多鸟类还是不会飞的。这个 <strong>会飞</strong> 作为父类特性就不合适了，这时候我们选用嘴为 <strong>喙</strong> 的为父类的特性。那会飞怎么办，会飞的特性应该在父类中去除。因为基于**<a href="https://baike.baidu.com/item/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/2107000">迪米特法则</a><strong>，我们定义的父类需要是</strong>最小知识范围的**。意思就是类中不能有多余的东西，子类都能使用到的才是最优的定义法则。所以我们应该去掉 <strong>会飞</strong> 这个父类的方法。</p><p>但确实有大部分鸟类是会飞的，这时候我们可以分 <strong>会飞的鸟类</strong> 和 <strong>不会飞的鸟类</strong> 分别继承鸟类这一个父类，然后其他子类再分别对于的继承这两个类。可事实上，类的特性远不止这么简单，在会飞的鸟和不会飞的鸟这两个范围内又出现更多的特性怎么办，那我们就需要使用到<strong>多层继承</strong>的办法了。我们需要在会飞以及不会飞的下一层，或者同一层等，继续建立新的父类。</p><p>但随着定义的特性变得越来越多 ，会出现<strong>继承关系复杂</strong>的问题。我们的继承树会变得很庞大，父类的数量也会层层继承，出现很多次的继承关系。</p><p>这直接导致了：</p><ol><li>代码<strong>可读性变差</strong>，了解一个类还需要了解清楚其各级父类</li><li><strong>破坏封装特性</strong>，父类实现细节暴露给子类。父类修改代码，导致所有子类逻辑都会变更</li></ol><h2 id="为何多用组合"><a href="#为何多用组合" class="headerlink" title="为何多用组合"></a>为何多用组合</h2><p>那既然组合也可以实现继承的<strong>代码复用特性</strong>，所以选用组合是可以替代继承的。</p><p>那在父类的特性众多的时候，如何不进行多重继承，但是又能达到其<strong>清晰的拥有众多特性</strong>的效果呢？</p><p>我们使用 “<strong>组合+接口+委托</strong>” 可以清晰且简单的实现，且完美解决了多重继承带来的弊端</p><p>这种方法可提高代码的可读性，也可以降低耦合。而事实上的业务情况中，我们是经常有这类需求的，这也是我们需要多用到组合的原因。</p><p>具体代码如下(From:《设计模式之美》)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyAbility</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//... }</span><span class="token punctuation">}</span><span class="token comment">//省略Tweetable/TweetAbility/EggLayable/EggLayAbility</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ostrich</span> <span class="token keyword">implements</span> <span class="token class-name">Tweetable</span><span class="token punctuation">,</span> <span class="token class-name">EggLayable</span> <span class="token punctuation">{</span><span class="token comment">//鸵鸟</span>  <span class="token keyword">private</span> <span class="token class-name">TweetAbility</span> tweetAbility <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TweetAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组合</span>  <span class="token keyword">private</span> <span class="token class-name">EggLayAbility</span> eggLayAbility <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EggLayAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组合</span>  <span class="token comment">//... 省略其他属性和方法...</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tweet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tweetAbility<span class="token punctuation">.</span><span class="token function">tweet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">layEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eggLayAbility<span class="token punctuation">.</span><span class="token function">layEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 委托</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么时候用继承"><a href="#什么时候用继承" class="headerlink" title="什么时候用继承"></a>什么时候用继承</h2><p>何时使用继承，前面我们讲了多重继承带来的弊端，但并非是说继承一无是处。我们需要使用到继承的场景还是有很多的。</p><p>是否使用继承，要看业务的实现是否需要代码复用，是否两类之间有满足子类和父类的关系；这之后再看是否不会造成多重继承。这些都满足的话，那是可以直接使用继承关系的。</p><p>反之，我们就需要使用组合了</p><p>上述是我对是否使用继承的一些看法。</p><p>下面是来自王争大佬对是否使用继承的看法。</p><blockquote><p>如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（比如，最多有两层继承关系），继承关系不复杂，我们就可以大胆地使用继承。反之，系统越不稳定，继承层次很深，继承关系复杂，我们就尽量使用组合来替代继承。</p><p>除此之外，还有一些设计模式会固定使用继承或者组合。比如，装饰者模式（decorator pattern）、策略模式（strategy pattern）、组合模式（composite pattern）等都使用了组合关系，而模板模式（template pattern）使用了继承关系。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/article/169593?screen=full">为何说要多用组合少用继承？如何决定该用组合还是继承？ (geekbang.org)</a></p><p><a href="https://time.geekbang.org/column/article/171767">如何利用面向对象设计和编程开发接口鉴权功能？ (geekbang.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解代码中的抽象|设计基础</title>
      <link href="/2022/09/28/dai-ma-zhong-de-chou-xiang/"/>
      <url>/2022/09/28/dai-ma-zhong-de-chou-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="如何理解代码中的抽象"><a href="#如何理解代码中的抽象" class="headerlink" title="如何理解代码中的抽象"></a>如何理解代码中的抽象</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ol><li>了解面向对象语言</li><li>理解面向对象三大特性</li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道，在 <code>Java</code> 中可以使用抽象类或者使用接口来定义抽象方法，继而让继承或者实现它们的类来实现对于的抽象方法。这是抽象在 <code>Java</code> 当中最典型的表现形式。但是抽象作为 <strong>面向对象</strong> 语言中如此重要的特性，我们应该对其有更加深刻的了解，才能让我们对其使用得更加游刃有余。</p><p>下面，我们可以通过问题的形式来加深我们对抽象这一概念的理解。</p><h2 id="关于抽象的问题"><a href="#关于抽象的问题" class="headerlink" title="关于抽象的问题"></a>关于抽象的问题</h2><p>关于抽象问题，主要回答以下几个问题。</p><h3 id="抽象类和接口的区别？"><a href="#抽象类和接口的区别？" class="headerlink" title="抽象类和接口的区别？"></a>抽象类和接口的区别？</h3><p>由于抽象类和接口有如下特性</p><ol><li><p>抽象类三大特性(is-a,继承关系)</p><ul><li>抽象类不允许被实例化</li><li>抽象类可以包含属性和方法</li><li>子类继承抽象类，必须实现所有抽象方法</li></ul></li><li><p>接口三大特性(ha-a，协议关系) [<strong>jdk8以下</strong>]</p><ul><li>接口不能包含属性</li><li>接口不能包含代码实现</li><li>类实现接口，必须实现所有抽象方法</li></ul><p>那么，两者的区别就是</p><p>抽象类可以包含属性和方法，其不能实例化，其功能主要是供子类复用。</p><p>接口不能包含属性和被实现的方法，其功能主要是作为一种协议。</p></li></ol><h3 id="抽象和接口能实现哪些编程问题，有何意义"><a href="#抽象和接口能实现哪些编程问题，有何意义" class="headerlink" title="抽象和接口能实现哪些编程问题，有何意义"></a>抽象和接口能实现哪些编程问题，有何意义</h3><ol><li>抽象类<ul><li>优雅的解决代码复用问题</li><li>优雅的解决多态问题</li></ul></li><li>接口<ul><li>解耦，隔离接口和具体的实现</li><li>抽象为协议</li><li>提高代码的可拓展性</li></ul></li></ol><h3 id="如何模拟接口和抽象类"><a href="#如何模拟接口和抽象类" class="headerlink" title="如何模拟接口和抽象类"></a>如何模拟接口和抽象类</h3><p>事实上，在允许继承的普通的代码中。我们定义我们的类满足他们自身的三大特性，即可模拟接口和抽象类了</p><p>例如，我们需要模拟接口的时候</p><p>我们只需要编写一个正常的类，定义好方法，在方法里面默认实现为抛出异常即可</p><p>这样子就满足了接口的三大特性，我们继承该自定义接口类之后，必须要重写对应的方法，否则调用的时候会抛出异常。</p><h3 id="使用抽象类或者接口的不同时机"><a href="#使用抽象类或者接口的不同时机" class="headerlink" title="使用抽象类或者接口的不同时机"></a>使用抽象类或者接口的不同时机</h3><p>我们需要看待解决的问题</p><ul><li><p>解决代码复用问题。使用抽象类</p></li><li><p>解决抽象问题，使用接口</p></li></ul><h3 id="为什么基于接口而非实现编程"><a href="#为什么基于接口而非实现编程" class="headerlink" title="为什么基于接口而非实现编程"></a>为什么基于接口而非实现编程</h3><p>在软件开发中，最大的挑战之一就是需求的不断变化，这也是考验代码设计好坏的一个标准。</p><p><strong>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性</strong>，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对。</p><p>而<strong>抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一</strong>。</p><p>基于接口编程其实就是 <strong>基于抽象编程</strong> 。对于不稳定(很可能会修改)的系统，我们就要关注可维护性和可拓展性，就要思考其抽象化。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/article/165103">08 | 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？ (geekbang.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 Java 三大特性的意义|设计基础</title>
      <link href="/2022/09/26/qian-tan-java-san-da-te-xing/"/>
      <url>/2022/09/26/qian-tan-java-san-da-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈-Java-三大特性的意义"><a href="#浅谈-Java-三大特性的意义" class="headerlink" title="浅谈 Java 三大特性的意义"></a>浅谈 Java 三大特性的意义</h1><p><code>Java</code> 的三大特性，继承、封装和多态大家应该都有所耳闻。本篇短文，浅谈下这几种特性的意义所在。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>熟悉面向对象语言</li><li>有使用过三大特性的经验</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>关于封装，其最简单的用法就是，在一个类中把不需要给他人修改和展示的属性或者方法隐藏，其余则的公开。</p><p>其作用有几点：</p><ol><li>防止被不熟悉该业务的同事修改，导致数据出错或者功能出错</li><li>让相关类的调用更加简单清晰，只让可调用的方法被暴露，可减小调用者的使用负担</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>多数面向对象语言中都有继承的特性，这是一个 <code>is-a</code> 的特性。</p><p>继承的意义有以下几点：</p><ol><li>解决代码复用问题</li><li>父类、子类与现下生活相似，有结构美</li></ol><p>但是过度使用继承，也会使得代码可读性和可维护性变差。提倡 <code>多组合，少继承</code></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是使用继承或者基于接口类，来使用子类替换父类</p><p>使用多态的几个意义有:</p><ol><li>提高代码的复用性和可拓展性</li><li>隐藏代码功能的具体实现，让代码的调用更加方便</li><li>让代码更加解耦</li></ol><p>多态是优雅的设计模式的基础，笔者在前面的封装框架一文中，也用到了多态的特性</p><p><a href="https://juejin.cn/post/7132504015908274213">带你封装MVP架构(上)|青训营笔记 - 掘金 (juejin.cn)</a></p><h2 id="抽象？"><a href="#抽象？" class="headerlink" title="抽象？"></a>抽象？</h2><p>抽象是特性么？抽象在java中是一个特性，但是即使 <code>java</code> 不提供该特性，事实上我们调用函数，也是在实现该特性。</p><p>Java 中的抽象类 或者 接口类，都是包含抽象的特性的用法。使用抽象，能让我们不关注于代码本身，而是关注其功能。</p><p>为何标题打了 ？ ，是抽象不包含于三大特性之中，但是抽象的的应用应该是在编码的全方面的。我们只去调用类的 public 方法可以看作是抽象，将类名显示一个泛化的功能也是抽象。</p><h2 id="C语言如何实现面向对象的三大特性的"><a href="#C语言如何实现面向对象的三大特性的" class="headerlink" title="C语言如何实现面向对象的三大特性的"></a>C语言如何实现面向对象的三大特性的</h2><ul><li><p>继承：让不同的结构体 都包含一个相同的宏，宏里对应不同的函数指针。 </p></li><li><p>封装：在文件中使用静态方法 或 静态全局变量，防止别的文件访问 </p></li><li><p>抽象：提供不同的.c实现文件，逻辑代码里使用函数的声明 </p></li><li><p>多态：通过使用函数指针，通过修改函数指针实现多态。</p></li></ul><p>本文是 <code>设计模式</code> 的基础，了解设计模式不能空泛化，要知晓为什么，怎么做</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的面向过程风格的代码|设计基础</title>
      <link href="/2022/09/18/chang-yong-de-mian-xiang-guo-cheng-feng-ge-de-dai-ma/"/>
      <url>/2022/09/18/chang-yong-de-mian-xiang-guo-cheng-feng-ge-de-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的面向过程风格的代码"><a href="#常用的面向过程风格的代码" class="headerlink" title="常用的面向过程风格的代码"></a>常用的面向过程风格的代码</h1><p>在Java开发中，我们实际上会利用Java这种面向对象语言，在无意中写出很多面向过程风格的代码。</p><p>譬如我们违背了面向对象的 <code>三大特性</code> ，违背了面向对象的定义，这样子的代码都会变成面向过程风格的代码。</p><p>下面列举三种面向过程风格的代码</p><h2 id="getter，setter-未作封装"><a href="#getter，setter-未作封装" class="headerlink" title="getter，setter 未作封装"></a><code>getter</code>，<code>setter</code> 未作封装</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> itemsCount<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">double</span> totalPrice<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemsCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemsCount<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setItemsCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> itemsCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>itemsCount <span class="token operator">=</span> itemsCount<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTotalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalPrice<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTotalPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> totalPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>totalPrice <span class="token operator">=</span> totalPrice<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCartItem</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    itemsCount<span class="token operator">++</span><span class="token punctuation">;</span>    totalPrice <span class="token operator">+=</span> item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如上述的代码，<code>getter</code> 和 <code>setter</code> 未作任何封装，数据没有访问权限，可以随意被修改。可见该代码违背面向对象中封装的定义，其为一段面向过程风格的代码。</p><p>那么，如何利用封装的特性，将其改为一段 <strong>面向对象</strong> 风格的代码呢？</p><p>首先我们去除所有的 <strong><code>setter</code></strong> 方法，使其不与 <code>addItem(ShoppingCartItem item)</code> 起冲突，即只留 <code>addItem</code> 这一个修改数据的通道。这样子也许你会认为代码已封装完毕，数据已不会再被其他的方法随意修改了。</p><p>但事实上，这样子还是没有封装好，我们的数据依旧会被修改。我们可以这样子操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ShoppingCartItem</span> item1<span class="token punctuation">,</span>item2<span class="token punctuation">;</span>    item1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoppingCartItem</span><span class="token punctuation">(</span><span class="token string">"no1"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoppingCartItem</span><span class="token punctuation">(</span><span class="token string">"no2"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ShoppingCart</span> cart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cart<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cart<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>item2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cart<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空list，但是总价格，总数量未改变。封装不彻底</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getTotalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的代码还是会在我们的设计的方法之外随意改变我们的数据，且导致数据不同步、出错</p><p>我们需要借用<code>Collections.unmodifiableList()</code> 方法，做到彻底的封装。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们查看一下 <code>Collections.unmodifiableList</code>() 的源码，就可知道为何这样子可以防止修改了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span> <span class="token operator">?</span>               <span class="token keyword">new</span> <span class="token class-name">UnmodifiableRandomAccessList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">:</span>               <span class="token keyword">new</span> <span class="token class-name">UnmodifiableList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/**    * @serial include    */</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnmodifiableList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">UnmodifiableCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>                                 <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@java.io.Serial</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">283967356065247728L</span><span class="token punctuation">;</span>       <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"serial"</span><span class="token punctuation">)</span> <span class="token comment">// Conditionally serializable</span>       <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>       <span class="token class-name">UnmodifiableList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">super</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> o <span class="token operator">==</span> <span class="token keyword">this</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> i                   <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   i<span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>UnmodifiableList</code> 对会对 list 的<strong>修改类型方法</strong> 进行重写，令其抛出异常，就会让其他使用者无法调用 list 中修改类型的方法来修改数据了</p><p>但是在 调用 list 的 get 方法之后，还是会修改到单项的数据，例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ShoppingCartItem</span> item <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">19.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候，我们应该在返回list的时候，返回一个数据的 <strong>拷贝</strong>(深拷贝) ，这样子就不会对原数据做出修改了。</p><p>我们可以如下修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据类继承Cloneable接口，重写clone()方法，使得其可继承</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCartItem</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ShoppingCartItem</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ShoppingCartItem</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCartItem</span><span class="token punctuation">&gt;</span></span> copyItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ShoppingCartItem</span> i <span class="token operator">:</span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>            copyItems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>copyItems<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上实现深拷贝，数据就不可修改原数据的单项数据了😁</p><h2 id="滥用全局常量和全局方法"><a href="#滥用全局常量和全局方法" class="headerlink" title="滥用全局常量和全局方法"></a>滥用全局常量和全局方法</h2><h3 id="全局常量"><a href="#全局常量" class="headerlink" title="全局常量"></a>全局常量</h3><p>在项目开发中，我们常常喜欢定义一个全局常量的类，把项目中用到的所有常量都定义到该类中。这让我们不用实例化对象，可以直接使用该常量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalConstant</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_LOAD <span class="token operator">=</span> <span class="token string">"isLoad"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ACCESS_TOKEN <span class="token operator">=</span> <span class="token string">"accessToken"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> REFRESH_TOKEN <span class="token operator">=</span> <span class="token string">"refresh_token"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_LOGIN <span class="token operator">=</span> <span class="token string">"isLogin"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CLIENT_TOKEN <span class="token operator">=</span> <span class="token string">"client_token"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IS_CLIENT <span class="token operator">=</span> <span class="token string">"is_client"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> OPEN_ID <span class="token operator">=</span> <span class="token string">"open_id"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MMKV_KEY <span class="token operator">=</span> <span class="token string">"potato_key"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANS_TOTAL <span class="token operator">=</span> <span class="token string">"fans_total"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FOLLOWINGS_TOTAL <span class="token operator">=</span> <span class="token string">"followings_total"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> LIKE_TOTAL <span class="token operator">=</span> <span class="token string">"like_total"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但实际上，定义所有全局常量到一个类中，并不是定义全局常量的最佳做法。</p><p>有以下几个缺点：</p><ol><li>影响代码维护。当项目代码越来越多的时候，该常量类会变得十分臃肿。这会使得常量的查找以及修改变得费时，同时也会加大代码冲突的概率。事实上，import 的时候也会导入很多无用的常量。</li><li>增加编译时间。当依赖该常量类的代码越来越多，会使得修改了某一个常量后，造成所有依赖该常量类的代码都要重新编译。使得编译时间大大变长</li><li>影响代码复用。当我们要复用某些代码到其他项目或者其他隔离的模块时，我们发现这些代码依赖了常量类，处理方法要么是一起复制整个常量类代码过去；要么就是复制对应的常量过去，再修改代码。前者会增加无用的常量，后者则是花费了我们更多时间去做了重复性的工作。</li></ol><p>综合以上缺点，我们的优化方法就是分割、降低常量类的代码大小，或者是将常量内聚到代码中。</p><p>解决方法有如下两种：</p><ol><li>定义多种常量类，让相同作用范围的常量置于一个类中。使得代码易于维护、使得其不会过于臃肿</li><li>将常量定义于对应使用的类中，使其更加内聚和易于维护</li></ol><h3 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h3><p>最常见的全局方法就是 <code>Util</code> 类了，<code>Util</code> 工具类出现的原因是为了抽离那些常用的操作，但是这些操作与被操作者之间又不会存在继承关系。这个时候直接抽离为工具类会更加的合理，也可使得开发效率提高。</p><p>对于工具类的定义，我们需要将工具类细化，按功能分为多种工具类，可以让代码更好维护</p><h2 id="代码结构风格"><a href="#代码结构风格" class="headerlink" title="代码结构风格"></a>代码结构风格</h2><p>将数据和数据操作进行分离，是一种典型的面向过程风格。而我们日常开发中的 <code>MVC</code> 、<code>MVP</code> 这类开发架构/结构，就是典型的在使用面向过程风格来编码。所以可知，面向过程并非就比面向对象要逊色，将这些风格结合，整合为最适合的，就是最好的。</p><p>参考自：<a href="https://time.geekbang.org/column/article/164907">07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？ (geekbang.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让你的APP更智能|青训营笔记</title>
      <link href="/2022/09/02/ru-he-rang-ni-de-app-geng-zhi-neng/"/>
      <url>/2022/09/02/ru-he-rang-ni-de-app-geng-zhi-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="如何让你的APP更智能-青训营笔记"><a href="#如何让你的APP更智能-青训营笔记" class="headerlink" title="如何让你的APP更智能|青训营笔记"></a>如何让你的APP更智能|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第16天</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着当下的社会发展，我们的手机屏幕越来越大。我们的单手难以覆盖整个手机，所以当我们想要单手去点击屏幕另一侧的地方的时，就会感到较为困难。这时候我们就会想，这个按钮要是更靠近我们就好了。</p><p>那我们有办法让这些按钮自动的更靠近我们的操作手机的手么？</p><p>答案是有的，只要我们能判断出当前操作的手机是左手还是右手即可。左手按钮即可偏左；右手的话，按钮就偏右。</p><p>有了大致思路，开干！</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ul><li><p>方案一</p><p>非机器学习方式：<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5017479/">Recognizing the Operating Hand and the Hand-Changing Process for User Interface Adjustment on Smartphones - PMC (nih.gov)</a></p></li><li><p>方案二</p><p>机器学习方案（我们的方案）：</p><ul><li>训练一个二分类的CNN神经网络模型来识别用户是左手 or 右手操作。</li><li>输入：用户在屏幕上的滑动轨迹</li><li>输出：左手 or 右手</li></ul></li></ul><p>From： <a href="https://juejin.cn/post/7123453378176221215#heading-95">【Android 客户端专场 学习资料二】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>样本训练这里不做介绍，对应的模型直接采用该库的 <a href="https://github.com/ahcyd008/OperatingHandRecognition">ahcyd008/OperatingHandRecognition: 端智能左右手识别学习Android Demo + 模型训练 (github.com)</a></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>由于方案二事采用深度学习的，所以我们需要引入深度学习对应于Android的框架。这些框架几乎都是几个巨头大厂的，我们这边使用的是 <code>Google</code> 的 <code>tensorflow</code> <code>lite</code> 版本。它是适合于 Android 使用的 <code>tensorflow</code> 框架，我们主要是把正常的模型压缩，转化后，就能在 Android 中使用了。</p><p>其余的两个库一个是 <code>Google</code> 的 <code>task</code> 库，一个是 <code>Google</code> 的 <code>guava</code> 库。前者是对深度学习开启后台任务以及进行监控，而 <code>guava</code> 则是提供一个功能更加强大的 Java 封装库。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//app/build.gradle</span>dependencies <span class="token punctuation">{</span>    <span class="token comment">// Task API</span>    implementation <span class="token string gstring">"com.google.android.gms:play-services-tasks:17.2.1"</span>    <span class="token comment">// tensorflow lite 依赖</span>    implementation <span class="token string">'org.tensorflow:tensorflow-lite:0.0.0-nightly-SNAPSHOT'</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string gstring">"com.google.guava:guava:31.1-android"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//settings.gradle</span>pluginManagement <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token function">gradlePluginPortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        maven <span class="token punctuation">{</span> url <span class="token string gstring">"https://jitpack.io"</span> <span class="token punctuation">}</span>        maven <span class="token punctuation">{</span>            name <span class="token string">'ossrh-snapshot'</span>            url <span class="token string">'https://oss.sonatype.org/content/repositories/snapshots'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencyResolutionManagement <span class="token punctuation">{</span>    repositoriesMode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RepositoriesMode<span class="token punctuation">.</span>FAIL_ON_PROJECT_REPOS<span class="token punctuation">)</span>    repositories <span class="token punctuation">{</span>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        maven <span class="token punctuation">{</span>            name <span class="token string">'ossrh-snapshot'</span>            url <span class="token string">'https://oss.sonatype.org/content/repositories/snapshots'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入库的代码如上，记得在最后要加入 <code>tensorflow</code> 的仓库地址。</p><p><img src="https://pic.lxtlovely.top/blog/20220902162847.png"></p><p>最后记得引入项目打包过的模型</p><h3 id="模型的连接处理"><a href="#模型的连接处理" class="headerlink" title="模型的连接处理"></a>模型的连接处理</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">OperatingHandClassifier</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> interpreter<span class="token operator">:</span> Interpreter<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> modelInputSize <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> isInitialized <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">private</span> <span class="token keyword">set</span>    <span class="token comment">/** Executor to run inference task in the background */</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> executorService<span class="token operator">:</span> ExecutorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> hasInit <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">fun</span> <span class="token function">checkAndInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        hasInit <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">val</span> task <span class="token operator">=</span> TaskCompletionSource<span class="token operator">&lt;</span>Void<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">initializeInterpreter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                task<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>                task<span class="token punctuation">.</span><span class="token function">setException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        task<span class="token punctuation">.</span>task<span class="token punctuation">.</span><span class="token function">addOnFailureListener</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span> Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Error to setting up digit classifier."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">initializeInterpreter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Load the TF Lite model</span>        <span class="token keyword">val</span> assetManager <span class="token operator">=</span> context<span class="token punctuation">.</span>assets        <span class="token keyword">val</span> model <span class="token operator">=</span> <span class="token function">loadModelFile</span><span class="token punctuation">(</span>assetManager<span class="token punctuation">)</span>        <span class="token comment">// Initialize TF Lite Interpreter with NNAPI enabled</span>        <span class="token keyword">val</span> options <span class="token operator">=</span> Interpreter<span class="token punctuation">.</span><span class="token function">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 测试发现 NNAPI 对 MaxPooling1D 有支持问题，如果遇到在手机端预测和python预测不准问题可以尝试关掉 NNAPI, 再check下</span>        options<span class="token punctuation">.</span><span class="token function">setUseNNAPI</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> interpreter <span class="token operator">=</span> <span class="token function">Interpreter</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> options<span class="token punctuation">)</span>        <span class="token comment">// Read input shape from model file</span>        <span class="token keyword">val</span> inputShape <span class="token operator">=</span> interpreter<span class="token punctuation">.</span><span class="token function">getInputTensor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> simpleCount <span class="token operator">=</span> inputShape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">val</span> tensorSize <span class="token operator">=</span> inputShape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        modelInputSize <span class="token operator">=</span> FLOAT_TYPE_SIZE <span class="token operator">*</span> simpleCount <span class="token operator">*</span> tensorSize <span class="token operator">*</span> PIXEL_SIZE        <span class="token keyword">val</span> outputShape <span class="token operator">=</span> interpreter<span class="token punctuation">.</span><span class="token function">getOutputTensor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// Finish interpreter initialization</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>interpreter <span class="token operator">=</span> interpreter        isInitialized <span class="token operator">=</span> <span class="token boolean">true</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Initialized TFLite interpreter. inputShape:<span class="token interpolation"><span class="token delimiter variable">${</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>inputShape<span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>, outputShape:<span class="token interpolation"><span class="token delimiter variable">${</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>outputShape<span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">loadModelFile</span><span class="token punctuation">(</span>assetManager<span class="token operator">:</span> AssetManager<span class="token punctuation">)</span><span class="token operator">:</span> ByteBuffer <span class="token punctuation">{</span>        <span class="token keyword">val</span> fileDescriptor <span class="token operator">=</span> assetManager<span class="token punctuation">.</span><span class="token function">openFd</span><span class="token punctuation">(</span>MODEL_FILE<span class="token punctuation">)</span> <span class="token comment">// 使用全连接网络模型</span>        <span class="token comment">// val fileDescriptor = assetManager.openFd(MODEL_CNN_FILE) // 使用卷积神经网络模型</span>        <span class="token keyword">val</span> inputStream <span class="token operator">=</span> <span class="token function">FileInputStream</span><span class="token punctuation">(</span>fileDescriptor<span class="token punctuation">.</span>fileDescriptor<span class="token punctuation">)</span>        <span class="token keyword">val</span> fileChannel <span class="token operator">=</span> inputStream<span class="token punctuation">.</span>channel        <span class="token keyword">val</span> startOffset <span class="token operator">=</span> fileDescriptor<span class="token punctuation">.</span>startOffset        <span class="token keyword">val</span> declaredLength <span class="token operator">=</span> fileDescriptor<span class="token punctuation">.</span>declaredLength        <span class="token keyword">return</span> fileChannel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>FileChannel<span class="token punctuation">.</span>MapMode<span class="token punctuation">.</span>READ_ONLY<span class="token punctuation">,</span> startOffset<span class="token punctuation">,</span> declaredLength<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">classify</span><span class="token punctuation">(</span>pointList<span class="token operator">:</span> JSONArray<span class="token punctuation">)</span><span class="token operator">:</span> ClassifierLabelResult <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"TF Lite Interpreter is not initialized yet."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// Preprocessing: resize the input</span>            <span class="token keyword">var</span> startTime<span class="token operator">:</span> Long <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> byteBuffer <span class="token operator">=</span> <span class="token function">convertFloatArrayToByteBuffer</span><span class="token punctuation">(</span>pointList<span class="token punctuation">)</span>            <span class="token keyword">var</span> elapsedTime <span class="token operator">=</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Preprocessing time = "</span> <span class="token operator">+</span> elapsedTime <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span>            startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">FloatArray</span><span class="token punctuation">(</span>OUTPUT_CLASSES_COUNT<span class="token punctuation">)</span> <span class="token punctuation">}</span>            interpreter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">,</span> result<span class="token punctuation">)</span>            elapsedTime <span class="token operator">=</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Inference time = "</span> <span class="token operator">+</span> elapsedTime <span class="token operator">+</span> <span class="token string">"ms result="</span> <span class="token operator">+</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">contentToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// return top 4</span>            <span class="token keyword">val</span> output <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>output <span class="token operator">&gt;</span> <span class="token number">0.5f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">ClassifierLabelResult</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">"right"</span><span class="token punctuation">,</span> labelRight<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">ClassifierLabelResult</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token operator">-</span>output<span class="token punctuation">,</span> <span class="token string">"left"</span><span class="token punctuation">,</span> labelLeft<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Inference error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">ClassifierLabelResult</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1f</span><span class="token punctuation">,</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span> labelUnknown<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">classifyAsync</span><span class="token punctuation">(</span>pointList<span class="token operator">:</span> JSONArray<span class="token punctuation">)</span><span class="token operator">:</span> Task<span class="token operator">&lt;</span>ClassifierLabelResult<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> task <span class="token operator">=</span> TaskCompletionSource<span class="token operator">&lt;</span>ClassifierLabelResult<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">classify</span><span class="token punctuation">(</span>pointList<span class="token punctuation">)</span>            task<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> task<span class="token punctuation">.</span>task    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">{</span>            interpreter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Closed TFLite interpreter."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">convertFloatArrayToByteBuffer</span><span class="token punctuation">(</span>pointList<span class="token operator">:</span> JSONArray<span class="token punctuation">)</span><span class="token operator">:</span> ByteBuffer <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"convertFloatArrayToByteBuffer pointList=<span class="token interpolation variable">$pointList</span>"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>modelInputSize<span class="token punctuation">)</span>        byteBuffer<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>ByteOrder<span class="token punctuation">.</span><span class="token function">nativeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> step <span class="token operator">=</span> pointList<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> sampleCount        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until sampleCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> e <span class="token operator">=</span> pointList<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> step<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">as</span> JSONArray            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> <span class="token number">0</span> until tensorSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">val</span> value <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">as</span> Number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// x y w h density dtime</span>                byteBuffer<span class="token punctuation">.</span><span class="token function">putFloat</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> byteBuffer    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"ClientAI#Classifier"</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> MODEL_FILE <span class="token operator">=</span> <span class="token string">"mymodel.tflite"</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> FLOAT_TYPE_SIZE <span class="token operator">=</span> <span class="token number">4</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> PIXEL_SIZE <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> OUTPUT_CLASSES_COUNT <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> sampleCount <span class="token operator">=</span> <span class="token number">9</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> tensorSize <span class="token operator">=</span> <span class="token number">6</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> labelLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> labelRight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> labelUnknown <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">ClassifierLabelResult</span><span class="token punctuation">(</span><span class="token keyword">var</span> score<span class="token operator">:</span> Float<span class="token punctuation">,</span> <span class="token keyword">var</span> label<span class="token operator">:</span> String <span class="token punctuation">,</span><span class="token keyword">val</span> labelInt<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>        <span class="token keyword">val</span> format <span class="token operator">=</span> <span class="token function">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"<span class="token interpolation variable">$label</span> score:<span class="token interpolation"><span class="token delimiter variable">${</span>format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">MotionEventTracker</span><span class="token punctuation">(</span><span class="token keyword">var</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"ClientAI#tracker"</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> ITrackDataReadyListener <span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">onTrackDataReady</span><span class="token punctuation">(</span>dataList<span class="token operator">:</span> JSONArray<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> width <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> density <span class="token operator">=</span> <span class="token number">1f</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> listener<span class="token operator">:</span> ITrackDataReadyListener<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">fun</span> <span class="token function">checkAndInit</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> ITrackDataReadyListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener        <span class="token keyword">val</span> metric <span class="token operator">=</span> context<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>displayMetrics        width <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>metric<span class="token punctuation">.</span>widthPixels<span class="token punctuation">,</span> metric<span class="token punctuation">.</span>heightPixels<span class="token punctuation">)</span>        height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>metric<span class="token punctuation">.</span>widthPixels<span class="token punctuation">,</span> metric<span class="token punctuation">.</span>heightPixels<span class="token punctuation">)</span>        density <span class="token operator">=</span> metric<span class="token punctuation">.</span>density    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> currentEvents<span class="token operator">:</span> JSONArray<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> currentDownTime <span class="token operator">=</span> <span class="token number">0L</span>    <span class="token keyword">fun</span> <span class="token function">recordMotionEvent</span><span class="token punctuation">(</span>ev<span class="token operator">:</span> MotionEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>pointerCount <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentEvents <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>action <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentEvents <span class="token operator">=</span> <span class="token function">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            currentDownTime <span class="token operator">=</span> ev<span class="token punctuation">.</span>eventTime        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentEvents <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>historySize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until ev<span class="token punctuation">.</span>historySize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentEvents<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">buildPoint</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">getHistoricalX</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span><span class="token function">getHistoricalY</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span><span class="token function">getHistoricalEventTime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            currentEvents<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">buildPoint</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>x<span class="token punctuation">,</span> ev<span class="token punctuation">.</span>y<span class="token punctuation">,</span> ev<span class="token punctuation">.</span>eventTime<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>action <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentEvents<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    listener<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onTrackDataReady</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token comment">// 触发预测</span>                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"cache events, eventCount=<span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>, data=<span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 过滤点击和误触轨迹</span>                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"skipped short events, eventCount=<span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>, data=<span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            currentEvents <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">buildPoint</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Float<span class="token punctuation">,</span> y<span class="token operator">:</span> Float<span class="token punctuation">,</span> timestamp<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> JSONArray <span class="token punctuation">{</span>        <span class="token keyword">val</span> point <span class="token operator">=</span> <span class="token function">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        point<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        point<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>        point<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span>        point<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span>        point<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>density<span class="token punctuation">)</span>        point<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> currentDownTime<span class="token punctuation">)</span>        <span class="token keyword">return</span> point    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p>该工具类主要是对AI左右手进行辅助判断，因为模型的训练量不足，导致预测并不很准确。所以在这里使用一个队列工具类来获取最近三次的预测结果，之后再选择结果数最多的项来作为我们的预测结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueUtil</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> handList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> handLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> handRight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRecentHand</span><span class="token punctuation">(</span><span class="token keyword">int</span> labelHand<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> poll<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>labelHand<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>poll <span class="token operator">=</span> handList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>handList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>labelHand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>poll <span class="token operator">==</span> labelHand<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">compareRecentHand</span><span class="token punctuation">(</span>handLeft<span class="token punctuation">,</span> handRight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>poll<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token class-name">OperatingHandClassifier</span><span class="token punctuation">.</span>labelRight<span class="token operator">:</span>handRight<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">OperatingHandClassifier</span><span class="token punctuation">.</span>labelLeft<span class="token operator">:</span>handLeft<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>labelHand<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token class-name">OperatingHandClassifier</span><span class="token punctuation">.</span>labelRight<span class="token operator">:</span>handRight<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token class-name">OperatingHandClassifier</span><span class="token punctuation">.</span>labelLeft<span class="token operator">:</span>handLeft<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">compareRecentHand</span><span class="token punctuation">(</span>handLeft<span class="token punctuation">,</span> handRight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareRecentHand</span><span class="token punctuation">(</span><span class="token keyword">int</span> handLeft<span class="token punctuation">,</span> <span class="token keyword">int</span> handRight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handLeft <span class="token operator">&gt;</span> handRight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">OperatingHandClassifier</span><span class="token punctuation">.</span>labelLeft<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">OperatingHandClassifier</span><span class="token punctuation">.</span>labelRight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装到BaseActivity"><a href="#封装到BaseActivity" class="headerlink" title="封装到BaseActivity"></a>封装到BaseActivity</h3><p>为方便我们的使用，这里将调用模型进行预测的相关代码封装到 <code>BaseActivity</code> 中，等我们需要使用的时候，在继承其的相应 Activity 中加上该注解即可调用该功能。</p><p>关于该功能的完整代码，可以查看我们的大项目 <a href="https://github.com/dyjcow/qxy_potato/tree/feature_AIDialog_DYJ">dyjcow/qxy_potato at feature_AIDialog_DYJ (github.com)</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span> <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> VB <span class="token keyword">extends</span> <span class="token class-name">ViewBinding</span><span class="token punctuation">&gt;</span></span>        <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span><span class="token punctuation">,</span> <span class="token class-name">MotionEventTracker<span class="token punctuation">.</span>ITrackDataReadyListener</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * presenter层的引用     */</span>    <span class="token keyword">protected</span> <span class="token class-name">P</span> presenter<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">VB</span> binding<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">OperatingHandClassifier</span> classifier<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MotionEventTracker</span> tracker<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> hand <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/**     * {@inheritDoc}     * &lt;p&gt;     * Perform initialization of all fragments.     *     * @param savedInstanceState     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">BindEventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InitAIHand</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            classifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperatingHandClassifier</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            classifier<span class="token punctuation">.</span><span class="token function">checkAndInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tracker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MotionEventTracker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tracker<span class="token punctuation">.</span><span class="token function">checkAndInit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">DisplayUtil</span><span class="token punctuation">.</span><span class="token function">setCustomDensity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UltimateBarX</span><span class="token punctuation">.</span><span class="token function">statusBarOnly</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">transparent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//强制使用竖屏</span>        <span class="token function">setRequestedOrientation</span><span class="token punctuation">(</span><span class="token class-name">ActivityInfo</span><span class="token punctuation">.</span>SCREEN_ORIENTATION_PORTRAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>        binding <span class="token operator">=</span> <span class="token class-name">ViewBindingUtil</span><span class="token punctuation">.</span><span class="token function">inflateWithGeneric</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getLayoutInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 初始化presenter，也是与Activity的绑定     *     * @return 返回new的Presenter层的值     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">P</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 载入view的一些操作     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 载入数据操作     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 解除presenter与Activity的绑定     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">BindEventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InitAIHand</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            classifier<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SuccessHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">dismissSuccessLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">FailedHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">dismissFailedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 错误     *     * @param bean 错误信息     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span><span class="token class-name">BaseBean</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ToastUtil</span><span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">VB</span> <span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> binding<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Called to process touch screen events.  You can override this to     * intercept all touch screen events before they are dispatched to the     * window.  Be sure to call this implementation for touch screen events     * that should be handled normally.     *     * @param ev The touch screen event.     * @return boolean Return true if this event was consumed.     */</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tracker <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ev <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            tracker<span class="token punctuation">.</span><span class="token function">recordMotionEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTrackDataReady</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">JSONArray</span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classifier <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            classifier<span class="token punctuation">.</span><span class="token function">classifyAsync</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnSuccessListener</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                hand <span class="token operator">=</span> <span class="token class-name">QueueUtil</span><span class="token punctuation">.</span><span class="token function">getRecentHand</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getLabelInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">MotionEventTracker</span><span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>result<span class="token punctuation">.</span><span class="token function">getLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnFailureListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token class-name">MotionEventTracker</span><span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写弹窗代码"><a href="#编写弹窗代码" class="headerlink" title="编写弹窗代码"></a>编写弹窗代码</h3><p>该弹窗实际上使用了开源库实现滚动效果</p><p><a href="https://github.com/Bigkoo/Android-PickerView">Bigkoo/Android-PickerView: This is a picker view for android , support linkage effect, timepicker and optionspicker.（时间选择器、省市区三级联动） (github.com)</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUtil</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showOneOptionPicker</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> handLabel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OptionsPickerBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsPickerBuilder</span><span class="token punctuation">(</span><span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>options1<span class="token punctuation">,</span> options2<span class="token punctuation">,</span> options3<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//返回的分别是三个级别的选中位置</span>                    <span class="token class-name">BaseEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">EventCode</span><span class="token punctuation">.</span>SELECT_VERSION<span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>options1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">EventBusUtil</span><span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pvOptions <span class="token operator">=</span> builder                <span class="token punctuation">.</span><span class="token function">setDividerColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTextColorCenter</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span> <span class="token comment">//设置选中项文字颜色</span>                <span class="token punctuation">.</span><span class="token function">setContentTextSize</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDividerColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setDividerType</span><span class="token punctuation">(</span><span class="token class-name">WheelView<span class="token punctuation">.</span>DividerType</span><span class="token punctuation">.</span>WRAP<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">isAlphaGradient</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setLayoutRes</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_pickview_dialog<span class="token punctuation">,</span> v <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//根据传入的左右手的值来选择对应的位置控件</span>                    <span class="token class-name">TextView</span> textView<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>handLabel <span class="token operator">==</span> <span class="token class-name">OperatingHandClassifier</span><span class="token punctuation">.</span>labelRight<span class="token punctuation">)</span><span class="token punctuation">{</span>                        textView <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnSubmitRight<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        textView <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnSubmitLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment">//设置好控件后，让其显示</span>                    textView<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    textView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>v1 <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                        pvOptions<span class="token punctuation">.</span><span class="token function">returnData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        pvOptions<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pvOptions<span class="token punctuation">.</span><span class="token function">setPicker</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一级选择器</span>        pvOptions<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们看一下对应的布局代码</p><p>这里是按照原控件的布局代码来做的一个该着，下边的 <code>WheelView</code> 仍旧使用的是三个，未做优化改造。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/shape_sheet_dialog_bg_white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/btnSubmitLeft<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/pick_submit<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bold<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>invisible<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/optionspicker<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/btnSubmitRight<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/pick_submit<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bold<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>invisible<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/optionspicker<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginEnd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15dp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/optionspicker<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/white<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@id/btnSubmitRight<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.contrarywind.view.WheelView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/options1<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.contrarywind.view.WheelView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/options2<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.contrarywind.view.WheelView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/options3<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://pic.lxtlovely.top/blog/Screenshot_20220901_221740_com.qxy.potato.jpg" style="zoom:50%;"><img src="https://pic.lxtlovely.top/blog/Screenshot_20220901_221508_com.qxy.potatos.jpg" style="zoom:50%;"></p><p>当我们左手点击的时候，确认按钮在左边，右手点击的时候，确认按钮在右边</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://github.com/ahcyd008/OperatingHandRecognition">ahcyd008/OperatingHandRecognition: 端智能左右手识别学习Android Demo + 模型训练 (github.com)</a></p><p> <a href="https://juejin.cn/post/7123453378176221215#heading-95">【Android 客户端专场 学习资料二】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5017479/">Recognizing the Operating Hand and the Hand-Changing Process for User Interface Adjustment on Smartphones - PMC (nih.gov)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极简抖音中的优化点|青训营笔记</title>
      <link href="/2022/08/26/ji-jian-dou-yin-de-zhong-de-you-hua-dian/"/>
      <url>/2022/08/26/ji-jian-dou-yin-de-zhong-de-you-hua-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="极简抖音中的优化点-青训营笔记"><a href="#极简抖音中的优化点-青训营笔记" class="headerlink" title="极简抖音中的优化点|青训营笔记"></a>极简抖音中的优化点|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第15天</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文接上文  <a href="https://juejin.cn/post/7134354481101471774">编写极简抖音的难点|青训营笔记 - 掘金 (juejin.cn)</a>，继续阐述我们在编写极简抖音期间进行优化的点。</p><p>对一个项目进行优化的时候，首先我们需要去检测项目中有什么需要优化的点。这时我们便需要使用到性能分析工具来对APP的各项性能进行检测，在本文中使用到的性能分析工具是 Dokit 。</p><p>下面我将罗列出几项我在项目中发现的可优化点，以及其优化方案。</p><h2 id="初次启动白屏"><a href="#初次启动白屏" class="headerlink" title="初次启动白屏"></a>初次启动白屏</h2><p>由于APP启动的时候需要先启动 <code>Application</code> 进行初始化，在这个期间，会带来一个短暂的白屏展示，而这个白屏会给用户带来一个卡顿的感觉。</p><p>我们需要把白屏变成图案，这样子用户启动的时候就不会是看到一片空白。我使用到的方案是新建一个 <code>SplashActivity</code>,让其来充当一个启动页。</p><p>我们要解决以下几点问题：</p><ol><li>如何让未展示到 <code>SplashActivity</code> 的界面的时候，其背景就已经是我们需要设置的图案了</li><li><code>SplashActivity</code> 如何有效降低内存占用</li></ol><p>首先，第一个问题，我们需要设置对应的主题，因为 <code>Activity</code> 在未加载绑定的布局资源的时候，会先加载主题文件，所以我们修改主题文件就可以把对应的白屏变为我们想要的启动页了</p><p>下面展示我的相关代码</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--res/drawable/splash_bg.xml--&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer-list</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/potato<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer-list</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AndroidManifest.xml--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.module.mine.activity.SplashActivity<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/SplashTheme<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SplashActivity.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SplashActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_splash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">HomeActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像上方这样子设置后，我们在启动的时候，就可以直接看到我们的启动页了</p><p><img src="https://pic.lxtlovely.top/blog/Screenshot_20220823_011947_com.qxy.potato.jpg"></p><h2 id="ViewPage2预加载带来的多次请求"><a href="#ViewPage2预加载带来的多次请求" class="headerlink" title="ViewPage2预加载带来的多次请求"></a>ViewPage2预加载带来的多次请求</h2><p>当我们使用到 <code>ViewPage2</code> 去做一些 <code>fragment</code> 的加载的时候，我们有需求让滑动到对应的位置的时候才进行页面的加载，并且滑动回去的时候不再进行加载。</p><p>但是 <code>ViewPage</code> 本身就预设定了会进行预加载，我们无法对其预加载做一个禁止。所以要完成我们的业务，我们可以对 <code>Fragment</code> 做一个懒加载，就是在加载的时候，预先加载布局，但是不加载数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 关闭预加载</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>viewPager2<span class="token punctuation">.</span><span class="token function">setOffscreenPageLimit</span><span class="token punctuation">(</span><span class="token class-name">ViewPager2</span><span class="token punctuation">.</span>OFFSCREEN_PAGE_LIMIT_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可以不设置 因为默认是 -1 默认不进行预加载</span><span class="token comment">// 这个必须设置 不然仍然会启用预加载</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView</span><span class="token punctuation">)</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>viewPager2<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setItemPrefetchEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置缓存数量，对应 RecyclerView 中的 mCachedViews，即屏幕外的视图数量,此处设置为2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView</span><span class="token punctuation">)</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>viewPager2<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setItemViewCacheSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上述的代码，就可以让 <code>ViewPage</code> 页面进行懒加载，并且会对之前加载的页面进行一定数量的缓存</p><h2 id="布局层过多，导致页面绘制压力大"><a href="#布局层过多，导致页面绘制压力大" class="headerlink" title="布局层过多，导致页面绘制压力大"></a>布局层过多，导致页面绘制压力大</h2><p><img src="https://pic.lxtlovely.top/blog/20220826101002.png"></p><p>在此，我们容易看到，APP 的UI层级普遍过高，这是由于使用线性布局等，会带来层级过多的问题，这会导致App显示的时候需要渲染的次数也多，这也直接导致了 APP 的性能问题。譬如在启动一个 <code>Activity</code> ，或者页面有动画的时候，会看到帧率明显降低，并且会导致 APP 出现明显的卡顿。</p><p>我的解决方案是，选用约束布局，当我们的页面比较复杂的时候，选用约束布局会使得我们的布局层数可以明显的减低。关于约束布局的学习，我们可以查看这篇文章 <a href="https://mp.weixin.qq.com/s/Q-DuqUvYsr7vXA0ViAUA1Q">最全面的ConstraintLayout教程 (qq.com)</a></p><h2 id="WebView的启动耗时以及内存占用"><a href="#WebView的启动耗时以及内存占用" class="headerlink" title="WebView的启动耗时以及内存占用"></a>WebView的启动耗时以及内存占用</h2><p>当我们使用 WebView 的时候，我们一般会给其单开一个进程，这样子 <code>WebView</code> 也就不会影响到我们的主进程。由于 <code>WebView</code> 容易发生内存泄露，所以它会有相对大的崩溃可能性，所以我们为其单开一个进程，提高 App 可使用的内存并且不影响主进程的使用。</p><p>但是这也产生一个问题，那就是新开一个进程的时候，会去重新执行一次 <code>Application</code> ，会导致第一次开启新的进程时候会有较久的白屏</p><p>解决方案：</p><ul><li>优化 <code>Applicaiton</code> 中对各种类型资源的加载，对相关的进程只做必要额加载</li><li>多进程的开启不放到需要跳转时候才开启，对进程进行一个预加载</li></ul><h3 id="Application-优化"><a href="#Application-优化" class="headerlink" title="Application 优化"></a>Application 优化</h3><p>下面附上我的 <code>Application</code> 的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> context<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> sCurProcessName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> packageName<span class="token punctuation">;</span>    <span class="token comment">/**     * Set the base context for this ContextWrapper.  All calls will then be     * delegated to the base context.  Throws     * IllegalStateException if a base context has already been set.     *     * @param base The new base context for this wrapper.     */</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">attachBaseContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attachBaseContext</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        processName <span class="token operator">=</span> <span class="token function">getCurProcessName</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        packageName <span class="token operator">=</span> <span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isMainProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> processName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMainProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            MMKV<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MMKV<span class="token punctuation">.</span><span class="token function">mmkvWithID</span><span class="token punctuation">(</span><span class="token string">"MyID"</span><span class="token punctuation">,</span> MMKV<span class="token punctuation">.</span>SINGLE_PROCESS_MODE<span class="token punctuation">,</span> <span class="token class-name">GlobalConstant</span><span class="token punctuation">.</span>MMKV_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//载入Dokit监测</span>            <span class="token keyword">new</span> <span class="token class-name">DoKit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">productId</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>value_dokit_pid<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//使用订阅索引，加快编译速度</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndex</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEventBusIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">installDefaultEventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 抖音授权</span>            <span class="token class-name">String</span> clientkey <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>value_client_key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DouYinOpenApiFactory</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DouYinOpenConfig</span><span class="token punctuation">(</span>clientkey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//初始化</span>            <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置UI工具</span>            <span class="token class-name">RxTool</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//网络缓存</span>            <span class="token class-name">RetrofitCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">QbSdk</span><span class="token punctuation">.</span><span class="token function">initX5Environment</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">QbSdk<span class="token punctuation">.</span>PreInitCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCoreInitFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 内核初始化完成，可能为系统内核，也可能为系统内核</span>                <span class="token punctuation">}</span>                <span class="token comment">/**                 * 预初始化结束                 * 由于X5内核体积较大，需要依赖网络动态下发，所以当内核不存在的时候，默认会回调false，此时将会使用系统内核代替                 * @param isX5 是否使用X5内核                 */</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewInitFinished</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isX5<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"是否使用腾讯内核："</span> <span class="token operator">+</span> isX5<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//设置打印开关</span>        <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">setIsLog</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册Activity生命周期</span>        <span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">getActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCurProcessName</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>sCurProcessName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sCurProcessName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sCurProcessName <span class="token operator">=</span> <span class="token function">getProcessName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>sCurProcessName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sCurProcessName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sCurProcessName <span class="token operator">=</span> <span class="token function">getProcessName</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>sCurProcessName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> sCurProcessName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//获取系统的ActivityManager服务</span>            <span class="token class-name">ActivityManager</span> am <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ActivityManager</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span>ACTIVITY_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>am <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> sCurProcessName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ActivityManager<span class="token punctuation">.</span>RunningAppProcessInfo</span> appProcess <span class="token operator">:</span> am<span class="token punctuation">.</span><span class="token function">getRunningAppProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>appProcess<span class="token punctuation">.</span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sCurProcessName <span class="token operator">=</span> appProcess<span class="token punctuation">.</span>processName<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sCurProcessName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getProcessName</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"/proc/"</span> <span class="token operator">+</span> pid <span class="token operator">+</span> <span class="token string">"/cmdline"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> processName <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>processName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                processName <span class="token operator">=</span> processName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> processName<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Application 中，我对当前进程进行判断，在对应的进程中才加载对应的资源，避免资源的过度加载</p><h3 id="进程的预加载"><a href="#进程的预加载" class="headerlink" title="进程的预加载"></a>进程的预加载</h3><p>对应多进程中，我们进行一个预加载，可以让APP需要启用到这个进程的时候，检测到有对应的进程已经创建了，就不会再次重新启用这个进程了，这样子就和打开一个普通的 <code>Activity</code> 的界面速度是一样的了。</p><p>进程预加载，我们需要使用到不可的服务或者广播，只需要将其绑定在同一个进程中，且对应服务为空即可。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AndroidManifest.xml--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>          <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.module.mine.activity.WebViewActivity<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>configChanges</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orientation|screenSize|keyboardHidden<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:h5<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>screenOrientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/BlackTheme<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span>         <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.module.mine.service.PreLoadService<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:h5<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreLoadService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">PreLoadService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO: Return the communication channel to the service.</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Not yet implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在对应的生命周期启用即可</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startHideService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">PreLoadService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">stopHideService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">PreLoadService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stopService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WebView启动白屏"><a href="#WebView启动白屏" class="headerlink" title="WebView启动白屏"></a>WebView启动白屏</h2><p>关于启动页白屏问题，和 <a href="#%E5%88%9D%E6%AC%A1%E5%90%AF%E5%8A%A8%E7%99%BD%E5%B1%8F">初次启动白屏</a> 的解决方案一致，我们设置这个Activity的背景为黑色，与抖音页面的背景一个颜色即可。</p><p>同时，我们需要注意的是，<code>WebView</code> 的背景也请记得设置为黑色</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_34681580/article/details/104815471">(Android 多进程导致 Application 重复创建问题_wings专栏的博客-CSDN博客_android application多次创建</a></p>]]></content>
      
      
      <categories>
          
          <category> Android实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 实战 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写极简抖音的难点|青训营笔记</title>
      <link href="/2022/08/25/bian-xie-ji-jian-dou-yin-de-nan-dian/"/>
      <url>/2022/08/25/bian-xie-ji-jian-dou-yin-de-nan-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="编写极简抖音的难点-青训营笔记"><a href="#编写极简抖音的难点-青训营笔记" class="headerlink" title="编写极简抖音的难点|青训营笔记"></a>编写极简抖音的难点|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第14天</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在暑假期间，我参与了青训营Android客户端的结营大项目。需求是做一个极简抖音，其功能包括以下几点：</p><p>项目需要实现抖音的 <strong>个人中心</strong> 以及 <strong>榜单页面</strong> 。</p><p><strong>个人中心</strong> 为APP的主页面，实现了以下内容。</p><ol><li>个人信息的展示</li><li>端侧对数据信息的统计</li><li>点击跳转到详情页查看粉丝和关注者列表</li><li>个人作品的浏览，浏览时个人背景渐变折叠</li><li>点击作品缩略图，页面打开<strong>自动播放</strong></li><li>播放页面实现视频流</li><li>允许从播放页面打开抖音</li><li>登录、登出</li><li>登录状态过期自判断，自动跳转提醒重新登录</li></ol><p><strong>榜单页面</strong> 为APP的功能页面</p><ol><li><p>单页面切换查看三种类型的榜单</p></li><li><p>点击榜单时间，浏览往期榜单序号以及可以选择序号查看往期内容</p></li><li><p>点击榜单的子项，可以下弹页面，提供查看子项的详细信息</p></li></ol><p>上面描述的功能是项目中做出了要求，且我们已实现的功能。下面来讲以下我所遇到的<strong>难点</strong></p><h2 id="授权-第一个拦路虎"><a href="#授权-第一个拦路虎" class="headerlink" title="授权-第一个拦路虎"></a>授权-第一个拦路虎</h2><p>极简抖音依赖于抖音登录，那么就需要使用到抖音的第三方sdk。由于在之前的项目中未使用过这类第三方sdk来进行登录，对其特性规则并不熟悉，阅读文档的时候，有些重要的点也没抓到，导致第一个授权问题就栽跟头了。</p><ul><li><p><strong>白名单</strong></p><p>文档需要开启一个白名单，才能完成第一次的授权绑定。但是白名单 <code>trial.whitelist</code> 只在第一次出现了，后面的申请文档没有再讲述过，所以我在未加该字段的情况下就去申请，导致一直返回我不在白名单的错误</p><p><img src="https://pic.lxtlovely.top/blog/20220825234643.png"></p></li><li><p><strong>POST</strong> 的 body 类型</p><p>在看到开发文档中给出的 body 类型时候，按照类型和参数填入 Apifox 中进行测试，可以接收到正确的字段。但是当我使用代码写入的时候，我直接新建一个数据类，使用 <code>Retrofit</code> 中的 <code>@Body</code> 传入，结果发现一直传回的是数据错误。知道仔细翻阅资料，我才发现我的理解不到位，直接使用 <code>@Body</code> 注解，传入的类会变为 json 格式，很显然这不符合我们的要求。后来改用 <code>@Field</code> 才成功，因为该字段传入的 body 才是对应类似于 key-value 类型的</p><p><img src="https://pic.lxtlovely.top/blog/20220825234723.png"></p></li></ul><h2 id="Client-Token-的自动更新"><a href="#Client-Token-的自动更新" class="headerlink" title="Client_Token 的自动更新"></a>Client_Token 的自动更新</h2><p>client_token 的自动更新方案让我想很久，我需要其<strong>更新次数尽量少</strong>，在APP<strong>开启时候</strong>才会去<strong>执行更新</strong>，尽量在需要用到token之前就更新好。</p><p>所以我的解决方案就是在主页面启动的时候才进行一次更新，及页面启动一次就会获得一次最新的 token (其有效时间为2h)，之后再启动WorkManager进行2h的自动更新，在主页面销毁的时候，注销这个后台任务。这样子就可以大概率的确保其会自动更新(当然，你得是将改APP挂了2h，未将其销毁)。但是由于其的不稳定性，我还是在获取token前做了判断，若是已经过期，就重新获取一次。</p><p><img src="https://pic.lxtlovely.top/blog/image-20220825234859618.png"></p><h2 id="加载Dialog的造成的崩溃"><a href="#加载Dialog的造成的崩溃" class="headerlink" title="加载Dialog的造成的崩溃"></a>加载Dialog的造成的崩溃</h2><p>在我对网络加载开启Dialog的加载动画的时候，我发现他不能有两次网络加载。无论网络加载是否做好了同步。经过排查发现，我是错误的使用了单例，由于我错误认为 Dialog 调用了 cancel() 方法之后，其实例依然存在，所以对 Dialog 的创建使用了单例模式。最后造成了，当 Dialog已经取消的时候，仍旧去调用已经不存在的 Dialog 造成了空指针的错误。调用Dialog 的时候不该使用单例模式。</p><p><img src="https://pic.lxtlovely.top/blog/20220825234920.png"></p><p>下一篇，我将介绍项目中的优化</p>]]></content>
      
      
      <categories>
          
          <category> Android实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿写一个登录页(Java代码篇)|青训营笔记</title>
      <link href="/2022/08/25/fang-xie-yi-ge-deng-lu-ye-java-dai-ma-pian/"/>
      <url>/2022/08/25/fang-xie-yi-ge-deng-lu-ye-java-dai-ma-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="仿写一个登录页-Java代码篇-青训营笔记"><a href="#仿写一个登录页-Java代码篇-青训营笔记" class="headerlink" title="仿写一个登录页(Java代码篇)|青训营笔记"></a>仿写一个登录页(Java代码篇)|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第13天</strong></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>Constraintlayout：</strong><a href="https://mp.weixin.qq.com/s/Q-DuqUvYsr7vXA0ViAUA1Q">最全面的ConstraintLayout教程 (qq.com)</a></p><p><strong>ImageFilterView</strong>：<a href="https://blog.csdn.net/cpcpcp123/article/details/125330692">ConstraintLayout官方提供圆角ImageFilterView_沙漠一只雕得儿得儿的博客-CSDN博客_constraintlayout 圆角</a></p><p><strong>Shape 标签</strong>：<a href="https://www.jianshu.com/p/e93a95e7b7da">Android-Shape标签使用 - 简书 (jianshu.com)</a></p><p><strong>ImageFilterView</strong> ：<a href="https://www.jianshu.com/p/ab4aad20ed92">圆角控件之ImageFilterView详解 - 简书 (jianshu.com)</a></p><p><strong>MVP架构</strong>：<a href="https://juejin.cn/post/7132504015908274213">带你封装MVP架构(上)|青训营笔记 - 掘金 (juejin.cn)</a></p><h2 id="你会收获"><a href="#你会收获" class="headerlink" title="你会收获"></a>你会收获</h2><ol><li>如何编写一个美观的登录界面</li><li>如何提示用户查看 协议</li><li>如何载入跳转登录抖音，且回调回对应的页面</li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文接前文的 <strong>布局篇</strong> ，会讲述java代码层面相关的问题</p><p>首先我们分析以下业务逻辑，其逻辑如下</p><ol><li>进入登录页</li><li>勾选已阅读协议的按钮才可成功触发登录点击按钮的事件</li><li>成功触发登录事件后跳转去抖音sdk的授权页</li><li>抖音授权后带着是否成功的消息返回登录页</li><li>登录页对返回的消息做判断，授权成功则存储好Token跳转去个人主页，否则留在登录页</li></ol><p>确定完对应逻辑后，开工！</p><h2 id="编码流程"><a href="#编码流程" class="headerlink" title="编码流程"></a>编码流程</h2><h3 id="导入抖音SDK的依赖"><a href="#导入抖音SDK的依赖" class="headerlink" title="导入抖音SDK的依赖"></a>导入抖音SDK的依赖</h3><p>要使用抖音的sdk，需要先去 <a href="https://developer.open-douyin.com/">抖音开放平台 (open-douyin.com)</a> 进行申请。申请了之后创建对应的移动应用且审批通过后，即可获得对应的 key 和 secret 。</p><p>做完上面的一步后，我们便可导入依赖</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//项目级build.gradle</span>repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span> url <span class="token string">'https://artifact.bytedance.com/repository/AwemeOpenSDK'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//app/build.gradle</span>dependencies <span class="token punctuation">{</span><span class="token comment">//抖音</span>    implementation <span class="token string">'com.bytedance.ies.ugc.aweme:opensdk-china-external:0.1.9.0'</span>    implementation <span class="token string">'com.bytedance.ies.ugc.aweme:opensdk-common:0.1.9.0'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//AndroidManifest.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span> <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.xxxx<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queries</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--允许查询抖音和抖音极速版的软件包信息--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ss.android.ugc.aweme<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ss.android.ugc.aweme.lite<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queries</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做完上面的，便完成了依赖的导入</p><h3 id="Application层初始化"><a href="#Application层初始化" class="headerlink" title="Application层初始化"></a>Application层初始化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抖音授权</span><span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> clientkey <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>value_client_key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对应的key需要就是申请得到的</span><span class="token class-name">DouYinOpenApiFactory</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DouYinOpenConfig</span><span class="token punctuation">(</span>clientkey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="V层编码-Activity层"><a href="#V层编码-Activity层" class="headerlink" title="V层编码(Activity层)"></a>V层编码(Activity层)</h3><p>我们阅读文档会知道，回调的activity需要继承一个接口，需要重写的方法中就可以获得到授权的对应信息。话不多说，直接上代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginPresenter</span><span class="token punctuation">,</span> <span class="token class-name">ActivityLoginBinding</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ILoginView</span><span class="token punctuation">,</span> <span class="token class-name">IApiEventHandler</span> <span class="token punctuation">{</span>    <span class="token class-name">DouYinOpenApi</span> douYinOpenApi<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> mExitTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> is_clicked_user_agreement <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 初始化presenter，也是与Activity的绑定     *     * @return 返回new的Presenter层的值     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">LoginPresenter</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginPresenter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 载入view的一些操作     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>btnLogin<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>is_clicked_user_agreement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">sendAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">showAnimator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>checkBox<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span><span class="token class-name">CompoundButton</span> compoundButton<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                is_clicked_user_agreement <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tvUserAgreement<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>view <span class="token operator">-&gt;</span> <span class="token class-name">ToastUtil</span><span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">"待添加用户协议"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 载入数据操作     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        douYinOpenApi <span class="token operator">=</span> <span class="token class-name">DouYinOpenApiFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        douYinOpenApi<span class="token punctuation">.</span><span class="token function">handleIntent</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sendAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Authorization<span class="token punctuation">.</span>Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Authorization<span class="token punctuation">.</span>Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span>scope <span class="token operator">=</span> <span class="token string">"user_info,trial.whitelist"</span><span class="token punctuation">;</span>                          <span class="token comment">// 用户授权时必选权限</span>        <span class="token comment">// 用户授权时可选权限（默认选择）</span>        request<span class="token punctuation">.</span>optionalScope1 <span class="token operator">=</span> <span class="token string">"fans.list,"</span> <span class="token operator">+</span>                <span class="token string">"following.list,"</span> <span class="token operator">+</span>                <span class="token string">"video.list,"</span> <span class="token operator">+</span>                <span class="token string">"video.data"</span><span class="token punctuation">;</span><span class="token comment">//        request.optionalScope0 = mOptionalScope1;    // 用户授权时可选权限（默认不选）</span>        request<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"ww"</span><span class="token punctuation">;</span>                                   <span class="token comment">// 用于保持请求和回调的状态，授权请求后原样带回给第三方。</span>        request<span class="token punctuation">.</span>callerLocalEntry <span class="token operator">=</span> <span class="token string">"com.qxy.potato.module.mine.activity.LoginActivity"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> douYinOpenApi<span class="token punctuation">.</span><span class="token function">authorize</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 优先使用抖音app进行授权，如果抖音app因版本或者其他原因无法授权，则使用wap页授权</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showAnimator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RxToast</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>read_and_click<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectAnimator</span> animatorLeft <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>checkBox<span class="token punctuation">,</span>                <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">20f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectAnimator</span> animatorRight <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tvUserAgreement<span class="token punctuation">,</span>                <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">20f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AnimatorSet</span> animatorSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animatorSet<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animatorSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>animatorLeft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>animatorRight<span class="token punctuation">)</span><span class="token punctuation">;</span>        animatorSet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 成功登录的操作     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">HomeActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 登录失败的操作     *     * @param msg     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginFailed</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ToastUtil</span><span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Called when the activity has detected the user's press of the back     * key. The {@link #getOnBackPressedDispatcher() OnBackPressedDispatcher} will be given a     * chance to handle the back button before the default behavior of     * {@link Activity#onBackPressed()} is invoked.     *     * @see #getOnBackPressedDispatcher()     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> OVER_TIME <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mExitTime<span class="token punctuation">)</span> <span class="token operator">&gt;</span> OVER_TIME<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ToastUtil</span><span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>double_quit<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mExitTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">closeAllActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReq</span><span class="token punctuation">(</span><span class="token class-name">BaseReq</span> baseReq<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResp</span><span class="token punctuation">(</span><span class="token class-name">BaseResp</span> baseResp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>baseResp<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">CommonConstants<span class="token punctuation">.</span>ModeType</span><span class="token punctuation">.</span>SEND_AUTH_RESPONSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Authorization<span class="token punctuation">.</span>Response</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Authorization<span class="token punctuation">.</span>Response</span><span class="token punctuation">)</span> baseResp<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>baseResp<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"onRES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                presenter<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>authCode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">ToastUtil</span><span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">"授权失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorIntent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我来浅析以下V层的代码</p><ol><li><p>首先，我们定义三个全局变量 ，其分别是 抖音登录的相关类的变量、记录返回键点击事件的 int 变量、记录是否点击了阅读协议的勾选</p></li><li><p>然后，<code>initView</code> 的类中，分别设置了 登录按钮、勾选框以及用户协议的相关点击监听。</p></li><li><p>点击登录按钮后会判断是否勾选了选择框，未勾选的话就会进行动画提示，勾选了的话就会跳转到对应的登录跳转的方法</p></li><li><p>登录跳转的方法中，<code>callerLocalEntry</code> 是设置了回调的路径，设置的是登录页自己，这样子跳转去授权后又会跳转会当前页面了</p></li><li><p>动画提示的方法中，使用的是属性动画里面的组合动画，可以让提示行的文字左右震动</p></li><li><p>接下来是接口类重写的方法，事实上我们只需要重写 <strong><code>onResp(BaseResp baseResp)</code></strong> 即可。对回调的值进行获取和判断，成功就传入 <code>authCode</code> 到 <code>presenter</code> 层的获取 <code>Token</code></p></li><li><p>在  <code>onBackPressed()</code> 中，我们设定滑动两次才退出APP，因为此时的登录页已经是 APP 唯一的一个页面了</p></li></ol><h3 id="P层编码-Presenter层"><a href="#P层编码-Presenter层" class="headerlink" title="P层编码(Presenter层)"></a>P层编码(Presenter层)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ILoginView</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">MMKV</span> mmkv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">defaultMMKV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LoginPresenter</span><span class="token punctuation">(</span><span class="token class-name">ILoginView</span> baseView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>baseView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取到 AccessToken 并存储     *     * @param authCode 授权码     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> authCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>client_secret<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>value_client_secret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span> authCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>grant_type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>authorization_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>client_key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>value_client_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDisposable</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">apiServer<span class="token punctuation">.</span></span>PostAccessToken</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">BaseObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseBean</span><span class="token punctuation">&lt;</span><span class="token class-name">AccessToken</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>baseView<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        baseView<span class="token punctuation">.</span><span class="token function">loginFailed</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">BaseBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccessToken</span><span class="token punctuation">&gt;</span></span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mmkv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">GlobalConstant</span><span class="token punctuation">.</span>ACCESS_TOKEN<span class="token punctuation">,</span> o<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">getAccess_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mmkv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">GlobalConstant</span><span class="token punctuation">.</span>REFRESH_TOKEN<span class="token punctuation">,</span> o<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">getRefresh_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mmkv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">GlobalConstant</span><span class="token punctuation">.</span>OPEN_ID<span class="token punctuation">,</span> o<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">getOpen_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mmkv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">GlobalConstant</span><span class="token punctuation">.</span>IS_LOGIN<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">getAccess_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        baseView<span class="token punctuation">.</span><span class="token function">loginSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于P层的代码中，发起了网络请求后，若请求成功，则存储到 <code>Token</code> 值以及 <code>open_id</code> 值，然后执行V层的 <code>loginSuccess()</code> ；否则执行 <code>loginFailed(msg)</code>；</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>做完上边的工作就大功告成了，下边看一下展示效果</p><p><img src="https://pic.lxtlovely.top/blog/SVID_20220825_105638_1_.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Android实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿写一个登录页(布局篇)|青训营笔记</title>
      <link href="/2022/08/24/fang-xie-yi-ge-deng-lu-ye-bu-ju-pian/"/>
      <url>/2022/08/24/fang-xie-yi-ge-deng-lu-ye-bu-ju-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="仿写一个登录页-布局篇-青训营笔记"><a href="#仿写一个登录页-布局篇-青训营笔记" class="headerlink" title="仿写一个登录页(布局篇)|青训营笔记"></a>仿写一个登录页(布局篇)|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第12天</strong></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>Constraintlayout：</strong><a href="https://mp.weixin.qq.com/s/Q-DuqUvYsr7vXA0ViAUA1Q">最全面的ConstraintLayout教程 (qq.com)</a></p><p><strong>ImageFilterView</strong>：<a href="https://blog.csdn.net/cpcpcp123/article/details/125330692">ConstraintLayout官方提供圆角ImageFilterView_沙漠一只雕得儿得儿的博客-CSDN博客_constraintlayout 圆角</a></p><p><strong>Shape 标签</strong>：<a href="https://www.jianshu.com/p/e93a95e7b7da">Android-Shape标签使用 - 简书 (jianshu.com)</a></p><p><strong>ImageFilterView</strong> ：<a href="https://www.jianshu.com/p/ab4aad20ed92">圆角控件之ImageFilterView详解 - 简书 (jianshu.com)</a></p><p><strong>MVP架构</strong>：<a href="https://juejin.cn/post/7132504015908274213">带你封装MVP架构(上)|青训营笔记 - 掘金 (juejin.cn)</a></p><h2 id="你会收获"><a href="#你会收获" class="headerlink" title="你会收获"></a>你会收获</h2><ol><li>如何编写一个美观的登录界面</li><li>如何提示用户查看 协议</li><li>如何载入跳转登录抖音，且回调回对应的页面</li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 APP <strong>派对岛</strong> 的时候，发现它的页面很好看，同时其首要的登录方法也是跳转去采用抖音来登录的。符合当前的业务需求，所以决定仿写该页面作为大作业的登录界面。话不多说，开始仿写吧😁</p><p><img src="https://pic.lxtlovely.top/blog/Screenshot_20220824_151135_com.bytedance.android.pi.jpg"></p><h2 id="编写页面"><a href="#编写页面" class="headerlink" title="编写页面"></a>编写页面</h2><p>根据 <strong>派对岛</strong> 的界面设计，我们需要思考以下三种设计的实现</p><ol><li>上方 APP logo 的展示，需要把图片切为圆角</li><li>下方的按钮其值需要为渐变色</li><li>需要勾选已阅读用户协议之后，点击登录按钮才可发起跳转</li></ol><h3 id="图片圆角"><a href="#图片圆角" class="headerlink" title="图片圆角"></a>图片圆角</h3><p>让图片显示圆角，我们可以直接使用 <code>ImageFilterView</code> 这个组件，对 <code>roundPercent</code> 这个属性做一个设置即可。这是设置圆角比例，最大到1，设置为1的时候就是原型，使用者可以根据自己的需求来使用不同的比例。可以<a href="https://blog.csdn.net/cpcpcp123/article/details/125330692">点击</a>查看更多的属性</p><h3 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h3><p><img src="https://pic.lxtlovely.top/blog/20220824205225.png"></p><p>我们可以用shape标签来设置一个渐变色区间以及圆角功能，再将这个 <code>shape</code> 标签设置到 <code>Button</code> 的 <code>style</code> 中。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--res/drawable/shape_login_gradient.xml--&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gradient</span>        <span class="token attr-name"><span class="token namespace">android:</span>type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>linear<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>angle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>startColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/blue_left<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>centerColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/blue_center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>endColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/blue_right<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span>        <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>shape</code> 里面的 <code>gradient</code> ，可以设置三种不同种类的渐变色，这里设置是水平样式。同时设置了三种颜色让其做对应的渐变。<code>corners</code> 标签内写的是圆角的值。我们可以在此输入圆角的值来进行设置。到布局文件之中就可以写入设置样式了。</p><h3 id="协议勾选"><a href="#协议勾选" class="headerlink" title="协议勾选"></a>协议勾选</h3><p><img src="https://pic.lxtlovely.top/blog/20220824205335.png"></p><p>协议的勾选，我们选用的布局是 checkBox 按钮，这种按钮点击的时候有勾选和不勾选的效果，关于其勾选状态的监听以及对状态的设置，我们会在下一篇关于java的代码中对其进行行为判断，本篇先不做分析</p><h3 id="利用相对布局编写页面"><a href="#利用相对布局编写页面" class="headerlink" title="利用相对布局编写页面"></a>利用相对布局编写页面</h3><p>下文便是使用 <code>ConstraintLayout</code> 编写的页面，我们可以进行拖拽或者使用代码编写。使用相对布局的好处是，当布局复杂的时候，他会让我们的布局层级相对较低，这也让我们的画面渲染次数较少，可以提高APP的性能。同时，如果我们能熟练的使用拖拽功能，那么拖拽生成的速度会比编写代码要高上许多。下面的代码就是位置用拖拽产生，对应的修饰是手动编码完成的。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--res/layout/activity_login.xml--&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.module.mine.activity.LoginActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.utils.widget.ImageFilterView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/imageFilterView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/potato<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.26999998<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>roundPercent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.7<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/btn_login<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginEnd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/shape_login_gradient<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>paddingBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/login<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/white<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/imageFilterView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_bias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.65<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/checkBox<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/has_read<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/gray<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tv_user_agreement<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tv_app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textAllCaps</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/black<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>26sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bold<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintEnd_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/imageFilterView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/imageFilterView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/imageFilterView<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tv_user_agreement<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginStart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/user_agreement<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/Gray30<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/checkBox<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toEndOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/checkBox<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/checkBox<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文的代码中多使用相对的位置，有以下的特点</p><ul><li>顶部的图标置于纵向 27% 的位置</li><li>按钮以顶部图标为相对顶部，置于 65% 的位置</li><li>底部的阅读协议的提示，置于离底部 40dp 的位置</li></ul><p>最后得到的效果是如下样式</p><p><img src="https://pic.lxtlovely.top/blog/Screenshot_20220824_155417_com.qxy.potato.jpg"></p><p>下一篇文章，将会介绍Java代码如何编写</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/Q-DuqUvYsr7vXA0ViAUA1Q">最全面的ConstraintLayout教程 (qq.com)</a></p><p><a href="https://blog.csdn.net/cpcpcp123/article/details/125330692">ConstraintLayout官方提供圆角ImageFilterView_沙漠一只雕得儿得儿的博客-CSDN博客_constraintlayout 圆角</a></p><p><a href="https://www.jianshu.com/p/e93a95e7b7da">Android-Shape标签使用 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/ab4aad20ed92">圆角控件之ImageFilterView详解 - 简书 (jianshu.com)</a></p><p><a href="https://juejin.cn/post/7132504015908274213">带你封装MVP架构(上)|青训营笔记 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> Android实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你封装MVP架构(下)|青训营笔记</title>
      <link href="/2022/08/18/dai-ni-feng-zhuang-mvp-jia-gou-xia/"/>
      <url>/2022/08/18/dai-ni-feng-zhuang-mvp-jia-gou-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="带你封装MVP架构-下-青训营笔记"><a href="#带你封装MVP架构-下-青训营笔记" class="headerlink" title="带你封装MVP架构(下)|青训营笔记"></a>带你封装MVP架构(下)|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第11天</strong></p><blockquote><p>文章是《带你封装MVP架构》的下篇</p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>MVP</strong>：<a href="https://www.jianshu.com/p/4b754ea48a40">MVP架构模式详解 - 简书 (jianshu.com)</a></p><p><strong>Retrofit</strong>：<a href="https://juejin.cn/post/6844903876559110151#heading-7">Retrofit使用详解-注解介绍 - 掘金 (juejin.cn)</a></p><p><strong>RxJava</strong>：<a href="https://www.jianshu.com/p/a406b94f3188">Carson带你学Android：这是一篇清晰易懂的Rxjava入门教程 - 简书 (jianshu.com)</a></p><p><strong>ViewBinding</strong>:<a href="https://guolin.blog.csdn.net/article/details/113089706">kotlin-android-extensions插件也被废弃了？扶我起来_guolin的博客-CSDN博客_kotlin-android-extensions废弃</a></p><h2 id="提取Base基类"><a href="#提取Base基类" class="headerlink" title="提取Base基类"></a>提取Base基类</h2><p>在 <code>Base</code> 类中，我们需要做的就是把每个 <code>Activity</code> 或者 <code>Fragment</code> 等这些组件，或者对应的 <code>MVP</code> 层会用到的基本操作以及联系都编写好。后续模块编写的时候直接继承这些 <code>Base</code> 类即可，如此可以免去过多不必要的操作，让开发人员可以把精力更多的花在有意义的地方。</p><h3 id="BaseView"><a href="#BaseView" class="headerlink" title="BaseView"></a>BaseView</h3><p><code>BaseView</code>  此接口是MVP模式中，用于各模块链接的关键。我们可以在此处定义好所有 Activity 和 Fragment 可能都会使用到的加载动画的调用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 显示加载中     */</span>    <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 操作成功隐藏dialog和显示成功     */</span>    <span class="token keyword">void</span> <span class="token class-name">SuccessHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 操作失败隐藏dialog和显示失败     */</span>    <span class="token keyword">void</span> <span class="token class-name">FailedHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 错误     *     * @param bean 错误信息     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span><span class="token class-name">BaseBean</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BaseBean-BaseEvent"><a href="#BaseBean-BaseEvent" class="headerlink" title="BaseBean/BaseEvent"></a>BaseBean/BaseEvent</h3><p><code>BaseBean</code>/<code>BaseEvent</code> 这两个的用处一个是抽象出收到的 <code>json</code> 报文的基本字段做 Base类，供错误处理机制来自行判断处理；而 <code>BaseEvent</code> 则是抽象出 <code>EventBus</code> 的消息事件，对每个发送的消息都赋予唯一的 <code>eventCode</code>  ，用来做消息事件识别。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">//From 测试图片</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BaseBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> eventCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BaseEvent</span><span class="token punctuation">(</span><span class="token keyword">int</span> eventCode<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eventCode <span class="token operator">=</span> eventCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getEventCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> eventCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEventCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> eventCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eventCode <span class="token operator">=</span> eventCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BaseException"><a href="#BaseException" class="headerlink" title="BaseException"></a>BaseException</h3><p>此处自定义了一个异常的基类，供外部构建类或者是获取其中的成员变量。同时它继承自 <code>IOException</code> ，可以作为异常被统一处理，所以也可以用来特定的处理某种异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseException</span> <span class="token keyword">extends</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorMsg<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token keyword">int</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> message<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BaseObserver"><a href="#BaseObserver" class="headerlink" title="BaseObserver"></a>BaseObserver</h3><p>该类继承自 <code>Rxjava</code> 的 <code>DisposableObserver</code> ，我们创建该类，可以预重写 <code>onStart()</code> 、 <code>onNext(T o)</code> 、 <code>onError(Throwable e)</code> 等方法，预处理错误流；让我们再次继承的时候，只需要简洁的重写 <code>onSuccess()</code> 以及 <code>onError()</code> 即可。这个类的封装，让我们的网络请求变得十分优雅。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">DisposableObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">BaseView</span> view<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isShowDialog<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">BaseObserver</span><span class="token punctuation">(</span><span class="token class-name">BaseView</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 带进度条的初始化方法     *     * @param view         view     * @param isShowDialog 是否显示进度条     */</span>    <span class="token keyword">protected</span> <span class="token class-name">BaseObserver</span><span class="token punctuation">(</span><span class="token class-name">BaseView</span> view<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isShowDialog <span class="token operator">=</span> isShowDialog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            view<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">T</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onSuccess</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name"><span class="token namespace">view<span class="token punctuation">.</span></span>FailedHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">BaseException</span> be<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//自定义异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">BaseException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                be <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseException</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span>                <span class="token comment">//回调到view层 处理 或者根据项目情况处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    view<span class="token punctuation">.</span><span class="token function">onErrorCode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaseBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">onError</span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//系统异常</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">HttpException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//HTTP错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>BAD_NETWORK_MSG<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ConnectException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//连接错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>CONNECT_ERROR_MSG<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">InterruptedIOException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//连接超时</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>CONNECT_TIMEOUT_MSG<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">JsonParseException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">JSONException</span> <span class="token operator">||</span> e <span class="token keyword">instanceof</span> <span class="token class-name">ParseException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//解析错误</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>PARSE_ERROR_MSG<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>OTHER_MSG<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            be <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>OTHER_MSG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">onError</span><span class="token punctuation">(</span>be<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> isShowDialog<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name"><span class="token namespace">view<span class="token punctuation">.</span></span>SuccessHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">T</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BasePresenter"><a href="#BasePresenter" class="headerlink" title="BasePresenter"></a>BasePresenter</h3><p>由于我们的 <code>Presenter</code> 层主要作用是连接 <code>View</code> 层和 <code>Model</code> 层，对他们解耦。而当我们的 <code>Model</code> 层的数据处理比较少的时候，例如只有网络请求这种情况，我们就可以直接调用 <code>addDisposable</code> 方法发起请求，而 <code>BaseObserver</code> 也就是被封装好的 <code>Model</code> 层。这种做法是符合 <code>迪米特原则</code> 的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasePresenter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span> <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CompositeDisposable</span> compositeDisposable<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> baseView<span class="token punctuation">;</span>    <span class="token comment">/**     * 这个后面可以直接用   Example：apiServer.login(username, password)；     */</span>    <span class="token keyword">protected</span> <span class="token class-name">API<span class="token punctuation">.</span>SZApi</span> apiServer <span class="token operator">=</span> <span class="token class-name">RetrofitService</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApiService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BasePresenter</span><span class="token punctuation">(</span><span class="token class-name">V</span> baseView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseView <span class="token operator">=</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 解除绑定     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        baseView <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token function">removeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 返回 view     */</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getBaseView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> baseView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDisposable</span><span class="token punctuation">(</span><span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> observable<span class="token punctuation">,</span> <span class="token class-name">BaseObserver</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>compositeDisposable <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            compositeDisposable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        compositeDisposable                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span><span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span><span class="token class-name">AndroidSchedulers</span><span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">subscribeWith</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeDisposable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>compositeDisposable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            compositeDisposable<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BaseActivity-BaseFragment"><a href="#BaseActivity-BaseFragment" class="headerlink" title="BaseActivity/BaseFragment"></a>BaseActivity/BaseFragment</h3><p>封装的时候，我们需要设置泛型，传入对应的 <code>Presenter</code> 以及对应的 <code>ViewBinding</code>；最后再继承 <code>BaseView</code> 这个接口</p><p>在页面创建和销毁的时候，我们需要对应的做相关的绑定和解绑，这其中除了对 <code>Presenter</code> 层进行绑定，还对 <code>EventBus</code> 做了对应的绑定。这是由于 <code>EventBus</code> 的订阅多会用于 <strong>UI</strong> 的更新，我们在这两个 <code>Base</code> 类做订阅的注册判断是有必要的；后续的子类想要使用，只需要在写上 <code>@BindEventBus</code> 的注解即可。</p><p>关于 EventBus 的封装，可以查看 <a href="https://juejin.cn/post/7129906379464114213">EventBus封装到项目架构|青训营笔记 - 掘金 (juejin.cn)</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span> <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BaseView</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span>VB <span class="token keyword">extends</span> <span class="token class-name">ViewBinding</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">VB</span> binding<span class="token punctuation">;</span>    <span class="token comment">/**     * presenter层的引用     */</span>    <span class="token keyword">protected</span> <span class="token class-name">P</span> presenter<span class="token punctuation">;</span>    <span class="token comment">/**     * 错误     *     * @param bean 错误信息     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span><span class="token class-name">BaseBean</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ToastUtil</span><span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 初始化presenter，也是与Activity的绑定     *     * @return 返回new的Presenter层的值     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">P</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 载入view的一些操作     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 载入数据操作     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * {@inheritDoc}     * &lt;p&gt;     * Perform initialization of all fragments.     *     * @param savedInstanceState     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">BindEventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">UltimateBarX</span><span class="token punctuation">.</span><span class="token function">statusBarOnly</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">transparent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//强制使用竖屏</span>        <span class="token function">setRequestedOrientation</span><span class="token punctuation">(</span><span class="token class-name">ActivityInfo</span><span class="token punctuation">.</span>SCREEN_ORIENTATION_PORTRAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>        binding <span class="token operator">=</span> <span class="token class-name">ViewBindingUtil</span><span class="token punctuation">.</span><span class="token function">inflateWithGeneric</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getLayoutInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 解除presenter与Activity的绑定     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">BindEventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SuccessHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">dismissSuccessLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">FailedHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">dismissFailedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 查看当前是否为深色模式     *     * @param context 传入当前context     * @return 返回ture 偶然false     */</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getDarkModeStatus</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mode <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uiMode <span class="token operator">&amp;</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span>UI_MODE_NIGHT_MASK<span class="token punctuation">;</span>        <span class="token keyword">return</span> mode <span class="token operator">==</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span>UI_MODE_NIGHT_YES<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">VB</span> <span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> binding<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseFragment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">P</span> <span class="token keyword">extends</span> <span class="token class-name">BasePresenter</span><span class="token punctuation">,</span>VB <span class="token keyword">extends</span> <span class="token class-name">ViewBinding</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token keyword">implements</span> <span class="token class-name">BaseView</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Context</span> mContext<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">P</span> presenter<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">VB</span> binding<span class="token punctuation">;</span>    <span class="token comment">/**     * 显示加载中     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 操作成功隐藏dialog和显示成功     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SuccessHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">dismissSuccessLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 操作失败隐藏dialog和显示失败     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">FailedHideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">dismissFailedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建 presenter     *     * @return presenter     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">P</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 在这里要返回view的根路径     *     * @return 返回绑定的view     */</span>    <span class="token keyword">protected</span> <span class="token class-name">VB</span> <span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> binding<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 初始化布局     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 初始化数据     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token class-name">LayoutInflater</span> inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ViewGroup</span> container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">BindEventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        binding <span class="token operator">=</span> <span class="token class-name">ViewBindingUtil</span><span class="token punctuation">.</span><span class="token function">inflateWithGeneric</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到context,在后面的子类Fragment中都可以直接调用</span>        mContext <span class="token operator">=</span> <span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        presenter <span class="token operator">=</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> binding<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">BindEventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//销毁时，解除绑定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            presenter<span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        binding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorCode</span><span class="token punctuation">(</span><span class="token class-name">BaseBean</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，MVP 的封装就完成了，更多细节和使用请查看我的开源库：<a href="https://github.com/dyjcow/qxy_potato">dyjcow/qxy_potato (github.com)</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6844904070373703687#heading-15">带你封装自己的MVP+Retrofit+RxJava2框架（二） - 掘金 (juejin.cn)</a></p><p><a href="https://github.com/yechaoa/wanandroid_java">yechaoa/wanandroid_java: 🎨 玩安卓客户端 ，MD + Retrofit + RxJava + MVP + AndroidX (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 青训营笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你封装MVP架构(上)|青训营笔记</title>
      <link href="/2022/08/17/dai-ni-feng-zhuang-mvp-jia-gou-shang/"/>
      <url>/2022/08/17/dai-ni-feng-zhuang-mvp-jia-gou-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="带你封装MVP架构-上-青训营笔记"><a href="#带你封装MVP架构-上-青训营笔记" class="headerlink" title="带你封装MVP架构(上)|青训营笔记"></a>带你封装MVP架构(上)|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第10天</strong></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>MVP</strong>：<a href="https://www.jianshu.com/p/4b754ea48a40">MVP架构模式详解 - 简书 (jianshu.com)</a></p><p><strong>Retrofit</strong>：<a href="https://juejin.cn/post/6844903876559110151#heading-7">Retrofit使用详解-注解介绍 - 掘金 (juejin.cn)</a></p><p><strong>RxJava</strong>：<a href="https://www.jianshu.com/p/a406b94f3188">Carson带你学Android：这是一篇清晰易懂的Rxjava入门教程 - 简书 (jianshu.com)</a></p><p><strong>ViewBinding</strong>:<a href="https://guolin.blog.csdn.net/article/details/113089706">kotlin-android-extensions插件也被废弃了？扶我起来_guolin的博客-CSDN博客_kotlin-android-extensions废弃</a></p><h2 id="浅析封装层级"><a href="#浅析封装层级" class="headerlink" title="浅析封装层级"></a>浅析封装层级</h2><p>我们做一个 <code>MVP</code> 架构的封装，主要其相对于MVC更加解耦，能让开发人员在编写代码的时候更加高效和舒服。</p><p>那么我们最主要需要做到的就是<strong>职责区分</strong>以及<strong>减少重复</strong>，所以必不可少的就是做到可以让 <strong>MVP</strong> 模式下的数据层、视图层、发布层的更低成本的各司其职，以及在项目中对 <code>Base</code> 基类进行提取关联。此外，我们需要集成常用的工具类以及打造好优雅的网络请求调用方式等等。</p><p>那我们可以简单的对项目分包，其至少包括以下几个</p><pre class="line-numbers language-none"><code class="language-none">-app-base-http-module-util<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>声明：</p><p>文章使用到的MVP封装方法是学习于：</p><p><a href="https://github.com/yechaoa/wanandroid_java">yechaoa/wanandroid_java: 🎨 玩安卓客户端 ，MD + Retrofit + RxJava + MVP + AndroidX (github.com)</a></p><p><a href="https://juejin.cn/post/6844904070373703687">带你封装自己的MVP+Retrofit+RxJava2框架（二） - 掘金 (juejin.cn)</a></p><p>笔者对该架构进行升级修改，以及在文章中会讲述对网络请求部分的功能添加</p></blockquote><h2 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h2><p>首先，我们载入后续会使用到的开源框架</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//app/build.gradle</span>android <span class="token punctuation">{</span>    <span class="token punctuation">...</span>    defaultConfig <span class="token punctuation">{</span>        <span class="token punctuation">...</span>        javaCompileOptions <span class="token punctuation">{</span>            annotationProcessorOptions <span class="token punctuation">{</span>                arguments <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token comment">//                        "room.schemaLocation":"$projectDir/schemas".toString(),</span>                        eventBusIndex <span class="token punctuation">:</span> <span class="token string">'com.qxy.potato.MyEventBusIndex'</span> <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">...</span>    <span class="token punctuation">}</span>    <span class="token punctuation">...</span>    <span class="token comment">//    支持使用viewBinding</span>    buildFeatures <span class="token punctuation">{</span>        viewBinding <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">...</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    <span class="token comment">//MMKV替代SP https://github.com/Tencent/MMKV/wiki/android_tutorial_cn</span>    implementation <span class="token string">'com.tencent:mmkv:1.2.14'</span><span class="token comment">/*retrofit raJava*/</span>    implementation <span class="token string">'com.squareup.retrofit2:retrofit:2.9.0'</span>    implementation <span class="token string">'com.squareup.retrofit2:adapter-rxjava2:2.9.0'</span>    implementation <span class="token string">'com.squareup.retrofit2:converter-gson:2.9.0'</span>    implementation <span class="token string">'com.squareup.retrofit2:converter-scalars:2.9.0'</span>    implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.1.1'</span>    implementation <span class="token string">'com.squareup.okhttp3:logging-interceptor:3.12.0'</span>    <span class="token comment">//glide</span>    implementation <span class="token string">'com.github.bumptech.glide:glide:4.13.2'</span>    annotationProcessor <span class="token string">'com.github.bumptech.glide:compiler:4.13.2'</span>    <span class="token comment">//引入的崩溃管理和跳转UI哭</span>    implementation <span class="token string">'com.github.tamsiree.RxTool:RxKit:2.6.3'</span>    implementation <span class="token string">'com.github.tamsiree.RxTool:RxUI:2.6.3'</span>    <span class="token comment">//ViewBinding</span>    implementation <span class="token string">'com.github.DylanCaiCoding.ViewBindingKTX:viewbinding-base:2.0.6'</span>    implementation <span class="token string">'com.github.DylanCaiCoding.ViewBindingKTX:viewbinding-brvah:2.0.6'</span>    <span class="token comment">//引入Rv管理</span>    implementation <span class="token string">'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.7'</span>    <span class="token comment">//沉浸式</span>    implementation <span class="token string">'com.gitee.zackratos:UltimateBarX:0.8.0'</span>    <span class="token comment">//eventBus</span>    <span class="token keyword">def</span> eventbus_version <span class="token operator">=</span> <span class="token string">'3.3.1'</span>    implementation <span class="token string gstring">"org.greenrobot:eventbus:<span class="token expression"><span class="token punctuation">$</span>eventbus_version</span>"</span>    annotationProcessor <span class="token string gstring">"org.greenrobot:eventbus-annotation-processor:<span class="token expression"><span class="token punctuation">$</span>eventbus_version</span>"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建造一所宏大的房子前，不仅需要图纸，还需要有趁手的工具。</p><p>搭建一套好用的框架也是，我们应该构建好几个架构封装过程中必须使用到的工具类</p><h3 id="ActivityUtil"><a href="#ActivityUtil" class="headerlink" title="ActivityUtil"></a>ActivityUtil</h3><p>该工具类是用于获取当前 Activity ，以及获取封装一些启动 Activity 的操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivityUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Activity</span><span class="token punctuation">&gt;</span></span> activityStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">MyActivityLifecycleCallbacks</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ActivityUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @return 返回生命周期回调类     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ActivityLifecycleCallbacks</span> <span class="token function">getActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 结束当前Activity     *     * @param activity 当前Activity     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">finishActivity</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            activityStack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>            activity<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 不用 finish 当前 Activity 时直接调用此方法     *     * @param classes     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">Class</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 需要 finish 当前 Activity 时调用此方法，布尔值参数传入 true     *     * @param classes  需要打开的 activity     * @param isFinish 是否 finish 当前 activity     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token class-name">Class</span> classes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFinish<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Activity</span> currentActivity <span class="token operator">=</span> <span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>currentActivity<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentActivity<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFinish<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">finishActivity</span><span class="token punctuation">(</span>currentActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 关闭所有 Activity     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeAllActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Activity</span> activity <span class="token operator">=</span> <span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">finishActivity</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 得到当前的 Activity     *     * @return 当前 Activity     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Activity</span> <span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Activity</span> activity <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activityStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            activity <span class="token operator">=</span> activityStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 启动 activity， 带上参数     *     * @param classes 需要打开的 activity     * @param hashMap 需要传递的参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span> <span class="token class-name">Class</span> classes<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span> hashMap<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 启动 activity， 可以设置是否关闭当前 activity     *     * @param classes  需要打开的 activity     * @param hashMap  需要传递的参数     * @param isFinish 是否关闭当前 activity     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span> <span class="token class-name">Class</span> classes<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashMap<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFinish<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Activity</span> currentActivity <span class="token operator">=</span> <span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>currentActivity<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        currentActivity<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFinish<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">finishActivity</span><span class="token punctuation">(</span>currentActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyActivityLifecycleCallbacks</span> <span class="token keyword">implements</span> <span class="token class-name">ActivityLifecycleCallbacks</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">MyActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityCreated</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span>activityStack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span>activityStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityStarted</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityResumed</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityPaused</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityStopped</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivitySaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onActivityDestroyed</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span>activityStack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该类用一个栈来记录启动的Activity，且永远将新创建的Activity放于栈顶，让外部调用者可以立刻调用到当前的Activity事件。</p><p>并且封装了各种Activity启动方法供外部调用。</p><h3 id="MyUtil"><a href="#MyUtil" class="headerlink" title="MyUtil"></a>MyUtil</h3><p>该工具类获得了一个全局的 Context ，以及根据此context，创建了开启加载动画以及关闭加载动画的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyUtil</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 全局context     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Application</span> mApplicationContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RxDialogLoading</span> rxDialogLoading<span class="token punctuation">;</span>    <span class="token comment">/**     * @param app 初始化全局context     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">Application</span> app<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mApplicationContext <span class="token operator">=</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获得全局context     *     * @return 当前的全局context     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Application</span> <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mApplicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 关闭键盘     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeSoftKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InputMethodManager</span> inputManger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InputMethodManager</span><span class="token punctuation">)</span> <span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span>INPUT_METHOD_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputManger <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            inputManger<span class="token punctuation">.</span><span class="token function">hideSoftInputFromWindow</span><span class="token punctuation">(</span><span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWindowToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 展示dialog     *     * @param context 传入当前Acitivity     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rxDialogLoading <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            rxDialogLoading <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RxDialogLoading</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            rxDialogLoading<span class="token punctuation">.</span><span class="token function">setCanceledOnTouchOutside</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rxDialogLoading<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 成功隐藏dialog，显示成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dismissSuccessLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rxDialogLoading<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token class-name">RxDialogLoading<span class="token punctuation">.</span>RxCancelType</span><span class="token punctuation">.</span>success<span class="token punctuation">,</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>load_success<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 失败隐藏dialog，显示失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dismissFailedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rxDialogLoading<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token class-name">RxDialogLoading<span class="token punctuation">.</span>RxCancelType</span><span class="token punctuation">.</span>error<span class="token punctuation">,</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>load_error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Retrofit-Rxjava-打造优雅网络请求方式"><a href="#Retrofit-Rxjava-打造优雅网络请求方式" class="headerlink" title="Retrofit + Rxjava 打造优雅网络请求方式"></a>Retrofit + Rxjava 打造优雅网络请求方式</h2><blockquote><p>由于该模块代码繁多，文章不会描述每一个类，完整代码请查阅<a href="https://github.com/dyjcow/qxy_potato/tree/develop/app/src/main/java/com/qxy/potato/http">http </a></p><p>其中的 <strong>cookie</strong> 包是用于做登录状态持久化，但是本demo中未用到</p><p><strong>gson</strong> 包是做了一个转换器，对网络数据的请求报文和响应报文做了一次数据筛查</p><p><strong>API</strong> 类是定义了所有的网络请求方法</p><p><strong>RetrofitService</strong> 类是对该网络模块的集成的方法，是 Retrofit 的核心方法</p></blockquote><h3 id="BaseResponseBodyConverter"><a href="#BaseResponseBodyConverter" class="headerlink" title="BaseResponseBodyConverter"></a>BaseResponseBodyConverter</h3><p>该方法是继承了类型为响应报文的 Retrofit 转换器类，可以对对响应报文做数据筛查。我们可以筛查出响应的报文的<strong>错误码</strong>或者<strong>错误描述</strong>进行自动的异常处理。</p><p>例如返回的错误码描述为当前登录状态过期，那么我们可以取消登录状态，程序自动跳转到登录页面中。</p><p>亦或是错误码为非正常状态下，自动抛出自定义的异常，然后App对该异常做 Toast 描述之类的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseResponseBodyConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseBody</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> adapter<span class="token punctuation">;</span>    <span class="token class-name">BaseResponseBodyConverter</span><span class="token punctuation">(</span><span class="token class-name">TypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> adapter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adapter <span class="token operator">=</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">ResponseBody</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">JSONObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> code <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> data <span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>  data <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">JSONObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> error_code <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>error_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> error_code <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> data<span class="token punctuation">;</span>                    data <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>error_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//异常处理</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span>error_code<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//正确返回整个json</span>                <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//数据解析异常即json格式有变动</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BaseException</span><span class="token punctuation">(</span><span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>PARSE_ERROR_MSG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            value<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，我们需要针对不同格式的响应报文，定制不同的筛查策略和处理逻辑</p><h3 id="MoreBaseUrlInterceptor"><a href="#MoreBaseUrlInterceptor" class="headerlink" title="MoreBaseUrlInterceptor"></a>MoreBaseUrlInterceptor</h3><p>自定义一个过滤器，在该过滤器中，我们可以对请求的做一些自动的更改</p><p>例如下例，我们可以在检测到请求头中带 <code>urlName</code> 字段的时候，去做一个对应的 <code>BaseUrl</code> 的更新；我们也还可以在这里做一些譬如key这些字段的添加等等</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoreBaseUrlInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keyUrl<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MoreBaseUrlInterceptor</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keyUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keyUrl <span class="token operator">=</span> keyUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//获取原始的originalRequest</span>        <span class="token class-name">Request</span> originalRequest <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取老的url</span>        <span class="token class-name">HttpUrl</span> oldUrl <span class="token operator">=</span> originalRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取originalRequest的创建者builder</span>        <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> originalRequest<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取头信息的集合如：base,geo</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> urlNameList <span class="token operator">=</span> originalRequest<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token string">"urlName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>urlNameList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//删除原有配置中的值,就是namesAndValues集合里的值</span>            builder<span class="token punctuation">.</span><span class="token function">removeHeader</span><span class="token punctuation">(</span><span class="token string">"urlName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取头信息中配置的value,如：m或者mock</span>            <span class="token class-name">String</span> urlName <span class="token operator">=</span> urlNameList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HttpUrl</span> baseURL<span class="token punctuation">;</span>            <span class="token comment">//根据头信息中配置的value,来匹配新的base_url地址</span>            baseURL <span class="token operator">=</span> <span class="token class-name">HttpUrl</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>keyUrl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>urlName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//重建新的HttpUrl，需要重新设置的url部分</span>            <span class="token class-name">HttpUrl</span> newHttpUrl <span class="token operator">=</span> oldUrl<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scheme</span><span class="token punctuation">(</span>baseURL<span class="token punctuation">.</span><span class="token function">scheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//http协议如：http或者https</span>                    <span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span>baseURL<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//主机地址</span>                    <span class="token punctuation">.</span><span class="token function">encodedPath</span><span class="token punctuation">(</span>baseURL<span class="token punctuation">.</span><span class="token function">encodedPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                            oldUrl<span class="token punctuation">.</span><span class="token function">encodedPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//构建路径,为适配MOCK中给出的BaseURL带有Path路径的情况</span>                    <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span>baseURL<span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//端口</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取处理后的新newRequest</span>            <span class="token class-name">Request</span> newRequest <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>newHttpUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span>  chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>newRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">Request</span> reOriginalRequest <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>oldUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>reOriginalRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RetrofitService"><a href="#RetrofitService" class="headerlink" title="RetrofitService"></a>RetrofitService</h3><p>该类是 Retrofit 服务类，对外提供一个服务的单例，然后添加好前面编写的转换器以及过滤器等信息。这样子供外部统一调用这个 Retrofit 单例即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetrofitService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">RetrofitService</span> apiRetrofit<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">API<span class="token punctuation">.</span>SZApi</span> apiServer<span class="token punctuation">;</span>    <span class="token comment">/**     * 单例调用     *     * @return RetrofitService     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RetrofitService</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>apiRetrofit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>apiRetrofit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    apiRetrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetrofitService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> apiRetrofit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取api对象     *     * @return api对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">API<span class="token punctuation">.</span>SZApi</span> <span class="token function">getApiService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> apiServer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 初始化retrofit     */</span>    <span class="token keyword">private</span> <span class="token class-name">RetrofitService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//配置okHttp并设置时间、日志信息和cookies</span>        <span class="token class-name">HttpLoggingInterceptor</span> httpLoggingInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpLoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpLoggingInterceptor<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">HttpLoggingInterceptor<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>BODY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OkHttpClient</span> okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MoreBaseUrlInterceptor</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span><span class="token function">getKeyUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>httpLoggingInterceptor<span class="token punctuation">)</span>                <span class="token comment">//设置超时时间</span>                <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token comment">//设置Cookie持久化</span><span class="token comment">//                .cookieJar(new CookiesManager(MyUtil.getApplication()))</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关联okHttp并加上rxJava和Gson的配置和baseUrl</span>        <span class="token class-name">Retrofit</span> retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token class-name">ScalarsConverterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token class-name">BaseConverterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span><span class="token class-name">RxJava2CallAdapterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        apiServer <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">API<span class="token punctuation">.</span>SZApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="筑基的Application"><a href="#筑基的Application" class="headerlink" title="筑基的Application"></a>筑基的Application</h2><p>再接着，我们需要自定义一个 Application，并在此处做好对一些框架和工具类的初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token operator">=</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MMKV<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用订阅索引，加快编译速度</span>        <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndex</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEventBusIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">installDefaultEventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化</span>        <span class="token class-name">MyUtil</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置UI工具</span>        <span class="token class-name">RxTool</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册Activity生命周期</span>        <span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token class-name">ActivityUtil</span><span class="token punctuation">.</span><span class="token function">getActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6844904070373703687#heading-15">带你封装自己的MVP+Retrofit+RxJava2框架（二） - 掘金 (juejin.cn)</a></p><p><a href="https://github.com/yechaoa/wanandroid_java">yechaoa/wanandroid_java: 🎨 玩安卓客户端 ，MD + Retrofit + RxJava + MVP + AndroidX (github.com)</a></p><p><a href="https://blog.csdn.net/weixin_45367427/article/details/103213648">使用Retrofit请求时需要多个baseurl切换_初入江湖的菜鸡的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 青训营笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你认识和使用Room|青训营笔记</title>
      <link href="/2022/08/11/dai-ni-ren-shi-he-shi-yong-room/"/>
      <url>/2022/08/11/dai-ni-ren-shi-he-shi-yong-room/</url>
      
        <content type="html"><![CDATA[<h1 id="带你认识和使用Room"><a href="#带你认识和使用Room" class="headerlink" title="带你认识和使用Room"></a>带你认识和使用Room</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第6天</strong></p><h2 id="何为-Room"><a href="#何为-Room" class="headerlink" title="何为 Room"></a>何为 <code>Room</code></h2><p><code>Room</code> 是 Google jetpack 体系的一个数据库框架，近年来 Google 力推该框架，作为开发者，我们也需拥抱新技术。</p><p><code>Room</code> 对 <code>SQLite</code> 的抽象，是为了让 <code>SQLite</code> 更方便Android开发者使用而研发的一个数据库框架</p><p>下面引用 Android 开发者指南对 <code>Room</code> 的优势说明</p><blockquote><p>In particular, Room provides the following benefits:</p><ul><li>Compile-time verification of SQL queries.</li><li>Convenience annotations that minimize repetitive and error-prone boilerplate code.</li><li>Streamlined database migration paths.</li></ul><p>引用自<a href="https://developer.android.com/training/data-storage/room?hl=en">Save data in a local database using Room  | Android Developers</a></p></blockquote><p>翻译过来，就是以下三个优势</p><ol><li>会对SQL在编译阶段进行验证</li><li>有方便我们使用的注解，可以大幅度减少重复编写和出错</li><li>数据库更容易迁移</li><li>可以和<strong>多种三方库</strong>桥接进行异步查询</li></ol><p><strong><code>Room</code> 的使用效率如何</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b3573d8467e4c49bfe63a9acebcd7a5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"></p><h2 id="Room-的基本使用"><a href="#Room-的基本使用" class="headerlink" title="Room 的基本使用"></a><code>Room</code> 的基本使用</h2><p>了解完 <code>Room</code> 是什么，还等什么，快速上手 <code>Room</code> 吧</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3758057da9f410d8ea1435ca0045872~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="库的导入"><a href="#库的导入" class="headerlink" title="库的导入"></a>库的导入</h3><p>要使用 <code>Room</code> ，我们先要在 <code>build.gradle(:app)</code> 里面引入该库 </p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    <span class="token punctuation">...</span>    <span class="token comment">//if use kapt</span>    id <span class="token string">'kotlin-kapt'</span><span class="token punctuation">}</span><span class="token punctuation">...</span>dependencies <span class="token punctuation">{</span>    <span class="token keyword">def</span> room_version <span class="token operator">=</span> <span class="token string gstring">"2.4.3"</span><span class="token comment">//base</span>    implementation <span class="token string gstring">"androidx.room:room-runtime:<span class="token expression"><span class="token punctuation">$</span>room_version</span>"</span>        <span class="token comment">// To use Java annotation processing tool </span>    annotationProcessor <span class="token string gstring">"androidx.room:room-compiler:<span class="token expression"><span class="token punctuation">$</span>room_version</span>"</span>    <span class="token comment">// To use Kotlin annotation processing tool (kapt)</span>    kapt <span class="token string gstring">"androidx.room:room-compiler:<span class="token expression"><span class="token punctuation">$</span>room_Version</span>"</span>    <span class="token punctuation">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要引入 <code>Room</code> 的时候，一定需要的是 runtime 库和对应的一个<strong>注解处理器</strong> 的库，上面的代码我引入了 java 和kotlin 两种类型，实际使用中，我们引入一种就好。注解处理器一定是要引入的，这样子我们才能根据注解在编译期生成对应的实现类。</p><p>如果引入的是 <code>kapt</code>，记得要在插件声明处声明对应的插件。</p><h3 id="数据实体-Entity"><a href="#数据实体-Entity" class="headerlink" title="数据实体(Entity)"></a>数据实体(<code>Entity</code>)</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Entity</span><span class="token punctuation">(</span>tableName <span class="token operator">=</span> <span class="token string">"users"</span><span class="token punctuation">)</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span>    <span class="token annotation builtin">@PrimaryKey</span><span class="token punctuation">(</span>autoGenerate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">val</span> uid<span class="token operator">:</span> Int<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token annotation builtin">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"first_name"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> firstName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token annotation builtin">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> lastName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用：用于表示应用的数据库中的表。</p><p>上面代码是数据实体类的，我们需要对类写一个 <code>@Entity()</code> 注解，<code>tableName = "users"</code> 是对表的命名，否则表就自动以类名做表名。</p><p>接下来我们来看下面的数据变量</p><p><code>@PrimaryKey()</code> 表示的是主键，添加 <code>autoGenerate = true</code> 表示输入的id为空时候，允许自动赋值。每一个表都是需要有一列做主键</p><p><code>@ColumnInfo(name = "first_name")</code> 表示的是为该字段的对应列命名。若是不使用该注解，列名则自动为字段名称</p><h3 id="数据访问对象-DAO"><a href="#数据访问对象-DAO" class="headerlink" title="数据访问对象(DAO)"></a>数据访问对象(<code>DAO</code>)</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Dao</span><span class="token keyword">interface</span> Dao <span class="token punctuation">{</span>    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span>    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE uid IN (:userIds)"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">loadAllByIds</span><span class="token punctuation">(</span>userIds<span class="token operator">:</span> IntArray<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span>    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE first_name LIKE :first AND "</span> <span class="token operator">+</span>            <span class="token string">"last_name LIKE :last LIMIT 1"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">findByName</span><span class="token punctuation">(</span>first<span class="token operator">:</span> String<span class="token punctuation">,</span> last<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> User    <span class="token annotation builtin">@Insert</span><span class="token punctuation">(</span>onConflict <span class="token operator">=</span> OnConflictStrategy<span class="token punctuation">.</span>REPLACE<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">insertAll</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> users<span class="token operator">:</span> User<span class="token punctuation">)</span>    <span class="token annotation builtin">@Delete</span>    <span class="token keyword">fun</span> <span class="token function">delete</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用：提供您的应用可用于查询、更新、插入和删除数据库中的数据的方法。</p><p>上文代码的数据库访问对象，我们写的时候其实就是写一个对应的接口，对接口里面的方法附上相关的注解。然后在代码的编译阶段，就会根据注解生成对应的代码。</p><p>上文的代码中我们可以看到，有部分的方法注解里面会用到 SQL 语句，但是有部分就不需要 SQL 语句。这是由于 <code>Room</code> 给我们提供了两种不同的查询方法，一种是自带插入 <code>Insert</code>、<code>Update</code>、<code>Delete</code>的 便捷方法，一种是自己编写 SQL 语句的自定义查询方法</p><blockquote><p>There are two types of DAO methods that define database interactions:</p><ul><li>Convenience methods that let you insert, update, and delete rows in your database without writing any SQL code.</li><li>Query methods that let you write your own SQL query to interact with the database.</li></ul><p>From <a href="https://developer.android.com/training/data-storage/room/accessing-data?hl=en">Accessing data using Room DAOs  | Android Developers</a></p></blockquote><p>两种方法配合使用，我们就可以低成本使用且易复用 SQLite 的强大功能了。使用<strong>查询方法</strong>的前提是我们会 SQL 语法，还不懂的同学，需要先学会 SQL 语法</p><p><a href="https://zhuanlan.zhihu.com/p/92590262">在线就能用的 SQL 练习平台我给你找好了！ - 知乎 (zhihu.com)</a></p><h3 id="数据库类-Database"><a href="#数据库类-Database" class="headerlink" title="数据库类(Database)"></a>数据库类(<code>Database</code>)</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Database</span><span class="token punctuation">(</span>entities <span class="token operator">=</span> <span class="token punctuation">[</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> AppDatabase <span class="token operator">:</span> <span class="token function">RoomDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Dao<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>作用：用于保存数据库并作为应用持久性数据底层连接的主要访问点。</p><p>这个类是为建立和保存数据库所使用的，有以下三个要点</p><blockquote><ul><li><p>新增一个<code>RoomDatabase</code>的<code>abstract</code>子类，需要是抽象类</p></li><li><p>子类需加注解<code>@Database(entities = [xxx], version = n)</code>，<code>entities</code>包含数据实体，将会在这个数据库中创建对应的表，<code>version</code>是数据的版本号</p></li><li><p>对于与数据库关联的每个DAO类，数据库类<strong>必须定义一个无参的抽象方法，并返回DAO类实例</strong></p></li></ul><p> 来自：<a href="https://juejin.cn/post/7123453378176221215/">【Android 客户端专场 学习资料二】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p></blockquote><p><code>@Database</code> 该注解包含列出所有与数据库关联的数据实体的 <code>entities</code> 数组。也就是说，当我们有多个表的时候，需要把所有表都置于该注解上边。例如，两个表的时候，<code>entities = [User::class, single::class]</code></p><p><code>@Database</code> 注解的另一个 <code>version</code> 参数，是为数据库的版本号。当我们要变动数据库的表的时候，如果直接变动，不做迁移(更新)，程序是会崩溃的。应用 <code>autoMigrations = [AutoMigration (from = 1, to = 2)]</code> 这个注解参数，可以实现自动的迁移。示例代码如下，更多的迁移方法可以查看指南 <a href="https://developer.android.com/training/data-storage/room/migrating-db-versions?hl=en">Migrating Room databases  | Android Developers</a></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Database class before the version update.</span><span class="token annotation builtin">@Database</span><span class="token punctuation">(</span>  version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  entities <span class="token operator">=</span> <span class="token punctuation">[</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> AppDatabase <span class="token operator">:</span> <span class="token function">RoomDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">// Database class after the version update.</span><span class="token annotation builtin">@Database</span><span class="token punctuation">(</span>  version <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  entities <span class="token operator">=</span> <span class="token punctuation">[</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  autoMigrations <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">AutoMigration</span> <span class="token punctuation">(</span>from <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> AppDatabase <span class="token operator">:</span> <span class="token function">RoomDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建使用数据库"><a href="#创建使用数据库" class="headerlink" title="创建使用数据库"></a>创建使用数据库</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> db <span class="token operator">=</span> Room<span class="token punctuation">.</span><span class="token function">databaseBuilder</span><span class="token punctuation">(</span>    applicationContext<span class="token punctuation">,</span>    AppDatabase<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span> <span class="token string">"database-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> userDao <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> user1 <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hhhh"</span><span class="token punctuation">,</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token keyword">val</span> user2 <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ddd"</span><span class="token punctuation">,</span><span class="token string">"nishone"</span><span class="token punctuation">)</span>binding<span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>    Thread<span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">insertAll</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span>user2<span class="token punctuation">)</span>            list<span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate: <span class="token interpolation"><span class="token delimiter variable">${</span>list<span class="token operator">!!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstName<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate: "</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于数据库的创建和使用都是耗时操作，在开发中，没有使用到多进程的时候，我们谨记要遵循单例模式来创建实例；在调用增上改查时候，我们需要在子线程中来完成这个操作。</p><blockquote><p><strong>注意</strong>：如果您的应用在单个进程中运行，在实例化 <code>AppDatabase</code> 对象时应遵循单例设计模式。每个 <code>RoomDatabase</code> 实例的成本相当高，而您几乎不需要在单个进程中访问多个实例。</p><p>如果您的应用在多个进程中运行，请在数据库构建器调用中包含 <code>enableMultiInstanceInvalidation()</code>。这样，如果您在每个进程中都有一个 <code>AppDatabase</code> 实例，可以在一个进程中使共享数据库文件失效，并且这种失效会自动传播到其他进程中 <code>AppDatabase</code> 的实例。</p></blockquote><h2 id="Room-的表关系"><a href="#Room-的表关系" class="headerlink" title="Room 的表关系"></a><code>Room</code> 的表关系</h2><p>日常开发中，我们数据库的表经常要做到和其他的表关联的，各个表直接也都是有关系的。而 <code>Room</code> 自然也提供了关于表联立的用法给我们，要注意的是，它不提供实体直接引用的形式。</p><p>关于表的关系，大家请查看官方文档，官方文档有详细的说明。</p><p><a href="https://developer.android.com/training/data-storage/room/relationships?hl=zh-cn#one-to-one">定义对象之间的关系  | Android 开发者  | Android Developers</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/training/data-storage/room?hl=en">Save data in a local database using Room  | Android Developers</a></p><p><a href="https://juejin.cn/post/7123453378176221215/#heading-27">【Android 客户端专场 学习资料二】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://www.jianshu.com/p/472e66632ed0">看懂编译注解annotationProcessor和kapt - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/92590262">在线就能用的 SQL 练习平台我给你找好了！ - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Room </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的音视频(2)|青训营笔记</title>
      <link href="/2022/08/08/android-zhong-de-yin-shi-pin-2/"/>
      <url>/2022/08/08/android-zhong-de-yin-shi-pin-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Android中的音视频-2-青训营笔记"><a href="#Android中的音视频-2-青训营笔记" class="headerlink" title="Android中的音视频(2)|青训营笔记"></a>Android中的音视频(2)|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第8天</strong></p><h2 id="直播推拉流"><a href="#直播推拉流" class="headerlink" title="直播推拉流"></a>直播推拉流</h2><h3 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h3><p>按照一定的规则，把视频数据、音频数据放到一个文件中</p><h4 id="MP4"><a href="#MP4" class="headerlink" title="MP4"></a>MP4</h4><p><strong>容器协议</strong></p><p>Moov：Movie Box，存储 mp4 的 metadata，一般位于mp4文件的开头。(为达到秒播效果，会记录很多信息在该文件)</p><p>​    mvhd：Movie Header Box，mp4文件的整体信息，比如创建时间、文件时长等</p><p>​    trak：Track Box，一个mp4可以包含一个或多个轨道（比如视频轨道、音频轨道）</p><p><strong>Stbl：Sample Table Box</strong></p><p>包含了这些媒体数据的索引以及时间信息</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5b391cdc32e4520bf25baba09827f55~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p align="center">较大的层级结构</p><h4 id="FLV"><a href="#FLV" class="headerlink" title="FLV"></a>FLV</h4><p><strong>流式文件</strong></p><p>FLV是一个二进制文件，由文件头（FLV header）和很多tag组成。</p><p>tag又可以分成三类:audio,video,script，分别代表音频流，视频流，脚本流（关键字或者文件信息之类）</p><blockquote><p>由于没有一个记录信息的头的结构，所以在一开始不知道会播多久，且数据是链式可以一节节用Tag拼装起来，那么就可以用cdn不断分发下去，所以非常适合直播时候使用。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4033346187b47989d3fdf91709a1222~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>由于缺少头信息，所以在一般的播放器中，Flv是不支持拖拽的。需要支持拖拽的话就得遍历所有Tag之后记录其时间戳才能实现拖拽</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5279acd07d549dabf20a46675521e3d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="CDN转发网络"><a href="#CDN转发网络" class="headerlink" title="CDN转发网络"></a>CDN转发网络</h3><blockquote><p><strong>定义</strong>：建立并覆盖在Internet 之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。通过智能调度将用户请求到最接近用户的服务节点，降低用户访问延迟，提升可用性。</p><p><strong>边缘节点</strong>：指在靠近用户的网络边缘侧构建的业务平台，提供存储、计算、网络等资源，将部分关键业务应用下沉到接入网络边缘，以减少网络传输和多级转发带来的宽度和时延损耗</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f56d5f1522c7403e8ceda77111cbc9c7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ul><li>点播：视频播放</li><li>直播看播：观众观看直播</li><li>推流：主播将数据发送到CDN网络</li><li>拉流：观众从CDN拉去直播数据</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18ee22bec601410690708c32c7c8f65b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p align="center">通信方案</p><h4 id="推拉流协议方案"><a href="#推拉流协议方案" class="headerlink" title="推拉流协议方案"></a>推拉流协议方案</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a2b8eadf3cd4d499bddf39643af66af~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h4 id="RTMP"><a href="#RTMP" class="headerlink" title="RTMP"></a>RTMP</h4><h5 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h5><p>RTMP：<strong>实时消息协议</strong>（Real-Time Messaging Protocol）</p><p>也称<strong>实时消息传输协议</strong>，是最初由<a href="%5Bzh.wikipedia.org%5D(https://zh.wikipedia.org/wiki/Macromedia)">Macromedia</a>为通过互联网在Flash播放器与一个服务器之间传输流媒体、音频、视频和数据而开发的一个专有协议。后被 Adobe公司收购。</p><blockquote><p><strong>优势</strong>：</p><p>•基于 <strong>tcp</strong> 协议</p><p>•技术成熟，FFmpeg 项目中有 rtmp 库</p><p>•低延迟(5-10s)</p><p><strong>劣势</strong>：</p><p>•停止更新</p><p>•规范上没有支持 H265</p><p>•使用 1935 端口，会被防火墙阻碍</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb36e8b8b96a402bbb95579edf9eeaf5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>当我们获取到RTMP数据的时候，褪去协议层，就可以很方便的直接得到FLV视频数据</p><h5 id="拉流"><a href="#拉流" class="headerlink" title="拉流"></a>拉流</h5><p>为解决上述的缺点问题，拉流端使用下面的协议，该协议的封装可以在CDN完成然后再供用户拉流</p><p><strong>HTTP-FLV</strong> <strong>Flash Video</strong>（简称<strong>FLV</strong>），是一种网络视频格式，用作流媒体格式。 </p><p>协议友好，格式简单，便于分发。由于几乎所有设备都会支持HTTP请求协议，那么这个协议对拉流极为友好，也是业内使用最多的协议。</p><p>不转码的情况下直接转发即可，延迟较低</p><h4 id="HLS"><a href="#HLS" class="headerlink" title="HLS"></a>HLS</h4><p><strong>HTTP Live Streaming</strong>，缩写为<strong>HLS</strong>，是由<a href="https://zh.wikipedia.org/wiki/%E8%8B%B9%E6%9E%9C%E5%85%AC%E5%8F%B8">苹果公司</a>提出基于<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>的<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%AA%92%E4%BD%93">流媒体</a><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">网络传输协议</a>。是苹果公司<a href="https://zh.wikipedia.org/w/index.php?title=QuickTime_X&amp;action=edit&amp;redlink=1">QuickTime X</a>和<a href="https://zh.wikipedia.org/wiki/IPhone">iPhone</a>软件系统的一部分。它的工作原理是把整个流分成一个个小的基于HTTP的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。</p><p>在开始一个流媒体会话时，客户端会下载一个包含元数据的<a href="https://zh.wikipedia.org/wiki/M3U">扩展 M3U (m3u8)</a> 播放列表文件，用于寻找可用的媒体流。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/686231386c934cd4a383c56335632352~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d229e5fb1bb480782b5b916a0aefd4b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>该协议把直播分成一段段小的视频文件(M3u8)，然后在后边就进行封装为一个个的 <code>ts</code> 格式的包，必要时候可以再度封装为 http 格式的包。</p><p><img src="https://pica.zhimg.com/v2-2cee4e3a7f4a075a2f59d9d7afce8718_720w.jpg?source=d16d100b"></p><blockquote><p>如果播放使用的是 HLS 协议，如图所示，假设服务端按照 3～10s 为单位来切片生成 ts 文件，则会直接导致播放的延时会达到 3～10s，这是该协议在延时方面的硬伤，如果对直播延时敏感，一般改用 RTMP 或者 HTTP-FLV 协议来拉直播流。</p></blockquote><h2 id="协议对比"><a href="#协议对比" class="headerlink" title="协议对比"></a>协议对比</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b32379945bb148ed9cc51266d431cb59~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d315f7008ff4483fb274f5f35427103a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="推拉流流程"><a href="#推拉流流程" class="headerlink" title="推拉流流程"></a>推拉流流程</h2><p><strong>推流端</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fd3142d48d746d39e46622de0634dd0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>采集方式：摄像头、屏幕、图像采集卡等</p><p>图像处理的场景：美颜、绿幕、头饰 多使用 <code>OpenGl</code></p><p><strong>拉流端</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85b4d2ff45ab4e35a38d5af28a8e0b0c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>音画同步</strong></p><p>比较<strong>常用的策略</strong>是：视频同步到音频。(由于人对声音是更加敏感的)</p><p>因为音频是流式的，按照规律的匀速的速率去播放，才能显得更加 “平滑”，而视频的播放其实是一张一张图片进行刷新显示，它的刷新时间的调整相对而言更容易一些，用户肉眼的敏感度也更弱一些。</p><p><img src="https://pic3.zhimg.com/v2-823c9767a8a1c3cb739f4f6c3ad015fe_r.jpg"></p><h2 id="简单使用FFmpeg"><a href="#简单使用FFmpeg" class="headerlink" title="简单使用FFmpeg"></a>简单使用FFmpeg</h2><h3 id="视频中抽取音频"><a href="#视频中抽取音频" class="headerlink" title="视频中抽取音频"></a>视频中抽取音频</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg -i Tar.mkv -vn -c:a libmp3lame -q:a <span class="token number">1</span> onlyAudioTay.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.lxtlovely.top/blog/20220808154431.png"></p><h3 id="音频中抽取视频"><a href="#音频中抽取视频" class="headerlink" title="音频中抽取视频"></a>音频中抽取视频</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg -i Tar.mkv -c:v copy -an onlyVideoTay.mkv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic.lxtlovely.top/blog/20220808155022.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7123453378176221215/">【Android 客户端专场 学习资料二】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming">HTTP Live Streaming - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://zhuanlan.zhihu.com/p/54167734">播放器技术分享（5）：延时优化 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/51924640">播放器技术分享（3）：音画同步 - 知乎 (zhihu.com)</a></p><p><a href="https://juejin.cn/post/7083331031197532191#heading-4">使用FFmpeg添加、删除、替换和提取视频中的音频 - 掘金 (juejin.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的音视频(1)|青训营笔记</title>
      <link href="/2022/08/07/android-zhong-de-yin-shi-pin-1/"/>
      <url>/2022/08/07/android-zhong-de-yin-shi-pin-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Android中的音视频-1-青训营笔记"><a href="#Android中的音视频-1-青训营笔记" class="headerlink" title="Android中的音视频(1)|青训营笔记"></a>Android中的音视频(1)|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第7天</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于音视频，我们需要先了解如下的知识</p><h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/580abcc9c2fa43f2b4d3affe4777a1b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>如上的点阵图，每一幅图片都是由若干个不同颜色的点组成的，这其中的每一个点叫做一个像素。其颜色值一般由RGB表示</p><h3 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h3><p>所谓RGB，是表示颜色值的的一种格式。其原理也是基于三原色，R G B 分别代表的是Red、Green、Blue，其数值表示对应颜色的强度。这三者每一个的取值范围为：0-255</p><p>我们可以在这个网站体验 RGB 的变化 <a href="https://www.sessions.edu/color-calculator/">Color Wheel - Color Calculator | Sessions College</a></p><p>其实我们在开发中多使用到的 HEX 值，这是 RGB 的十六进制表示。在上面的网站中，我们小范围拖动浮标，可以看到会有对应一个色域的值是不变的，这也验证了这是基于三原色来创造了RGB值。</p><p><img src="https://pic.lxtlovely.top/blog/20220806115501.png"></p><h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>分辨率是指纵横方向的像素数量，一般是长*宽。如下图所示</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4458af5fa07491fb15b8c3b66d73699~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef756c32e199499492b03164c0841d6e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>较为高端的手机一般也都不会到达 2k，而是介于<code>1080p-2k</code>，这是因为分辨率越高就意味着手机耗电越大。</p><p>若是视频文件的分辨率为 4k ，但是设备并未达到 4k，此时设备渲染该视频时候会将其降采样，所以观影效果是一样的。</p><h3 id="码率"><a href="#码率" class="headerlink" title="码率"></a>码率</h3><p>码率(比特率)=bit数目/时间(s)  (单位：bps)</p><p>其表示<strong>单位时间内</strong>流媒体的bit数目，所以也可以称之为<strong>码流</strong>。事实上在网络传输中，我们也可以称之为网速</p><p>所以<strong>高比特率</strong> =&gt; 需要高带宽(带宽不高会卡顿)，<strong>低比特率</strong> =&gt; 视频压缩模糊</p><h3 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h3><p><code>FFmpeg</code> 是一个较为著名的视频处理开源工具，很多情况下，我们都会要使用到这个工具。到官网下载解压后配好环境变量，我们就可以使用cmd命令行来分析处理视频了。</p><p><img src="https://pic.lxtlovely.top/blog/20220806234822.png"></p><p>ffmpeg ：视频处理工具</p><p>ffplay：视频播放工具</p><p>ffprobe：视频分析工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">将视频压缩指定大小<span class="token punctuation">(</span>会截短视频<span class="token punctuation">)</span>ffmpeg  -i  Desktop/input.mp4  -fs 10MB  Desktop/output.mp4-fs <span class="token number">10</span> <span class="token builtin class-name">:</span> 表示文件大小最大值为10MB设置视频的帧率为20fpsffmpeg  -i  Desktop/input.mp4  -r <span class="token number">20</span>  Desktop/output.mp4-r <span class="token number">20</span>：表示帧率设置为 20fps设置视频的码率ffmpeg  -i  Desktop/input.mp4  -b:v 1M  Desktop/output.mp4-b:v :指定视频的码率-b:a <span class="token builtin class-name">:</span> 指定音频的码率s1M：码率的值 1M 表示 1Mb/s设置视频的分辨率ffmpeg  -i  Desktop/input.mp4  -s 1920x1080  Desktop/output.mp4-s 1920x1080表示分辨率为1920x1080可以结合上面的命令一起来使用ffmpeg  -i  Desktop/input.mp4  -s 1920x1080  -b:v 1M  -r <span class="token number">20</span>  Desktop/output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码块，里面含有几种压缩视频的命令，大家可以尝试一下。</p><p><a href="https://zhuanlan.zhihu.com/p/255042580">用 ffmpeg 压缩视频 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/mytzs123/article/details/125640275">FFmpeg—-图片处理_ffmpeg压缩图片_mytzs123的博客-CSDN博客</a></p><h3 id="帧率"><a href="#帧率" class="headerlink" title="帧率"></a>帧率</h3><p><strong>帧</strong>：指的是视频或者动画中的每一张画面，视频或者动画就是由一张张画面所组成。(例如胶片)</p><p><strong>帧率</strong>：每秒的帧数。帧数越高，画面越流畅</p><p><strong>FPS</strong>：刷新率，当刷新率太低，会感到屏幕不连贯。</p><p>当然，刷新率要匹配上帧率才能看到对应的流畅效果</p><p><img src="https://pic.lxtlovely.top/blog/dbf89fb6-ce1b-4f2f-a390-2a69f75a6e6b.gif"></p><h3 id="视频封装"><a href="#视频封装" class="headerlink" title="视频封装"></a>视频封装</h3><p>当下的音视频都不是分离的，视频都会带有音频。事实上这两者在底层文件中是分离的，只是我们将其封装了起来，播放的时候就是同步播放的。</p><blockquote><p><strong>封装</strong>：简单来说，就是将已经编码压缩好的<strong>视频轨</strong>和<strong>音频轨</strong>按照一定的格式<strong>放到一个文件</strong>中。再通俗点，视频轨相当于饭，而音频轨相当于菜，封装格式就是一个饭盒，用来盛放饭菜的容器。</p><p><strong>目前主要的视频容器有如下：</strong> MPG、VOB、MP4、3GP、ASF、RMVB、WMV、MOV、Divx、MKV、FLV、TS/PS等</p></blockquote><p>那么他们不同的轨道是<strong>如何查看</strong>的呢？</p><p>下面我们用 <code>ffprobe xxx.mkv</code> 这个命令查看一下视频的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Input <span class="token comment">#0, matroska,webm, from 'D:\系统文件\下载\Video\Tar.mkv':</span>  Metadata:    <span class="token environment constant">LANGUAGE</span>        <span class="token builtin class-name">:</span> und    COMPATIBLE_BRANDS: isomiso2avc1mp41    MAJOR_BRAND     <span class="token builtin class-name">:</span> isom    MINOR_VERSION   <span class="token builtin class-name">:</span> <span class="token number">512</span>    HANDLER_NAME    <span class="token builtin class-name">:</span> AudioHandler    ENCODER         <span class="token builtin class-name">:</span> Lavf59.27.100  Duration: 00:05:16.26, start: <span class="token number">0.000000</span>, bitrate: <span class="token number">304</span> kb/s  Stream <span class="token comment">#0:0: Video: h264 (High), yuv420p(tv, bt709/unknown/unknown, progressive), 854x480 [SAR 1:1 DAR 427:240], 29.97 fps, 29.97 tbr, 1k tbn (default)</span>    Metadata:      ENCODER         <span class="token builtin class-name">:</span> Lavc59.37.100 libx264      DURATION        <span class="token builtin class-name">:</span> 00:05:16.249000000·  Stream <span class="token comment">#0:1: Audio: vorbis, 48000 Hz, stereo, fltp (default)</span>    Metadata:      ENCODER         <span class="token builtin class-name">:</span> Lavc59.37.100 libvorbis      DURATION        <span class="token builtin class-name">:</span> 00:05:16.261000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面得到的结果可以看到时长，比特率信息。以及两个流，一个是Video，一个是Audio；对应的流也可以看到其参数信息</p><p>较为简单的一类视频就是包含了一个视频轨，一个音频轨。但是在大型的电影类视频中，是有着多类型、多语言的音轨以及多种字幕流。</p><p><img src="https://pic.lxtlovely.top/blog/20220807155616.png"></p><p>这个是电影原盘的数据，我们可以看到上面包含多种文件</p><p>一个视频流</p><p>多条音频流</p><p>多条字幕流</p><p>在网络直播或者网络播放的时候，我们可以选择把不必要的轨道去掉，可以节省流量。同时字幕流也可以全部去掉，字幕可以内嵌在视频上面或者作为外挂字幕同步播放。(其中，7.1或者5.1指的是几个喇叭的杜比音效)</p><p>音视频流是分一个个包的，接下来我们用 <code>ffprobe -show_packet xxx.mkv</code> 查看一下媒体的数据包的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>PACKET<span class="token punctuation">]</span><span class="token assign-left variable">codec_type</span><span class="token operator">=</span>audio<span class="token assign-left variable">stream_index</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">pts</span><span class="token operator">=</span><span class="token number">170169</span><span class="token assign-left variable">pts_time</span><span class="token operator">=</span><span class="token number">170.169000</span><span class="token assign-left variable">dts</span><span class="token operator">=</span><span class="token number">170169</span><span class="token assign-left variable">dts_time</span><span class="token operator">=</span><span class="token number">170.169000</span><span class="token assign-left variable">duration</span><span class="token operator">=</span><span class="token number">21</span><span class="token assign-left variable">duration_time</span><span class="token operator">=</span><span class="token number">0.021000</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">248</span><span class="token assign-left variable">pos</span><span class="token operator">=</span><span class="token number">6426569</span><span class="token assign-left variable">flags</span><span class="token operator">=</span>K_<span class="token punctuation">[</span>/PACKET<span class="token punctuation">]</span><span class="token punctuation">[</span>PACKET<span class="token punctuation">]</span><span class="token assign-left variable">codec_type</span><span class="token operator">=</span>video<span class="token assign-left variable">stream_index</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">pts</span><span class="token operator">=</span><span class="token number">170203</span><span class="token assign-left variable">pts_time</span><span class="token operator">=</span><span class="token number">170.203000</span><span class="token assign-left variable">dts</span><span class="token operator">=</span><span class="token number">170170</span><span class="token assign-left variable">dts_time</span><span class="token operator">=</span><span class="token number">170.170000</span><span class="token assign-left variable">duration</span><span class="token operator">=</span><span class="token number">33</span><span class="token assign-left variable">duration_time</span><span class="token operator">=</span><span class="token number">0.033000</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">64</span><span class="token assign-left variable">pos</span><span class="token operator">=</span><span class="token number">6426823</span><span class="token assign-left variable">flags</span><span class="token operator">=</span>__<span class="token punctuation">[</span>/PACKET<span class="token punctuation">]</span><span class="token punctuation">[</span>PACKET<span class="token punctuation">]</span><span class="token assign-left variable">codec_type</span><span class="token operator">=</span>audio<span class="token assign-left variable">stream_index</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">pts</span><span class="token operator">=</span><span class="token number">170190</span><span class="token assign-left variable">pts_time</span><span class="token operator">=</span><span class="token number">170.190000</span><span class="token assign-left variable">dts</span><span class="token operator">=</span><span class="token number">170190</span><span class="token assign-left variable">dts_time</span><span class="token operator">=</span><span class="token number">170.190000</span><span class="token assign-left variable">duration</span><span class="token operator">=</span><span class="token number">21</span><span class="token assign-left variable">duration_time</span><span class="token operator">=</span><span class="token number">0.021000</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">230</span><span class="token assign-left variable">pos</span><span class="token operator">=</span><span class="token number">6426894</span><span class="token assign-left variable">flags</span><span class="token operator">=</span>K_<span class="token punctuation">[</span>/PACKET<span class="token punctuation">]</span><span class="token punctuation">[</span>PACKET<span class="token punctuation">]</span><span class="token assign-left variable">codec_type</span><span class="token operator">=</span>video<span class="token assign-left variable">stream_index</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">pts</span><span class="token operator">=</span><span class="token number">170370</span><span class="token assign-left variable">pts_time</span><span class="token operator">=</span><span class="token number">170.370000</span><span class="token assign-left variable">dts</span><span class="token operator">=</span><span class="token number">170203</span><span class="token assign-left variable">dts_time</span><span class="token operator">=</span><span class="token number">170.203000</span><span class="token assign-left variable">duration</span><span class="token operator">=</span><span class="token number">33</span><span class="token assign-left variable">duration_time</span><span class="token operator">=</span><span class="token number">0.033000</span><span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">711</span><span class="token assign-left variable">pos</span><span class="token operator">=</span><span class="token number">6427131</span><span class="token assign-left variable">flags</span><span class="token operator">=</span>__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/320da7aeca814e14981658150a7a748a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjMwOTA1OA==,size_16,color_FFFFFF,t_70#pic_center"></p><p>我们可以看到<strong>音轨和视频轨是交错排布的</strong>，是混流的。</p><p>选用混流存储而不是一前一后存储的原因是为了数据的<strong>同步</strong>。</p><p>音视频虽然是两个数据流独立存在的，但两个流封装之后的数据是按顺序下载的，为满足在线观看的效果，就需要数据交错排布。否则就会出现卡顿或者音画不同步。</p><h2 id="视频压缩"><a href="#视频压缩" class="headerlink" title="视频压缩"></a>视频压缩</h2><p>若是视频未压缩，一个时长接近两个小时，分辨率为4k的视频，其大小会超过400GB。所以视频的压缩是尤为重要的。</p><h3 id="颜色空间"><a href="#颜色空间" class="headerlink" title="颜色空间"></a>颜色空间</h3><p>YUV色彩空间不同于RGB，是另一种颜色数字化的表达方式，由于RGB不利于压缩，所以在视频系统中多会采用的是YUV。YUV体系中，不同于RGB的是，其有一个亮度的概念，其中Y表示色度，U和V表示亮度。由于人对亮度的敏感程度要大于色度，所以我们可以通过着重于<strong>提升亮度，减低色度</strong>，从而达到不降低分辨率的同时压缩视频的效果。</p><blockquote><p>YUV 其实目前有 三种分类：</p><p>1，YIQ 适用于NTSC彩色电视制式</p><p>2，YUV 适用于PAL和SECAM彩色电视制式</p><p>3，YCrCb 适用于计算机用的显示器</p><p>我们做互联网音视频开发， 一般说的 YUV 是 指 YCbCr ，U 就是 Cb，V 就是 Cr。</p><p>大家经常在一些音视频书籍看到 YCbCr ，把它当成是 YUV 就行。实际上 YCbCr 才是比较准确的术语，JPEG、MPEG 标准 用的也是 YCbCr</p></blockquote><p><img src="https://pic.lxtlovely.top/blog/20220807204550.png"></p><p>上图的第一张是原图，下面的三张分别是 Y Cb Cr。这张图是并未降低色度进行降采样的，事实上我们把色度降采样后拼起来的原图效果是一样的。</p><p><img src="https://pic.lxtlovely.top/blog/Screenshot_20220807_205510_com.huawei.himovie.png"></p><center>对色度降采样<p><strong>YUV采样格式的压缩</strong></p><p><img src="https://pic.lxtlovely.top/blog/Videoframe_20220807_210909_com.huawei.himovie_edit_244506098322065.jpg"></p><h3 id="帧内压缩"><a href="#帧内压缩" class="headerlink" title="帧内压缩"></a>帧内压缩</h3><p>帧内（Intraframe）压缩也称为空间压缩（Spatial compression）。</p><p>当压缩一帧图像时，仅考虑<strong>本帧的数据</strong>而不考虑相邻帧之间的<strong>冗余信息</strong>，这实际上与静态<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9">图像压缩</a>类似。帧内一般采用<strong>有损压缩</strong>算法，达不到很高的压缩比。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa2528997aa445dd829a273618550d45~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>如上图，将图片分为多个小方块，对于色值相同的小方块，我们只需要记录一个小方块的数据，其他的就引用该方块的数据即可。</p><h3 id="帧间压缩"><a href="#帧间压缩" class="headerlink" title="帧间压缩"></a>帧间压缩</h3><p>帧间压缩(Interframe compression)也称为时间压缩(Temporal_compression),是基于许多视频或动画的</p><p>连续前后两帧具有很大的相关性(即连续的视频其相邻帧之间具有冗余信息)的特点来实现的。</p><p>通过比较时间轴上不同帧之间的数据实施压缩,进一步提高压缩比.一般是无损压缩。</p><p>=&gt;对于画面中静态的不去记录处理它，只去记录变化的画面，称之为记录残差。在呈现的时候，叠加残差值即可获得后面的帧的画面了。</p><h3 id="帧的编码类型"><a href="#帧的编码类型" class="headerlink" title="帧的编码类型"></a>帧的编码类型</h3><p><strong>I-frame</strong>：Intra-frame 帧内帧 (<strong>不会依赖其他帧，靠自己就能绘制出完整的画面,压缩比小</strong>)</p><p><strong>P-frame</strong>：Predicted Frame 前向预测帧 (<strong>依赖前面的帧，叠加残差值绘制出画面，压缩比较高</strong>)</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d7c779108db4abaa2e17d6c5b08addd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>B-frame</strong>：Bi-Directional frame (双向预测帧，参考前后的帧)</p><p>由于B帧可以参考和插入在它之前和之后发生的两个（或更多）帧（在时间维度上），所以它可以显著降低帧的大小，同时保持视频质量。B帧能够利用空间冗余和时间冗余（未来的帧和过去的帧），这使得它在视频压缩中非常有用。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10174d46456b4025bcf1d4737c9ba064~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>上图中的第一行数字是帧展示的顺序，第二行数字是帧的解码顺序。上图我们就可以看到，先解码I帧后，就去解码了第四个位置的p帧，然后中间的P帧就依赖这两个前后帧来进行解码。(<strong>解码顺序：I-&gt;P-&gt;B</strong>)</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45c4f25250fe416bb0cdb1778cc854ad~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><center>对比表格<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89e99a5b0d4248deb07d2d8644d2fcb1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>当拖动进度条，视频<strong>改变播放进度</strong>后，如果不在同一个 GOP 中，需要从新位置所在的 GOP 的 I 帧开始解码(一定是从I帧开始解码的)</p><p>拖动后起播所需的耗时取决于位置在 GOP 中的位置，<strong>越靠前能越快响应</strong></p><p><strong>不同场景对 GOP 的设置</strong></p><p>视频点播：节省带宽，高压缩率，会使用 B 帧</p><p>直播：低延迟，不使用 B 帧</p><p>视频编辑：提高响应，个别会使用全 I 帧</p><h3 id="视频编码格式"><a href="#视频编码格式" class="headerlink" title="视频编码格式"></a>视频编码格式</h3><p>现下的编码格式(后者压缩比都比前者提高一倍)有：</p><ul><li><p>H265 压缩比更高，需要更多的算力</p></li><li><p>H264 ： AVC 更普及</p></li><li><p>H265 ： HEVC 更小体积</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.sessions.edu/color-calculator/">Color Wheel - Color Calculator | Sessions College</a></p><p><a href="https://zhuanlan.zhihu.com/p/383974036">ffmpeg压缩视频 - 知乎 (zhihu.com)</a></p><p><a href="https://juejin.cn/post/7123453378176221215/">【Android 客户端专场 学习资料二】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/weixin_46309058/article/details/119038548">ffprobe常用命令_我有两颗星星的博客-CSDN博客_ffprobe命令</a></p><p><a href="https://blog.csdn.net/u012117034/article/details/124881358">YUV色彩空间_Loken2020的博客-CSDN博客_yuv颜色空间</a></p><p><a href="https://baike.baidu.com/item/%E5%B8%A7%E5%86%85%E5%8E%8B%E7%BC%A9/3431175?fr=aladdin">帧内压缩_百度百科 (baidu.com)</a></p></center></center>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二节课_Handler|青训营笔记</title>
      <link href="/2022/07/29/di-er-jie-ke-tang-bi-ji/"/>
      <url>/2022/07/29/di-er-jie-ke-tang-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="第二节课-Handler-青训营笔记"><a href="#第二节课-Handler-青训营笔记" class="headerlink" title="第二节课_Handler|青训营笔记"></a>第二节课_Handler|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第3天</strong></p><h2 id="线程通信-Handler"><a href="#线程通信-Handler" class="headerlink" title="线程通信_Handler"></a>线程通信_Handler</h2><h3 id="Handler-作用"><a href="#Handler-作用" class="headerlink" title="Handler 作用"></a><code>Handler</code> 作用</h3><p>在通常的情况下，我们会在子线程处理耗时操作，等待子线程耗时操作结束之后，再通知主线程更新UI。</p><p><code>Handler</code> 是运行在主线程中的，它的作用就是帮助我们在子线程和主线程之间进行线程通信。我们可以在子线程中发送消息通知主线程，然后主线程中监听接收消息，进而对该消息进行处理。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57947b4c1adc48e4a55db0897942a277~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>初识 <code>Handler</code> 的话，我们需要记住的是，他是一个不断在 <code>looper</code> 之中不断轮询的一个消息队列。我们可以不断的往这个轮询的池子中丢入信息，然后在获取的时候就是不断从池子里面的接受信息。</p><p>其基本用法也就是 <code>发送</code> <code>接收</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//这里接受并处理消息</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//发送消息</span>handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>handler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//简单示意</span><span class="token comment">//子线程发消息</span>Thread <span class="token punctuation">{</span>            <span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            msg<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span>            handler<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//主线程接收消息</span>handler <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> Message<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>what <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"hhh"</span>                    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"handleMessage: <span class="token interpolation"><span class="token delimiter variable">${</span>message<span class="token punctuation">.</span>what<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Handler-浅析"><a href="#Handler-浅析" class="headerlink" title="Handler 浅析"></a><code>Handler</code> 浅析</h3><ul><li><p><code>Handler</code> 与线程如何关联？</p><p><code>Handler</code> 在创建的时候是要<strong>先创建 <code>Looper</code> 的</strong>，就如上边的示意代码，创建 <code>Handler</code> 的时候，得传入一个 <code>Looper</code> 类型到构造器。</p><blockquote><p>而Looper 使用 <code>Looper.prepare()</code> 方法来创建 Looper ，并<strong>借助 ThreadLocal 来实现与当前线程的绑定</strong>功能。</p></blockquote></li><li><p><code>Handler</code> 发出去的消息是谁管理的？</p><p>我们查看 <code>sendMessage(message)</code> 或者 <code>post(runnable)</code> 可以得知，最后他们都会调用 <code>MessageQueue.enqueueMessage(Message,long)</code> 方法，<strong>即消息是由 <code>MessageQueue</code> 管理的</strong></p></li><li><p>消息又是怎么回到 <code>handleMessage()</code> 方法的？线程的切换是怎么回事？</p><blockquote><p><strong>Looper.loop() 是个死循环，会不断调用 MessageQueue.next() 获取 Message ，并调用 <code>msg.target.dispatchMessage(msg)</code> 回到了 Handler 来分发消息，以此来完成消息的回调</strong></p></blockquote><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">Thread.<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Looper.<span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//不断循环获取Message</span> -&gt; MessageQueue.<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取到之后，Message.target 就是发送该消息的 Handler,回到该Handler分发消息</span>  -&gt; Message.target.<span class="token function">dispatchMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    -&gt; Handler.<span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Handler.handleMessage() 所在的线程最终由调用 Looper.loop() 的线程所决定</strong></p><p>平时我们用的时候从异步线程发送消息到 Handler，这个 Handler 的 <code>handleMessage()</code> 方法是在主线程调用的，所以消息就从异步线程切换到了主线程。这就是<strong>线程的切换</strong>了</p></blockquote></li></ul><p><img src="https://pic.lxtlovely.top/blog/1fe7813a-4179-41f3-9154-3ef397d36e0a.png"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/26/16927e6098cf257b~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></p><blockquote><p><strong>小结</strong></p><ul><li><p>Looper ：<strong>负责关联线程以及消息的分发</strong>，在调用 <code>Looper</code> 线程下从 MessageQueue 获取 Message，分发给 Handler ；</p></li><li><p>MessageQueue ：<strong>一个消息队列，负责消息的存储与管理</strong>，负责管理由 Handler 发送过来的 Message ；</p></li><li><p>Handler : <strong>负责发送并处理消息</strong>，面向开发者，提供 API，并隐藏背后实现的细节。</p></li></ul><p><strong>Handler 发送的消息由 MessageQueue 存储管理，并由 Loopler 负责回调消息到 handleMessage()。</strong></p><p><strong>线程的转换由 Looper 完成，handleMessage() 所在线程由 Looper.loop() 调用者所在线程决定。</strong></p><p>具体查看<a href="https://juejin.cn/post/6844903783139393550#heading-4">Handler 都没搞懂，拿什么去跳槽啊？ - 掘金 (juejin.cn)</a></p></blockquote><h3 id="Handler-泄露问题"><a href="#Handler-泄露问题" class="headerlink" title="Handler 泄露问题"></a><code>Handler</code> 泄露问题</h3><h4 id="为什么-Handler-会引发泄露呢？"><a href="#为什么-Handler-会引发泄露呢？" class="headerlink" title="为什么 Handler 会引发泄露呢？"></a>为什么 <code>Handler</code> 会引发泄露呢？</h4><p>其主要原因是，我们错误的使用了 <code>Handler</code> ；这导致我们在关闭 <code>Activity</code> 的时，<code>Handler</code> 或者其他<strong>还在运行的类仍引用了 <code>Activity</code></strong> 。这就导致 <code>Activity</code> 无法被回收，就会发生泄露。</p><p>有可到达 <code>Activity</code> 的引用链，可能会导致泄露的情况：</p><ul><li><code>Thread</code> 或者 <code>Handler</code> 为匿名内部类，持有了外部的 <code>Activity</code> 。</li><li><code>Thread</code> 没了，但是若其运行的 <code>Message</code> 还在发送。这会导致 <code>Looper</code> 也间接持有 <code>Activity</code></li></ul><blockquote><p><strong>GC root原理：通过对枚举GCroot对象做引用可达性分析，即从GC root对象开始，向下搜索，形成的路径称之为 引用链。如果一个对象到GC roots对象没有任何引用，没有形成引用链，那么该对象等待GC回收。</strong></p><p>GC root对象是什么？</p><p>Java中可以作为GC Roots的对象</p><p>1、虚拟机栈（javaStack）（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。</p><p>2、方法区中的类静态属性引用的对象。</p><p>3、方法区中常量引用的对象。</p><p>4、本地方法栈中JNI(Native方法)引用的对象。</p></blockquote><h4 id="解决-Handler-泄露"><a href="#解决-Handler-泄露" class="headerlink" title="解决 Handler 泄露"></a>解决 <code>Handler</code> 泄露</h4><ol><li>强应用 Activity 改为弱引用</li><li>及时切断两大 GC Root 的引用链关系:  Main Looper 到 Message；以及结束子线程。</li></ol><p><img src="https://pic.lxtlovely.top/blog/640"></p><p>步骤1：Handler设为静态内部类，且对 <code>Activity</code> 弱引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SafeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerActivity</span><span class="token punctuation">&gt;</span></span> ref<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SafeHandler</span><span class="token punctuation">(</span><span class="token class-name">HandlerActivity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HandlerActivity</span> activity <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            activity<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤2：<code>onDestroy()</code> 的时候<strong>切断引用链关系</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.若子线程任务尚未结束，及时中断</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//子线程中创建了 Looper 并成为了 Looper 线程的话，须手动 quit</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    handlerThread<span class="token punctuation">.</span><span class="token function">quitSafely</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//主线程的 Looper 不可quit，退出App就挂掉了，所以要清除所有未处理的 message</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    mainHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小结</p><p><code>Handler</code> 处理中持有 <code>Activity</code> 的，其生命周期应当与 <code>Activity</code> 一致，才是正确的用法</p><p>最正确用法应该是：</p><ol><li>使用 <code>Handler</code> 机制，采用<strong>弱引用 + 静态内部类</strong>。保证错误延长了周期也能正确 GC</li><li><code>Activity</code>结束时候，<strong>清空 Message、终止 Thread 或退出 Looper</strong>。及时切除引用链</li></ol></blockquote><h4 id="正确在子线程使用-Toast"><a href="#正确在子线程使用-Toast" class="headerlink" title="正确在子线程使用 Toast"></a>正确在子线程使用 Toast</h4><p>由于 <code>Toast</code> 就是依赖于 Handler 完成的，所以在子线程中需要学习<strong>完整的</strong> Handler 使用方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//完整的需要有下面 1 2 两步</span><span class="token keyword">class</span> <span class="token class-name">LooperThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Handler</span> mHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>        mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// process incoming messages here</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//得出下列代码</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">HandlerActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"不会崩溃啦！"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Looper一直死循环，为啥主线程不会卡死"><a href="#Looper一直死循环，为啥主线程不会卡死" class="headerlink" title="Looper一直死循环，为啥主线程不会卡死"></a>Looper一直死循环，为啥主线程不会卡死</h4><p>死循环是为了保证主线程能一直执行下去，但是事实上他并不是简单的无限循环下去，而是<strong>会休眠的</strong>。当没有消息的时候，Handler会开始休眠，直到有消息传递的时候就会唤醒它。大部分情况下，Handler都是在休眠中。详细分析可以看<a href="https://www.zhihu.com/question/34652589/answer/90344494">Android中为什么主线程不会因为Looper.loop()里的死循环卡死？ - 知乎 (zhihu.com)</a></p><h2 id="进程通信-Binder"><a href="#进程通信-Binder" class="headerlink" title="进程通信_Binder"></a>进程通信_Binder</h2><p><img src="https://pic.lxtlovely.top/blog/dbf6e5a4-ce13-40ea-b941-248910610fcf.png"></p><p><img src="https://pic.lxtlovely.top/blog/2612a42f-8ef4-4f8d-a9b4-a64d153e6ad0.png"></p><p><img src="https://pic.lxtlovely.top/blog/9532e77f-04b4-414c-a196-d8ebb1ed1f45.png"></p><p><img src="https://pic.lxtlovely.top/blog/72ebf1e1-ecd9-4f59-ad6c-2749fc4cc281.png"></p><p><img src="https://pic.lxtlovely.top/blog/7155ffa5-bdbf-4f42-8bdf-b2c119a5df82.png"></p><p><img src="https://pic.lxtlovely.top/blog/12d2e626-df86-4abd-9d29-b3924fa1ec15.png"></p><p><img src="https://pic.lxtlovely.top/blog/81716969-1ca0-4e80-9d47-550995d73074.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6844903783139393550#heading-15">Handler 都没搞懂，拿什么去跳槽啊？ - 掘金 (juejin.cn)</a></p><p><a href="https://www.cnblogs.com/chaowang/p/6138938.html">handler - 黄朝旺 - 博客园 (cnblogs.com)</a></p><p><a href="https://mp.weixin.qq.com/s/IgPrpS7M4Zg1VO7QXr4mYQ">一次性讲清楚 Handler 可能导致的内存泄漏和解决办法 | 开发者说·DTalk (qq.com)</a></p><p><a href="https://blog.csdn.net/qq_44787816/article/details/119239324">什么是GC root ，GC root原理_遇见的昨天的博客-CSDN博客_gc root</a></p><p><a href="https://www.zhihu.com/question/34652589/answer/90344494">Android中为什么主线程不会因为Looper.loop()里的死循环卡死？ - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Handler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一节课堂笔记|青训营笔记</title>
      <link href="/2022/07/27/di-yi-jie-ke-tang-bi-ji/"/>
      <url>/2022/07/27/di-yi-jie-ke-tang-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="第一节课堂笔记-青训营笔记"><a href="#第一节课堂笔记-青训营笔记" class="headerlink" title="第一节课堂笔记|青训营笔记"></a>第一节课堂笔记|青训营笔记</h1><p><strong>这是我参与「第四届青训营 」笔记创作活动的的第2天</strong></p><h2 id="Android概览"><a href="#Android概览" class="headerlink" title="Android概览"></a>Android概览</h2><h3 id="开发和交付"><a href="#开发和交付" class="headerlink" title="开发和交付"></a>开发和交付</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81a778f65a4042aba624e01c09b5f62c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"></p><center>开发团队组织结构APP项目的开发事实上并非只由客户端来开发，一个APP的研发是一个团队的产出的。单从上面的简化图来看，我们就能看到有6个部门的协作。<blockquote><p>注：QA是 <strong>质量保证</strong></p></blockquote><h3 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h3><p>从角色上来分，我们会面对三种角色。面对这三种角色，我们要对应完成我们的任务，提供自己的价值</p><ul><li>对外：为用户创造价值，是项目宗旨</li><li>对内：为公司降低成本，包括时间成本、金钱成本等</li><li>自身：通过努力，提供产品。把个人看成产品，打造自己技术品牌，培养自身实力</li></ul><p><img src="https://pic.lxtlovely.top/blog/atlas.png"></p><center>点击放大查看<h3 id="APK构成"><a href="#APK构成" class="headerlink" title="APK构成"></a>APK构成</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bec1d7bc42ed431486045caf398df409~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp"></p><ul><li><p>AndroidManifest.xml ：生命app中四大组件，以及权限等</p></li><li><p>classes.dex ：所有编写的java、kotlin代码</p></li><li><p>res文件夹 ：资源文件夹，包括图片、颜色、字符串，以及搭建的XML布局文件</p></li><li><p>META-INF文件夹：存在签名和证书，用于校验和安全</p></li><li><p>lib文件夹：主要是存放C/C++代码编译成的so文件</p></li></ul><p>更多的请查看我写的另一篇文章 <a href="https://lxtlovely.top/2021/12/14/di-yi-zhang-an-zhuo-kai-fa-zheng-ti-jie-shao-kai-shi-qi-cheng/">安卓开发整体介绍</a></p><h2 id="Android开发技巧"><a href="#Android开发技巧" class="headerlink" title="Android开发技巧"></a>Android开发技巧</h2><h3 id="重构技巧"><a href="#重构技巧" class="headerlink" title="重构技巧"></a>重构技巧</h3><p><strong>重构快捷键</strong></p><ul><li><strong>移动</strong>：<code>F6</code></li><li><strong>重命名</strong>：<code>Shift</code> + <code>F6</code></li><li><strong>提取方法</strong>：<code>ctrl</code> + <code>alt</code> + <code>M</code></li></ul><blockquote><p>提取方法快捷键会出现失效的情况，是因为该快捷键被占用了。有可能是 Nvidia Geforce Experience 这个软件占用，也有可能是其他软件占用。若是无法解决占用问题，可以 <code>右键</code> -&gt; <code>Refactor</code> -&gt; <code>Function</code></p></blockquote><p><strong>抽取快捷键</strong></p><ul><li><p><strong>提取成员变量</strong>：<code>ctrl</code> + <code>alt</code> + <code>F</code></p></li><li><p><strong>提取静态常量</strong>：<code>ctrl</code> + <code>alt</code> + <code>C</code></p></li><li><p><strong>提取参数</strong>：<code>ctrl</code> + <code>alt</code> + <code>P</code> </p><blockquote><p>能解决重构时候出现变量过多的问题，将调用的参数直接提取到上一层方法或者类的参数列表之中</p></blockquote></li><li><p><strong>提取局部变量</strong>：<code>ctrl</code> + <code>alt</code> + <code>V</code></p></li></ul><p><strong>拓展技巧</strong></p><ul><li><p><strong>Extract Interface</strong>： <code>Refactor</code> -&gt; <code>Extract Interface</code> </p><blockquote><p>可以把类的方法抽象为接口，重构MVP常用</p></blockquote></li><li><p><strong>Pull Members Up</strong>：<code>Refactor</code> -&gt; <code>Pull Members Up</code> </p><blockquote><p>可以把方法提到父类。所以可以把新的方法提到已继承的接口中</p></blockquote></li><li><p><strong>重载爆炸</strong>：<code>Refactor</code> -&gt; <code>Introduce Parameter Object</code> </p><blockquote><p>当一个类有多个重载，多个构造方法，这个功能可以把多个重载的参数提取为一个Object类</p></blockquote></li><li><p><strong>Change Signature</strong>： <code>Refactor</code> -&gt; <code>Introduce Parameter Object</code> </p><blockquote><p>当你要添加或删除某个方法的参数，但是手动添加删除又会导致其他引用过的地方报错。使用这个功能可以让关联处一起修改</p></blockquote></li></ul><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><h4 id="Search-with-Github"><a href="#Search-with-Github" class="headerlink" title="Search with Github"></a>Search with Github</h4><p><img src="https://pic.lxtlovely.top/blog/Search_with_Github.png"></p><center>在插件商店搜索 Search with Github  安装<p><img src="https://pic.lxtlovely.top/blog/search_click.png"></p><center>选择代码后，右键搜索该插件可以帮助我们在 Github 上边搜索代码，能快速帮我们查找开源库的一些 demo 实现这类的功能<h4 id="SingletonTest"><a href="#SingletonTest" class="headerlink" title="SingletonTest"></a>SingletonTest</h4><p>该插件能够帮我们生成对应的五种单例模式的代码，免去我们手打的时间</p><p><img src="https://pic.lxtlovely.top/blog/singleTon.png"></p><center>如何生成单例代码<h4 id="GsonFormatPlus"><a href="#GsonFormatPlus" class="headerlink" title="GsonFormatPlus"></a>GsonFormatPlus</h4><p>安装该插件后，可以用其自动生成 <code>json</code> 对应的类。如果对格式有不同要求，这个插件也提供了很多不同格式的类给大家选择，只需要在生成过程中修改就行。</p><p>快捷键使用方法：<code>Alt</code> + <code>S</code> </p><p>点击打开：<code>右键</code> -&gt; <code>Generate</code> -&gt; <code>GsonFormatPlus</code></p><h3 id="Reading"><a href="#Reading" class="headerlink" title="Reading"></a>Reading</h3><h4 id="书签功能"><a href="#书签功能" class="headerlink" title="书签功能"></a>书签功能</h4><p>阅读源码时候，我们可能会一时阅读不完，此时需要标记一些地方下次再查看。这时候可以使用到书签功能</p><p>win系统快捷键：<code>F11</code></p><p><img src="https://pic.lxtlovely.top/blog/addBookMark.png"></p><p>查看书签快捷键：<code>Shift</code> + <code>F11</code></p><p><img src="https://pic.lxtlovely.top/blog/checkBookMark.png"></p><h4 id="Hierarchy"><a href="#Hierarchy" class="headerlink" title="Hierarchy"></a>Hierarchy</h4><p>该功能用以查看类的类的树，类的结构，类的父类子类</p><p><img src="https://pic.lxtlovely.top/blog/CtrlHierarchy.png"></p><p>使用方式：</p><ul><li>右侧菜单栏点出</li><li>快捷键：<code>Ctrl</code> + <code>Hierarchy</code></li></ul><h4 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h4><p>该功能用以查看类中所有的方法，打开后也可用 <code>Shift + F12</code> 来查找方法</p><p><img src="https://pic.lxtlovely.top/blog/structurealy7.png"></p><p>使用方式：</p><ul><li>快捷键：<code>Alt</code> + <code>7</code></li><li>左侧菜单栏点出</li></ul><h3 id="Debug技巧"><a href="#Debug技巧" class="headerlink" title="Debug技巧"></a>Debug技巧</h3><p>使用过 <code>Attach Debug</code> 的同学都知道，我们需要先启动APP才能去 <code>Attach Debug</code>。 </p><p>那如果我们想在 <code>MainActivity</code> 的 <code>Oncreate()</code>  中 <code>Attach Debug</code>；最笨的方法就是点开app，迅速 <code>Attach Debug</code>。实际上我们可以启用一个叫做 <code>等待调试器</code> 的选项。该选项在开发者选项中，我们选择好了调试的APP，就可以开启这个选项了。开启之后，当我们 <code>Run</code> 我们的 app，就是出现一个等待调试器开启的界面，这个时候我们就可以有时间开启调试模式，在 <code>Oncreate()</code> 中打断点调试了。</p><h2 id="版本管理助手-Git"><a href="#版本管理助手-Git" class="headerlink" title="版本管理助手_Git"></a>版本管理助手_Git</h2><h3 id="Git-是什么"><a href="#Git-是什么" class="headerlink" title="Git 是什么"></a>Git 是什么</h3><p><code>Git</code> 一个版本管理工具，我们可以利用 <code>Git</code> 来提交代码，<code>Git</code> 就可以帮忙记录我们每次提交的代码与上次提交的有何不同，不同的点是在哪里。我们可以根据这些查看这些变化，或者是回退代码版本。</p><p>下面给出 <code>Git</code> 的常用操作</p><p><img src="https://img-blog.csdnimg.cn/1fc1ceadfdb24742a50d447dddc40501.jpeg"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7122710954457956383/#heading-25">【Android 客户端专场 学习资料一】第四届字节跳动青训营 - 掘金 (juejin.cn)</a></p><p><a href="https://lxtlovely.top/2021/12/14/di-yi-zhang-an-zhuo-kai-fa-zheng-ti-jie-shao-kai-shi-qi-cheng/">第一章 安卓开发整体介绍|《第一行代码》笔记 | LikeYou (lxtlovely.top)</a></p><p><a href="https://itcn.blog/p/3134356008.html">Git 常用命令大全-IT Blog (itcn.blog)</a></p><p><a href="https://www.it1352.com/2158631.html">Android Studio“提取方法”快捷键Ctrl + Alt + M不起作用 - IT屋-程序员软件开发技术分享社区 (it1352.com)</a></p></center></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青训营笔记 </tag>
            
            <tag> Android概览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数智天气App需求书</title>
      <link href="/2022/07/19/shu-zhi-tian-qi-app-xu-qiu-shu/"/>
      <url>/2022/07/19/shu-zhi-tian-qi-app-xu-qiu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="数智天气App需求书"><a href="#数智天气App需求书" class="headerlink" title="数智天气App需求书"></a>数智天气App需求书</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为促进组间合作交流以及锤炼技术，UI组和安卓组将合作开发一款天气APP。数据支持由 <code>和风天气</code> 提供开发者版本，我们需要基于该API打造一款好用实用的天气软件。</p><p><a href="https://dev.qweather.com/docs/api/">API开发文档 | 和风天气开发平台 (qweather.com)</a></p><p>开发出来后，将联名开源到GitHub，UI同学也可以开源到figma</p><h2 id="开发限制"><a href="#开发限制" class="headerlink" title="开发限制"></a>开发限制</h2><ol><li>由于我们使用的是开发者版本，未使用付费版本，所以会有些数据是无法获取的。下面列举这些数据</li></ol><blockquote><ul><li>格点天气API</li><li>历史数据API</li><li>热带气旋（台风）API</li><li>海洋API</li><li><a href="https://dev.qweather.com/docs/api/astronomy/solar-elevation-angle/">太阳高度角 - API | 和风天气开发平台 (qweather.com)</a></li><li><a href="https://dev.qweather.com/docs/api/astronomy/solar-radiation-hourly-forecast/">太阳辐射逐小时预报 - API | 和风天气开发平台 (qweather.com)</a></li></ul></blockquote><ol start="2"><li>其次设计的同学如果单独设计天气状态图标的话，需要对应下面这个表设计好，导出文件的时候也需对应好文件编号。下面给出对应的表</li></ol><p><a href="https://icons.qweather.com/icons/#sunny-fill">图标预览 | 和风天气图标 (qweather.com)</a></p><p>点击图标即可查看对应的编号</p><ol start="3"><li><p>很复杂的动画需要用到<a href="https://lottiefiles.com/">Free Lottie Animation Files, Tools &amp; Plugins - LottieFiles</a>这个平台</p><p>UI的同学可以根据平台规则画好动画后，上传到这个平台，然后我们去直接引用导入即可。</p><p><a href="https://lottiefiles.com/what-is-lottie">What is a Lottie animation? - LottieFiles</a></p><p><a href="https://lottiefiles.com/plugins/figma">LottieFiles for Figma Plugin - Enrich your designs with motion</a></p></li><li><p>软件要同时兼容中文和英文，白天和黑夜</p></li></ol><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>这个软件我们不对功能做需求限制，UI的同学根据 <a href="https://dev.qweather.com/docs/api/">API开发文档 | 和风天气开发平台 (qweather.com)</a> 这个文档里面我们能用到的功能自行设计即可，你们可以参考各种天气APP，随意发挥想象来设计该软件。</p><p>由于每个数据都对应有网页的，UI的同学也可以设计点击事件，跳转出网页来查看更多信息。</p>]]></content>
      
      
      <categories>
          
          <category> 天气APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天气 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法|双指针解决链表</title>
      <link href="/2022/07/17/he-bing-you-xu-lian-biao/"/>
      <url>/2022/07/17/he-bing-you-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="双指针链表题"><a href="#双指针链表题" class="headerlink" title="双指针链表题"></a>双指针链表题</h1><p>学习地址：<a href="https://labuladong.github.io/algo/2/18/17/">双指针技巧秒杀七道链表题目 :: labuladong的算法小抄</a></p><h2 id="迭代法合并链表"><a href="#迭代法合并链表" class="headerlink" title="迭代法合并链表"></a>迭代法合并链表</h2><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">题目：21. 合并两个有序链表 - 力扣（LeetCode）</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//迭代法合并有序链表</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> list1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//随便来一个头节点</span>        <span class="token class-name">ListNode</span> p  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> q <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//建立指针</span>        <span class="token comment">//比较大小插入链表中</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>list1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> list2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> list2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                q<span class="token punctuation">.</span>next <span class="token operator">=</span> list2<span class="token punctuation">;</span>                list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                q<span class="token punctuation">.</span>next <span class="token operator">=</span> list1<span class="token punctuation">;</span>                list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//查看最后的是否还剩未分配的。如果有，就放入q中</span>        q<span class="token punctuation">.</span>next <span class="token operator">=</span> list1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> list2 <span class="token operator">:</span> list1<span class="token punctuation">;</span>        <span class="token comment">//返回头节点</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>迭代法的原理是不断重复</p><p>在这里利用迭代法不断比较大小重复操作，直到最后某一个待比较的链表指针指到最后就结束迭代</p></blockquote><p>下边使用动图来演示这个迭代过程</p><p><img src="https://labuladong.github.io/algo/images/%e9%93%be%e8%a1%a8%e6%8a%80%e5%b7%a7/1.gif"></p><center>引用labuladong算法小抄的图<p>与迭代法相对应的，我们还可以使用递归法来解此题，具体可以查看官方题解 <a href="https://leetcode.cn/problems/merge-two-sorted-lists/solution/he-bing-liang-ge-you-xu-lian-biao-by-leetcode-solu/">合并两个有序链表 - 合并两个有序链表 - 力扣（LeetCode）</a></p><h2 id="利用优先级队列合并K个升序链表"><a href="#利用优先级队列合并K个升序链表" class="headerlink" title="利用优先级队列合并K个升序链表"></a>利用优先级队列合并K个升序链表</h2><p><a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并K个升序链表 - 力扣（LeetCode）</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//判空一定要有，这是必须要处理的边界条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个头节点</span>        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写一个指针指向的头节点</span>        <span class="token class-name">ListNode</span> q <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment">//创建优先级队列，长度就使用表头数量即可，因为下边都是先出后进，可以保证不会超过长度</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">&gt;</span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>val<span class="token operator">-</span>b<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//利用优先级队列来载入链表数组（对应的表头）</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> listHead <span class="token operator">:</span> lists<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>listHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listHead<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//循环载入最小值</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//获取二叉堆中的最小值</span>            <span class="token class-name">ListNode</span> node <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将最小值存入我们预设的链表</span>            q<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token comment">//将将被poll出来的value的next值存入二叉堆中</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//指针下移一位</span>            q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个算法利用了 <a href="https://labuladong.github.io/algo/2/21/62/">优先级队列</a> 巧妙的解决了这个问题，下面利用一张图辅助理解。</p><p><img src="https://pic.lxtlovely.top/blog/HowToMergeKList.png"></p><blockquote><p>图中模拟出了链表数组的结构，以及对应的步骤指示</p><p>值得一提的是， <code>(a,b)-&gt;(a.val-b.val)</code> 这段代码是使用了 <code>lamada</code> 表达式来替代了 <code>Comparator</code> 比较器， 自写<code>Comparator</code> 比较器的功能也是实现类似这样子的一个比较，所以直接使用这段 <code>lamada</code> 表达式就可以替代这段代码了。当然，我们也可以使用对应的自带比较器来实现这个功能</p></blockquote><blockquote><p> <a href="https://blog.csdn.net/CodersCoder/article/details/108883614">Java集合类学习–PriorityQueue_CodersCoder的博客-CSDN博客</a></p></blockquote><h2 id="利用双指针-虚拟指针头分隔链表"><a href="#利用双指针-虚拟指针头分隔链表" class="headerlink" title="利用双指针+虚拟指针头分隔链表"></a>利用双指针+虚拟指针头分隔链表</h2><p><a href="https://leetcode.cn/problems/partition-list/">86. 分隔链表 - 力扣（LeetCode）</a></p><blockquote><p>题目描述:</p><p>给你一个链表的头节点 <code>head</code> 和一个特定值 <code>x</code> ，请你对链表进行分隔，使得所有 小于 <code>x</code> 的节点都出现在 大于或等于 <code>x</code> 的节点之前。</p><p>你应当 <strong>保留</strong> 两个分区中每个节点的初始 <strong>相对位置</strong> 。</p></blockquote><p><img src="https://pic.lxtlovely.top/blog/partition_list.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> q  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> headq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> headp <span class="token operator">=</span> headq<span class="token punctuation">;</span>        headp<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> q<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>headp<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>headp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> headp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                headp<span class="token punctuation">.</span>next <span class="token operator">=</span> headp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                headp <span class="token operator">=</span> headp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> headq<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意双指针的虚拟指针头，并且当把节点分到不同链的时候，要注意链表的合理连通性，去除不合理的连通性。</p><h2 id="链表倒数第K个节点"><a href="#链表倒数第K个节点" class="headerlink" title="链表倒数第K个节点"></a>链表倒数第K个节点</h2><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode）</a></p><blockquote><p>题目描述</p><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//设置虚拟头节点，使得唯一的一个值被删掉的时候，该值仍有父节点</span>        <span class="token class-name">ListNode</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//L个数据，走到最后一个数据，总步数是L-1，前面先走n-1步</span>        <span class="token comment">//留L-n步给p2走</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//一定要做这个next的判空，不然去到空数据处，会使得边界值出错</span>        <span class="token comment">//走了L-n步</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想要一次遍历找到倒数第 <code>k</code> 位的节点，需要让指针在头节点走 <code>n-k+1</code> 位。但是我们事先并不知道 <code>n</code> 是多少，这个时候，可以巧妙的利用双指针来解决这个问题。</p><blockquote><ol><li>预设在头节点预设 <code>P1</code> 和 <code>P2</code> 两个指针，遍历完链表走到末尾一共会走 <code>L-1</code> 步</li><li>指针 <code>P1</code> 分两阶段走，第一阶段移动的步数为  <code>k-1</code> </li><li>那么剩下的步数就为 <code>L-k</code> 了，这时候开启第二阶段，让 <code>P1</code> 和 <code>P2</code> 一起走，直到 <code>P2</code> 走到尽头。</li><li>这时候，<code>P2</code> 就移动到了第 <code>L-k+1</code> 位，即倒数第 <code>k</code> 位</li></ol></blockquote><h2 id="快慢指针求链表中点"><a href="#快慢指针求链表中点" class="headerlink" title="快慢指针求链表中点"></a>快慢指针求链表中点</h2><p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点 - 力扣（LeetCode）</a></p><blockquote><p><strong>题目描述</strong></p><p>给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//下面的判断条件，可以让链表为偶数链的时候，不会出现空指针错误 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fast != null &amp;&amp; fast.next != null</code> 这段代码可以很好的兼容，不会出现偶数空指针。如果去掉前半部分，只剩下这段判断代码 <code>fast.next != null</code> ，偶数链会出现空指针。下面举个例子：</p><blockquote><p>链为[1,2,3,4,5,6]的链表，当 <code>fast</code> 走到 <code>5</code> 的时候，<code>fast</code> 的下一位是 <code>null</code> 。这时候他再次参与下一轮的判断的时候，它本身就是 <code>null</code> ，所以会出现空指针异常</p></blockquote><h2 id="链表环问题"><a href="#链表环问题" class="headerlink" title="链表环问题"></a>链表环问题</h2><p><strong>判断是否环</strong> <a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表 - 力扣（LeetCode）</a></p><blockquote><p>题目描述:</p><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { *         val = x; *         next = null; *     } * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">//相遇必有环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>球形的定理，因为地球是圆的，那么即使路途再远，一直走，终会走到一起</p><p>那么不会相遇的，必定不是圆。谁相遇，快慢指针，这个相遇问题也类似行星轨道问题，只不过这里是判断不做计算。</p><p><strong>寻找形成环的环起点</strong> <a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II - 力扣（LeetCode）</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { *         val = x; *         next = null; *     } * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span>slow<span class="token punctuation">;</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">//相遇的时候就跳出循环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果是由于遍历到最后跳出循环，那么就没有环</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//否则，根据对称原理，继续遍历找出首个成环的点。</span>        slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span><span class="token punctuation">{</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://labuladong.github.io/algo/images/%e5%8f%8c%e6%8c%87%e9%92%88/3.jpeg"></p><blockquote><p>由于<code>fast</code> 总是比 <code>slow</code> 要多走一杯的距离，所以第一次相遇的时候，当 <code>slow</code> 为 <code>k</code> ，那么 <code>fast</code> 就为 <code>2k</code> 。</p><p>由图，多出来的一个 <code>k</code> 恰好是从相遇点环绕了 <code>n</code> 个圈的长度</p></blockquote><p><img src="https://labuladong.github.io/algo/images/%e5%8f%8c%e6%8c%87%e9%92%88/2.jpeg"></p><blockquote><p>假设 <code>m</code> 为相遇点距离环起点的距离</p><p>那么 <code>k-m</code> 为 <code>head</code> 距离环起点的距离，同时也是在相遇点绕了n圈回到环绕点的距离</p><p>所以当<strong>指针1</strong>从 <code>head</code> 出发，<strong>指针2</strong>从<strong>相遇点</strong>出发，他们同时开始以相同速度向前走，最终会以走 <code>k-m</code> 的距离两指针在<strong>环起点</strong>相遇</p></blockquote><h2 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表 - 力扣（LeetCode）</a></p><blockquote><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { *         val = x; *         next = null; *     } * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> headA<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                p1 <span class="token operator">=</span> headB<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                p2 <span class="token operator">=</span> headA<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p1<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://labuladong.github.io/algo/images/%e9%93%be%e8%a1%a8%e6%8a%80%e5%b7%a7/6.jpeg"></p></center>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法|滑动窗口解法</title>
      <link href="/2022/05/16/chuang-kou-hua-dong-suan-fa/"/>
      <url>/2022/05/16/chuang-kou-hua-dong-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="窗口滑动算法"><a href="#窗口滑动算法" class="headerlink" title="窗口滑动算法"></a>窗口滑动算法</h1><h2 id="76-最小覆盖子串-力扣（LeetCode）"><a href="#76-最小覆盖子串-力扣（LeetCode）" class="headerlink" title="76. 最小覆盖子串 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串 - 力扣（LeetCode）</a></h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    string minWindow(string s, string t) {        //初始化哈希表和对应的need表        unordered_map&lt;char,int&gt; need,window;        for(char c: t) need[c]++;        //初始化各段标志数据        int left = 0,right = 0;        int valid = 0;        int start = 0,len = INT_MAX;        //下边进行扩大和缩减窗口        while(right &lt; s.size()){            //扩大窗口            char c = s[right];            right++;            //记录进对应的key中，符合该key，加一            if(need.count(c)){                window[c]++;                if(window[c] == need[c]) valid++;            }            //减小窗口            while(valid == need.size()){                if(right-left &lt; len){                    //start记录边界值，left会比start多1，当left越过对应的边界，valid会减少，去除重复的后，循环结束                    start = left;                    len = right -left;                }                char d = s[left];                left++;                //key越界，就结束循环                if(need.count(d)){                    if(window[d] == need[d]) valid--;                    window[d]--;                }            }        }        //判断返回        return len == INT_MAX? "" : s.substr(start,len);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题使用到的是c++，其中的哈希表中，记录key是对应字符，value记录的是对应的字符个数，利用哈希表来对应查询</p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法|差分数组解法</title>
      <link href="/2022/05/15/chai-fen-shu-zu/"/>
      <url>/2022/05/15/chai-fen-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h1><p><a href="https://leetcode.cn/problems/corporate-flight-bookings/">1109. 航班预订统计 - 力扣（LeetCode）</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">corpFlightBookings</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bookings<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Difference</span> diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bookings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//要注意置入数组的索引要减1</span>            diff<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>bookings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> diff<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 差分数组工具类</span><span class="token keyword">class</span> <span class="token class-name">Difference</span> <span class="token punctuation">{</span>    <span class="token comment">// 差分数组</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diff<span class="token punctuation">;</span>        <span class="token comment">/* 输入一个初始数组，区间操作将在这个数组上进行 */</span>    <span class="token keyword">public</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> nums<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>        diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 根据初始数组构造差分数组</span>        diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 给闭区间 [i, j] 增加 val（可以是负数）*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            diff<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 返回结果数组 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>diff<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 根据差分数组构造结果数组</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>差分数组的思想是，保持数组中的元素特性为，后一项记录的是与前一项的差值。这样子就可以保证我们很容易的批量对数组中的数据进行进行增减。</p><p>下面的图片就是描述差分数组，以及本题对差分数组的应用。</p><p><img src="https://pic.lxtlovely.top/blog/Corporate_Flight_Bookings.png"></p><p><a href="https://leetcode.cn/problems/car-pooling/">1094. 拼车 - 力扣（LeetCode）</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">carPooling</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> trips<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//题目限定条件可知，车站有1001个，从0到1000</span>        <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Difference</span> diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> trip <span class="token operator">:</span> trips<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//由于到站下车了，人就不在那个站了，所以</span>            diff<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>trip<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>trip<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>trip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> diff<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">:</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> capacity<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 差分数组工具类</span><span class="token keyword">class</span> <span class="token class-name">Difference</span> <span class="token punctuation">{</span>    <span class="token comment">// 差分数组</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diff<span class="token punctuation">;</span>        <span class="token comment">/* 输入一个初始数组，区间操作将在这个数组上进行 */</span>    <span class="token keyword">public</span> <span class="token class-name">Difference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> nums<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>        diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 根据初始数组构造差分数组</span>        diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 给闭区间 [i, j] 增加 val（可以是负数）*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            diff<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 返回结果数组 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>diff<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 根据差分数组构造结果数组</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题中，以每一站为索引，车内人数为对应索引的数值。利用差分数组对改数组进行增删，最后再返回检测该数组的值是否满足车内总人数</p><p><img src="https://pic.lxtlovely.top/blog/capacity.png"></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 差分数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开闭原则|设计原则</title>
      <link href="/2022/05/10/kai-bi-yuan-ze/"/>
      <url>/2022/05/10/kai-bi-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="开闭原则-设计原则"><a href="#开闭原则-设计原则" class="headerlink" title="开闭原则|设计原则"></a>开闭原则|设计原则</h1><p>持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第4天，<a href="https://juejin.cn/post/7147654075599978532">点击查看活动详情</a></p><blockquote><p>设计原则系列文章</p><p><a href="https://juejin.cn/post/7149189472368721934">单一职责原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149376761606701063">开闭原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7149927872331776031">里氏替换原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150301284627644423">接口隔离原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150670423632379941">依赖反转原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7150923846386712612">迪米特原则|设计原则 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7152528995723149326">六大原则之外的设计原则|设计原则 - 掘金 (juejin.cn)</a></p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>有项目编写经历</li><li>做过代码的功能拓展</li><li>听说过设计模式</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文带大家继续学习 <strong>开闭原则</strong> </p><p>由于在软件体系中，唯一不变的，就是软件一直在变。这就意味着我们的软件、系统，需要把可拓展性做好，才不会让后期的功能拓展变得困难。事实上，大多数的设计模式都是在提高代码的可拓展性。而 <strong>开闭原则</strong> 就是提高代码可拓展性的核心原则。</p><p>开闭原则 <strong>定义</strong></p><p>在<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B?fromModule=lemma_inlink">面向对象编程</a>领域中，<strong>开闭原则</strong>规定“<em>软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的</em>”，这意味着一个实体是允许在不改变它的<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81?fromModule=lemma_inlink">源代码</a>的前提下变更它的行为。该特性在产品化的环境中是特别有价值的，在这种环境中，改变源代码需要<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5?fromModule=lemma_inlink">代码审查</a>，<a href="https://baike.baidu.com/item/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95?fromModule=lemma_inlink">单元测试</a>以及诸如此类的用以确保产品使用质量的过程。遵循这种原则的代码在扩展时并不发生改变，因此无需上述的过程。</p><p>上述的定义来自 百度百科 。其精髓部分是，<strong>对拓展开放，对修改关闭</strong>。意思是说，我们不能去修改原有功能的代码，但是可以利用面向对象特性，在不修改原有代码的基础上进行功能的拓展。</p><h2 id="什么样的代码不符合开闭原则"><a href="#什么样的代码不符合开闭原则" class="headerlink" title="什么样的代码不符合开闭原则"></a>什么样的代码不符合开闭原则</h2><p>开闭原则的定义很清晰，但是想理解和应用起来却感觉很抽象。下面我们结合一段代码来看看，什么样的代码是不符合开闭原则的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Work</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Work</span><span class="token punctuation">(</span><span class="token class-name">A</span> a <span class="token punctuation">,</span> <span class="token class-name">B</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> processA<span class="token punctuation">,</span><span class="token class-name">String</span> processB<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">actionA</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>processA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">actionB</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>processB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的代码中，在 <code>process()</code> 部分，实现了 <strong>actionA</strong> 和 <strong>actionB</strong> 两个功能。</p><p>而当我们想要拓展一个功能 <strong>actionB</strong> 的时候，会做如下修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Work</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">C</span> c<span class="token punctuation">;</span><span class="token comment">//修改</span>        <span class="token keyword">public</span> <span class="token class-name">Work</span><span class="token punctuation">(</span><span class="token class-name">A</span> a <span class="token punctuation">,</span> <span class="token class-name">B</span> b <span class="token punctuation">,</span> <span class="token class-name">C</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//修改</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> processA<span class="token punctuation">,</span><span class="token class-name">String</span> processB<span class="token punctuation">,</span><span class="token class-name">String</span> processC<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//修改</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        a<span class="token punctuation">.</span><span class="token function">actionA</span><span class="token punctuation">(</span>processA<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">actionB</span><span class="token punctuation">(</span>processB<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">actionC</span><span class="token punctuation">(</span>processC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，上述对功能的拓展中，其修改了核心函数的参数，所以这类修改不符合开闭原则。</p><p>因为直接修改了核心代码，会导致原有对该函数的调用会出错，需要修改入参的值。少量代码需要修改还好说，但是当代码里逐渐变大，每次添加新功能，都会需要修改大量的代码。而且，原有的单例测试代码也将不能正确运行。</p><h2 id="如何让代码符合开闭原则"><a href="#如何让代码符合开闭原则" class="headerlink" title="如何让代码符合开闭原则"></a>如何让代码符合开闭原则</h2><p>需要将代码修改得符合开闭原则，就需要把开闭原则的对 <strong>修改关闭</strong> 落实。</p><p>如下方的代码，我们需要将代码中会变化的参数 <strong>提取出来成为一个单独的类</strong> ，这样子便于后面对参数的添加和删除。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkBean</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">A</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Processbean</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processB<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后第二部分，我们需要 将 Work 类抽象出一个父类来，然后每个功能都是继承该父类来实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseWork</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">WorkBean</span> workBean<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Work</span><span class="token punctuation">(</span><span class="token class-name">WorkBean</span> workBean<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workBean <span class="token operator">=</span> workBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Processbean</span> processbean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对应的子类继承父类</span>puvlic <span class="token keyword">class</span> <span class="token class-name">AWork</span> <span class="token keyword">extends</span> <span class="token class-name">BaseWork</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">AWork</span><span class="token punctuation">(</span><span class="token class-name">WorkBean</span> workBean<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Processbean</span> processbean<span class="token punctuation">)</span><span class="token punctuation">{</span>        workBean<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">actionA</span><span class="token punctuation">(</span>processbean<span class="token punctuation">.</span>getProcessA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>puvlic <span class="token keyword">class</span> <span class="token class-name">BWork</span> <span class="token keyword">extends</span> <span class="token class-name">BaseWork</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">BWork</span><span class="token punctuation">(</span><span class="token class-name">WorkBean</span> workBean<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Processbean</span> processbean<span class="token punctuation">)</span><span class="token punctuation">{</span>        workBean<span class="token punctuation">.</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">actionB</span><span class="token punctuation">(</span>processbean<span class="token punctuation">.</span>getProcessB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再使用一个 <strong>ActionList</strong> 类来执行上述的子类,利用这个类可以很方便的新增和执行对应的 <strong>Work</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActionList</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseWork</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BaseWork</span> work<span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        puclic <span class="token keyword">void</span> <span class="token function">actionWork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Processbean</span> processbean<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">BaseWork</span> work <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>            work<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>processbean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们最后将代码进行整合应用，贪简单这样子写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HappyNationalDay</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ActionList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WorkBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//bean的设置</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AWork</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BWork</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Processbean</span> processbean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Processbean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//processbean的设置</span>        list<span class="token punctuation">.</span><span class="token function">actionWork</span><span class="token punctuation">(</span>processbean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，一个遵从开闭原则的代码就写好了</p><p>当我们<strong>要添加新功能时候</strong>，我们只需更改以下几点</p><ol><li>添加 <code>bean 类</code> 属性</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkBean</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">C</span> c<span class="token punctuation">;</span><span class="token comment">//修改</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Processbean</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processB<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processC<span class="token punctuation">;</span><span class="token comment">//修改</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>继承新的 <code>work</code> 子类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">puvlic <span class="token keyword">class</span> <span class="token class-name">CWork</span> <span class="token keyword">extends</span> <span class="token class-name">BaseWork</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">CWork</span><span class="token punctuation">(</span><span class="token class-name">WorkBean</span> workBean<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Processbean</span> processbean<span class="token punctuation">)</span><span class="token punctuation">{</span>        workBean<span class="token punctuation">.</span><span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">actionC</span><span class="token punctuation">(</span>processbean<span class="token punctuation">.</span>getProcessC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>代码执行处直接添加</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HappyNationalDay</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ActionList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WorkBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AWork</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BWork</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CWork</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改</span>        <span class="token class-name">Processbean</span> processbean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Processbean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        list<span class="token punctuation">.</span><span class="token function">actionWork</span><span class="token punctuation">(</span>processbean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="辩证认清开闭原则"><a href="#辩证认清开闭原则" class="headerlink" title="辩证认清开闭原则"></a>辩证认清开闭原则</h2><p>如上文，我们学习了如何写出具有开闭原则的代码。事实上，我们利用接口，多态等特性，写出 <strong>对拓展开发，对修改关闭</strong> 的代码都是具有开闭原则的代码。</p><p>但是我们从上文的例子也可以看出，我们所说的 <strong>对修改关闭</strong> 指的<strong>并非不允许修改，而是不修改核心代码</strong>，修改不会造成其他位置出现问题。这些代码就是优质的 <strong>可拓展</strong> 的代码。</p><p>并且，我们可以看到，为了写出这类易于拓展，符合开闭原则的代码，我们是降低了其可读性，且花费了些思考和时间成本才写出来的。所以，如果确定代码无需拓展，便不应该使用开闭原则，免得画蛇添足。</p><p>实事求是，适合需求的代码，就是优质好代码。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/2828775">开闭原则_百度百科 (baidu.com)</a></p><p><a href="https://time.geekbang.org/column/article/176075">16 | 理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？ (geekbang.org)</a></p><h2 id="附代码-不发布"><a href="#附代码-不发布" class="headerlink" title="附代码(不发布)"></a>附代码(不发布)</h2><p>开闭原则：<strong>基于拓展打开，基于修改关闭</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//原代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alert</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">AlertRule</span> rule<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Notification</span> notification<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Alert</span><span class="token punctuation">(</span><span class="token class-name">AlertRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Notification</span> notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rule <span class="token operator">=</span> rule<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>notification <span class="token operator">=</span> notification<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> api<span class="token punctuation">,</span> <span class="token keyword">long</span> requestCount<span class="token punctuation">,</span> <span class="token keyword">long</span> errorCount<span class="token punctuation">,</span> <span class="token keyword">long</span> durationOfSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> tps <span class="token operator">=</span> requestCount <span class="token operator">/</span> durationOfSeconds<span class="token punctuation">;</span>      <span class="token comment">//功能1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tps <span class="token operator">&gt;</span> rule<span class="token punctuation">.</span><span class="token function">getMatchedRule</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxTps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      notification<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">NotificationEmergencyLevel</span><span class="token punctuation">.</span>URGENCY<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment">//功能2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCount <span class="token operator">&gt;</span> rule<span class="token punctuation">.</span><span class="token function">getMatchedRule</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxErrorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      notification<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">NotificationEmergencyLevel</span><span class="token punctuation">.</span>SEVERE<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//做出拓展</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alert</span> <span class="token punctuation">{</span>  <span class="token comment">// ...省略AlertRule/Notification属性和构造函数...</span>    <span class="token comment">// 改动一：添加参数timeoutCount</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> api<span class="token punctuation">,</span> <span class="token keyword">long</span> requestCount<span class="token punctuation">,</span> <span class="token keyword">long</span> errorCount<span class="token punctuation">,</span> <span class="token keyword">long</span> timeoutCount<span class="token punctuation">,</span> <span class="token keyword">long</span> durationOfSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> tps <span class="token operator">=</span> requestCount <span class="token operator">/</span> durationOfSeconds<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tps <span class="token operator">&gt;</span> rule<span class="token punctuation">.</span><span class="token function">getMatchedRule</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxTps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      notification<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">NotificationEmergencyLevel</span><span class="token punctuation">.</span>URGENCY<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCount <span class="token operator">&gt;</span> rule<span class="token punctuation">.</span><span class="token function">getMatchedRule</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxErrorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      notification<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">NotificationEmergencyLevel</span><span class="token punctuation">.</span>SEVERE<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 改动二：添加接口超时处理逻辑</span>    <span class="token keyword">long</span> timeoutTps <span class="token operator">=</span> timeoutCount <span class="token operator">/</span> durationOfSeconds<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutTps <span class="token operator">&gt;</span> rule<span class="token punctuation">.</span><span class="token function">getMatchedRule</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxTimeoutTps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      notification<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">NotificationEmergencyLevel</span><span class="token punctuation">.</span>URGENCY<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述不符合开闭原则，因为直接修改了核心代码，会导致原有的调用函数出错，需要修改。单例测试代码也不能正确运行</p><p>如何写出符合 <strong>开闭原则</strong> 的代码？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alert</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlertHandler</span><span class="token punctuation">&gt;</span></span> alertHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAlertHandler</span><span class="token punctuation">(</span><span class="token class-name">AlertHandler</span> alertHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>alertHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>alertHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ApiStatInfo</span> apiStatInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AlertHandler</span> handler <span class="token operator">:</span> alertHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      handler<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>apiStatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//第一部分是将 check() 函数的多个入参封装成 ApiStatInfo 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiStatInfo</span> <span class="token punctuation">{</span><span class="token comment">//省略constructor/getter/setter方法</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> api<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> requestCount<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> errorCount<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> durationOfSeconds<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//第二部分是引入 handler 的概念，将 if 判断逻辑分散在各个 handler 中</span><span class="token comment">//提取抽象父类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AlertHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token class-name">AlertRule</span> rule<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">Notification</span> notification<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">AlertHandler</span><span class="token punctuation">(</span><span class="token class-name">AlertRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Notification</span> notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rule <span class="token operator">=</span> rule<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>notification <span class="token operator">=</span> notification<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ApiStatInfo</span> apiStatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//子类单一职责的负责对于的判断逻辑 1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TpsAlertHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AlertHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">TpsAlertHandler</span><span class="token punctuation">(</span><span class="token class-name">AlertRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Notification</span> notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ApiStatInfo</span> apiStatInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> tps <span class="token operator">=</span> apiStatInfo<span class="token punctuation">.</span><span class="token function">getRequestCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span> apiStatInfo<span class="token punctuation">.</span><span class="token function">getDurationOfSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tps <span class="token operator">&gt;</span> rule<span class="token punctuation">.</span><span class="token function">getMatchedRule</span><span class="token punctuation">(</span>apiStatInfo<span class="token punctuation">.</span><span class="token function">getApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxTps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      notification<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">NotificationEmergencyLevel</span><span class="token punctuation">.</span>URGENCY<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//子类单一职责的负责对于的判断逻辑 2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorAlertHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AlertHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">ErrorAlertHandler</span><span class="token punctuation">(</span><span class="token class-name">AlertRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Notification</span> notification<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">ApiStatInfo</span> apiStatInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>apiStatInfo<span class="token punctuation">.</span><span class="token function">getErrorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> rule<span class="token punctuation">.</span><span class="token function">getMatchedRule</span><span class="token punctuation">(</span>apiStatInfo<span class="token punctuation">.</span><span class="token function">getApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxErrorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      notification<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">NotificationEmergencyLevel</span><span class="token punctuation">.</span>SEVERE<span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//调用代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">AlertRule</span> alertRule<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Notification</span> notification<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Alert</span> alert<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initializeBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    alertRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertRule</span><span class="token punctuation">(</span><span class="token comment">/*.省略参数.*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//省略一些初始化代码</span>    notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token comment">/*.省略参数.*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//省略一些初始化代码</span>    alert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alert<span class="token punctuation">.</span><span class="token function">addAlertHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TpsAlertHandler</span><span class="token punctuation">(</span>alertRule<span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alert<span class="token punctuation">.</span><span class="token function">addAlertHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorAlertHandler</span><span class="token punctuation">(</span>alertRule<span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Alert</span> <span class="token function">getAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> alert<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">// 饿汉式单例</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationContext</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initializeBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ApiStatInfo</span> apiStatInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiStatInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...省略设置apiStatInfo数据值的代码</span>    <span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>apiStatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们修改时候就很方便了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alert</span> <span class="token punctuation">{</span> <span class="token comment">// 代码未改动... }</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiStatInfo</span> <span class="token punctuation">{</span><span class="token comment">//省略constructor/getter/setter方法</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> api<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> requestCount<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> errorCount<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> durationOfSeconds<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> timeoutCount<span class="token punctuation">;</span> <span class="token comment">// 改动一：添加新字段</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AlertHandler</span> <span class="token punctuation">{</span> <span class="token comment">//代码未改动... }</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TpsAlertHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AlertHandler</span> <span class="token punctuation">{</span><span class="token comment">//代码未改动...}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorAlertHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AlertHandler</span> <span class="token punctuation">{</span><span class="token comment">//代码未改动...}</span><span class="token comment">// 改动二：添加新的handler</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeoutAlertHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AlertHandler</span> <span class="token punctuation">{</span><span class="token comment">//省略代码...}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">AlertRule</span> alertRule<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Notification</span> notification<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Alert</span> alert<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initializeBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    alertRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertRule</span><span class="token punctuation">(</span><span class="token comment">/*.省略参数.*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//省略一些初始化代码</span>    notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token comment">/*.省略参数.*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//省略一些初始化代码</span>    alert <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alert<span class="token punctuation">.</span><span class="token function">addAlertHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TpsAlertHandler</span><span class="token punctuation">(</span>alertRule<span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alert<span class="token punctuation">.</span><span class="token function">addAlertHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorAlertHandler</span><span class="token punctuation">(</span>alertRule<span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 改动三：注册handler</span>    alert<span class="token punctuation">.</span><span class="token function">addAlertHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeoutAlertHandler</span><span class="token punctuation">(</span>alertRule<span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//...省略其他未改动代码...</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ApiStatInfo</span> apiStatInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiStatInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...省略apiStatInfo的set字段代码</span>    apiStatInfo<span class="token punctuation">.</span><span class="token function">setTimeoutCount</span><span class="token punctuation">(</span><span class="token number">289</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改动四：设置tiemoutCount值</span>    <span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>apiStatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法|前缀和解法</title>
      <link href="/2022/05/02/suan-fa-qian-zhui-he-jie-fa/"/>
      <url>/2022/05/02/suan-fa-qian-zhui-he-jie-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>前置知识</strong>：</p><ul><li>基本数据结构知识(数组)</li><li>Java中HashMap容器基本了解</li></ul><p><strong>文章目的</strong>：</p><p>文章为笔记记录和一些思考，是对应 <code>labuladong</code> 的刷题秘籍记录，下边贴出 <code>labuladong</code> 官方链接</p><p><a href="https://labuladong.github.io/algo/">labuladong 的算法小抄 :: labuladong的算法小抄</a></p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>顾名思义，前缀和的意思就是一段数字中，某一个数字前面一段数字的和。在数组中解释的意思就是，数组索引前面的数据和。我们常用一个新数组（索引错位值为1）来记录数组的前缀和，以此辅助我们更好的<strong>解决数组中某一段数据和的问题</strong>。下图中 <code>nums</code> 为数组， <code>preSum</code> 为前缀和。</p><ul><li><p>计算前缀和的原始思路：$sumRange(i,j)=\sum_{k=i}^{j}nums[k]$</p></li><li><p>升级后前缀和的计算思路为：$sumRange(i,j)=\sum_{k=0}^{j}nums[k]-\sum_{k=0}^{i-1}nums[k]$</p></li><li><p>用数组 $sums$ 记录对应 $nums$ 索引的前缀和，$sum$ 的长度为 $n+1$ （<strong>方便计算，无需对 $i=0$ 做特殊处理</strong>），其满足 $sums[i+1] = sums[i]+nums[i]$ ，</p><p>即$sums[i+1]$ 表示 $\sum_{n=0}^{i}nums[n]$ 。那么有 $sumRange(i,j)=sums[j+1]-sum[i]$ </p></li></ul><p><img src="https://labuladong.github.io/algo/images/%e5%b7%ae%e5%88%86%e6%95%b0%e7%bb%84/1.jpeg"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="区域和检索-数组不可变-力扣（LeetCode）"><a href="#区域和检索-数组不可变-力扣（LeetCode）" class="headerlink" title="区域和检索 - 数组不可变 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">区域和检索 - 数组不可变 - 力扣（LeetCode）</a></h3><blockquote><p>题目大意：</p><p>计算数组 <code>nums</code> 中 $nums[left]$ 到 $nums[right]$ 的元素和，</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//标准前缀和思路，直接使用前缀和即可解题</span><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">{</span><span class="token comment">//全局初始化前缀和</span>    <span class="token keyword">int</span> preNum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//      在构造函数中就建立好前缀和数组，让 sumRange 被多次调用时候减少运算</span>        preNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> preNum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preNum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> preNum<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维区域和检索-矩阵不可变-力扣（LeetCode）"><a href="#二维区域和检索-矩阵不可变-力扣（LeetCode）" class="headerlink" title=" 二维区域和检索 - 矩阵不可变 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/"> 二维区域和检索 - 矩阵不可变 - 力扣（LeetCode）</a></h3><blockquote><p>题目大意：</p><p>在一个二维矩阵 <code>matrix</code> 里面，任意选两个点，计算这两点所形成的子矩阵的元素总和</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span><span class="token comment">//全局初始化前缀和邻接数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preNum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        preNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//  二维前缀和  </span>                preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> preNum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//   由二维前缀利用四则运算得出子矩阵元素和</span>        <span class="token keyword">return</span> preNum<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">+</span> preNum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/02/AB4kGgXj3Jf9VaP.png"></p><center>二维前缀和<p><img src="https://s2.loli.net/2022/05/02/8W94kXYfcIvt6sy.png"></p><center>由二维前缀利用四则运算得出子矩阵元素和<h3 id="和为-K-的子数组-力扣（LeetCode）"><a href="#和为-K-的子数组-力扣（LeetCode）" class="headerlink" title="和为 K 的子数组 - 力扣（LeetCode） "></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/">和为 K 的子数组 - 力扣（LeetCode） </a></h3><blockquote><p>题目：</p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回 <em>该数组中和为 <code>k</code> 的子数组的个数</em> 。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//直接使用前缀和+双重遍历枚举的解法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> preNum<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preNum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//双重遍历，计算出满足的数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">==</span> k<span class="token punctuation">)</span> result<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/02/14nbsOETzBpo5tN.png"></p><blockquote><p> 由此提交记录可知该算法的执行用时比较大，我们可以再次优化该算法</p></blockquote><h4 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h4><p>该算式 $preNum[i] - preNum[j]  = k$ 为判断是否符合条件的核心式子，对该式子进行简单的变换 $preNum[i] - k  = preNum[j]$。利用该式子和哈希表，使用一轮遍历将前缀和以及满足 <code>k</code> 的 <code>result</code>记录下来，继而达到优化的目的。</p><p><img src="https://s2.loli.net/2022/05/02/4BrlXPt6aHLCYGx.png"></p><blockquote><p><code>HashMap</code> 中的 <code>key</code> 记录的是前缀和，<code>value</code> 记录的是该 <code>key</code> 出现的次数。在每一轮遍历检测中，当容器中的 <code>key</code> 存在等于式子 $preNum[i] - k  = preNum[j]$ 中的 <code>preNum[j]</code> 的情况时，则让 <code>result</code> 累加该 <code>key</code> 的 <code>value</code> 。</p><p>遍历完整个数组后，所有符合条件的 <code>key</code> 都被找出并累加到 <code>result</code> 中</p><p>其中，当 $key=0$ 时，设置 $value=1$ 是由于当该前缀和被创建时候，未添加值的时候，前缀和就是 0 。这样子也才能保证第一次得出 $key=0$ 时，其对应值 <code>value</code> 为 1。  </p><p>注：<code>HashMap</code> 不会允许多个相同的 <code>key</code> 值存在，因此，上例中只有一个 $key=8$ 存在，只是 <code>value</code> 不断在被更改，图像这样子画出来只是为了方便理解</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> preNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preNum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里不可缺，相当于添加了个队头(前缀和为0)，这是只要有队就存在的</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s_i <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> s_j <span class="token operator">=</span> s_i <span class="token operator">-</span> k<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>preNum<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s_j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//累加对应 key 中的 value</span>                result <span class="token operator">+=</span> preNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s_j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//记录 key 出现的次数</span>            preNum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s_i<span class="token punctuation">,</span>preNum<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>s_i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/02/sZavku5jmHMq8t7.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/">和为K的子数组 - 和为 K 的子数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/solution/qu-yu-he-jian-suo-shu-zu-bu-ke-bian-by-l-px41/">区域和检索 - 数组不可变 - 区域和检索 - 数组不可变 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://labuladong.github.io/algo/">labuladong 的算法小抄 :: labuladong的算法小抄</a></p><blockquote><p>末尾小记：</p><p><img src="https://pic.lxtlovely.top//blog/1651480162530.png"></p><p><img src="https://pic.lxtlovely.top//blog/1651480130310.png"></p><center>英语听力学习<p><img src="https://pic.lxtlovely.top//blog/alleip439.png"></p><p><img src="https://pic.lxtlovely.top//blog/alleip440.png"></p><p><img src="https://pic.lxtlovely.top//blog/alleip441.png"></p><center>句子学习</center></center></blockquote></center></center>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次hexo博客部署的问题</title>
      <link href="/2022/04/10/ji-yi-ci-hexo-bo-ke-bu-shu-de-wen-ti/"/>
      <url>/2022/04/10/ji-yi-ci-hexo-bo-ke-bu-shu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="前置条件："><a href="#前置条件：" class="headerlink" title="前置条件："></a>前置条件：</h2><ol><li>一台云服务器（已占用 127.0.0.1:3000 端口部署了网易云后端，并且反向代理到了服务器的 3000 端口）</li><li>在 GitHub 上面已经部署了 hexo 博客</li></ol><h2 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h2><blockquote><p>本地博客仓库和GitHub以及服务器仓库的连接</p></blockquote><p><a href="https://blog.meta-code.top/2021/11/20/2021-41/">【Hexo博客】部署到腾讯云轻量应用服务器（使用宝塔面板） | 百里飞洋 (meta-code.top)</a></p><ul><li><strong>遇到的 bug：</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none"># 在本地电脑 Bash 窗口ssh -v git@SERVER# 注意！别直接复制SERVER这个单词！@后面替换成服务器IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这一步，发现无法使用密钥连接到服务器</p><ul><li><p>解决：</p><p>本地的git连接Github配置了代理，把代理软件关闭就可以连接了</p></li></ul></blockquote><blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment（部署）</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@你的服务器IP地址<span class="token punctuation">:</span>/home/git/repos/hexoBlog.git <span class="token comment">#服务器仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步中，由于，我有多个仓库，查阅hexo文档后，将此处配置成这样子</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment（部署）</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span> <span class="token key atrule">-type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//xxxxx.git <span class="token comment">#GitHub仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token key atrule">deploy</span><span class="token punctuation">:</span> <span class="token key atrule">-type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@你的服务器IP地址<span class="token punctuation">:</span>/home/git/repos/hexoBlog.git <span class="token comment">#服务器仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是问题来了，我的GitHub是需要代理的，服务器的就不需要。</p><p>在不使用代理的时候，有一个github登录框弹出，直接点密码登录，就可以直接上传了，但是GitHub仓库的上传不成功</p><p>后改为使用代理上传，就上传成功了</p></blockquote><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>一般来说，资源文件上传好了，直接在宝塔的网站处点击部署，引到文件夹就可以了，但是我的老是不成功。</p><p><strong>解决历程</strong></p><ol><li>查阅博客后，猜测是 Nginx 的问题，尝试在宝塔重启 Nginx ，发现重启失败，报端口占用的错误（3000）端口</li><li>尝试kill掉占用3000端口的进程，是node占用，无法杀掉。是PM2管理器一直开启占用3000端口</li><li>多次尝试之后解决顺序是：在网站处<strong>删除</strong>（一定要删除）网易云后端的网站项目 -&gt; 重启 Nginx -&gt; 重新映射网易云后端的项目</li><li>再次查看是否能访问博客，发现还是不行。尝试重新解析域名，发现就可以了，腾讯云的解析也有些bug。</li></ol><p><strong>问题本质</strong>：</p><p>​    Nginx 无法正常运行</p><h2 id="Nginx更改"><a href="#Nginx更改" class="headerlink" title="Nginx更改"></a>Nginx更改</h2><p>部署后更改同端口的域名，nginx无法立即修改，需要重启nginx才可以完成修改，本地浏览器也需要刷新看到效果。发现添加域名后无法立即显示，重启nginx就可以解决。</p>]]></content>
      
      
      <categories>
          
          <category> 乱搞服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>干货|进入工作室所需的储备</title>
      <link href="/2022/02/10/gan-huo-jin-ru-gong-zuo-shi-suo-xu-de-chu-bei/"/>
      <url>/2022/02/10/gan-huo-jin-ru-gong-zuo-shi-suo-xu-de-chu-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="干货-进入工作室所需的储备"><a href="#干货-进入工作室所需的储备" class="headerlink" title="干货|进入工作室所需的储备"></a>干货|进入工作室所需的储备</h1><p>新的学期即将开始，计算机学院各大工作室也陆续会在本学期开始招新。但是想要加入工作室，我们需要一定的知识储备，并顺利通过所有的考核。此刻的你也许还很迷茫，对工作室的各大方向和和该如何学习都还不够了解。</p><p>为此，我邀请了数智工作室各方向的负责人共同完成这篇推文，下面将以数智工作室的五大方向为例，给大家说明各方向是做什么的和针对初学者做一个学习推荐。</p><hr><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a><u>UI</u></h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>UI即用户界面设计，也称人机界面。最普遍的应用是在软件开发中，指程序的用户操作界面设计。UI在网站界面、软件界面、手机应用界面等多图形用户界面的设计都属于UI设计。学习UI将需要熟练使用<code>PS</code>，<code>AI</code>等设计软件，同时也需要学习动效建模和用户心理学，UI是和用户最直接接触的环节，优秀的UI能最大程度提高用户体验，最大化实现功能的应用。</p><h3 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h3><p>UI其实早已出现在我们生活的方方面面，当我们刷着手机，看着电视，在互联网上的时时刻刻我们都接触UI作品，小到开机界面大到软件流程，优秀的作品甚至能产生品牌效应，通过优秀的设计实现培养强大的用户粘度，最有名的就是苹果的设计，通过精益求精<strong>less is more</strong>的前期设计，引领一波设计风潮。那，如果要入门UI设计，该从哪里开始呢？</p><ul><li><p><strong>一、入门准备</strong></p><p>你是否热衷于各种好玩新奇的产品呢？</p><p>你是否平时喜欢使用各种各样的产品并研究它是否好用呢？</p><p>你是否更容易发现使用中的各种问题，并积极想办法解决它呢？</p><p>你是否充满各种灵感和创意？</p><p>你是否喜欢思考问题，清晰的罗列各种解决方案，并寻找其中的逻辑关系而乐此不疲呢？</p><p>在绘制草图的时候，你是否有一种莫名的兴奋感呢？</p><p>你喜欢跟人沟通和交流、展示你的想法和创意吗？</p><p>如果问题答案大部分是肯定的，那恭喜你！这说明你很适合接触设计类工作，接下来可以进行基本了解，多多观察手机内app页面设计和跳转逻辑，可以开始下一步了解啦。</p></li><li><p><strong>二、软件了解</strong></p><p>UI设计需要熟练掌握基础软件<code>PSAIAE</code>以及专业UI设计软件<code>sketch</code>/<code>figma</code>等。入门可以在B站观看相关视频学习，建议应当了解先着重弄懂每个软件基本功能并熟练使用，再学习较为复杂的效果制作，这样不仅能锻炼好基本功，也更方便在做效果时能更快理解更快掌握，最终实现举一反三的操作。这里推荐<strong>GenJi</strong>是真想教会你的一系列视频进行软件的入门。</p><p>（小建议：软件下载尽量下载较新的版本，此时练习作品也最好建立分类法来归类，方便以后查询）</p></li><li><p><strong>三、设计了解，学习设计</strong></p><p>这个有内容就有点多了，因为是养成思维的必经之路。</p><p>比如配色、排版、字体设计三大构成，消费心理学、沟通学，以及思维导图、原型图，还有交互逻辑、规范、切图、了解程序、互联网思维、用户体验，还有一些网络营销都是需要学习的，因为这和产品商业价值有关。当然这些都是后期进阶了，总而言之，多看优秀作品，提高设计审美，到这一步就可以开始尝试创作自己的作品啦!</p><p><a href="http://hao.shejidaren.com/book.html">设计书籍推荐 - 100本改变设计命运的书籍 (shejidaren.com)</a></p></li></ul><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a><u>深度学习</u></h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>数智深度学习组主要以<code>NLP</code>（自然语言处理）作为总体研究方向，使用知识图谱技术；团队内本科生与研究生可共同学习、讨论，已有本科师兄发表学术论文，参加数学建模比赛取得奖项。该方向更注重当前学术界先进的知识理论，掌握部分基础之后，主要以通过论文的阅读来进行知识补充，如果需要，则会与开发方向的伙伴们进行合作开发。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><p><strong>部分理论知识：</strong><code>概率论，线性代数</code>，<code>深度学习基础</code></p><ul><li>说到底是矩阵的操作，这类知识是逃不掉的。</li><li>前者可以需要这类知识的时候进行补充，后者可看B站<strong>吴恩达深度学习</strong>进行了解。</li></ul></li><li><p><strong>编程语言基础：</strong> <code>python</code></p></li><li><p><strong>部分第三方库</strong>：</p><p>​        无论是深度学习还是其他相关方向，数据的获取和处理都是十分重要的，有时候世界上现存的数据集或者词库可以满足需求，而有时候更需要自己获取清洗再生成。从这个方向来看，便需要大家掌握以下内容：</p><ul><li><p><strong>数据处理：</strong><code>numpy</code>、<code>pandas</code>、<code>re</code> 库…等等</p></li><li><p><strong>爬虫：</strong>请求库 <code>request\selenium</code>;  解析库<code>beautifulsoup\lxml</code></p></li><li><p><strong>机器学习：</strong><code>scikit-learn</code> (熟悉部分经典机器学习算法，掌握查询官方文档会使用即可</p></li></ul></li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li><strong>深度学习使用框架：</strong><code>tensorflow2.0</code>以上的库，主要使用其中的<code>keras</code>进行编程，实现所需的神经网络。</li></ul><h3 id="重要能力"><a href="#重要能力" class="headerlink" title="重要能力"></a>重要能力</h3><ul><li><strong>看论文以及复现论文模型的能力</strong></li></ul><p>※<strong>以上内容大部分都可在B站学习，科研道路很长、需要沉得下心，才能有所收获！</strong></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a><u>前端</u></h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>前端技术已将深入到人们生活的方方面面之中，在目前互联网时代，只要公司有需要开发互联网产品，包括网站，网页，H5，小程序，APP等等，就需要前端开发工程师岗位，具体的就业方向还可以按公司的技术需求来区分，侧重点各有不同，就业行业随着互联网的发展，已经变得越来越广泛了。</p><p>只要你想做，前端几乎无所不能，<code>JavaScript</code>作为前端的主要编程语言，既可以与UI框架（例如：<code>Vue</code>、<code>React</code>、<code>Angular</code>）结合做业务，、又可以和游戏引擎（例如：<code>Cocos2D-X</code>、白鹭引擎）结合制作HTML5游戏、还可以结合<code>Node.js</code>写后台，甚至还可以结合<code>Three.js</code>创建3D场景。</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>学习路线：<code>HTML</code>  =&gt;  <code>CSS</code>  =&gt;  <code>JavaScript</code> </p><p>我们建议先从三剑客（<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>）学起，万丈高楼平地起，坚实的基础能帮助我们在接下来的学习技术之路上走得更稳健。</p><p>学习前端，与专业无关、任何热爱技术的人都可以学习，请不要给自己设限。前端的入门门槛并不高，你甚至可以没有编程基础，三剑客的基础知识可以先通过观看视频来学习，b站中任意播放量高的零基础入门前端视频都行。由于前端技术发展很快，视频的内容很有可能已经有些过时了，这时候就可以到<code>MDN</code>、或<code>W3Cschool</code>查看最新标准。三剑客中最重要的就是<code>JavaScript</code>，单看视频只能学会基础用法，想要深入学习就必须要看权威的书籍，如《JavaScript高级程序设计（第四版）》或《JavaScript权威指南（第七版）》，其中前一本现在在网络上已经有电子版可以下载阅读。目前网上已经有很多开放的api接口，如果觉得自己三剑客已经学得不错的时候，可以继续学习<code>Ajax</code>，然后利用开放的api接口以及原生的三剑客制作一个属于自己的完整的应用程序，体验前后端交互以及独立完成一个项目的感觉，至此，就算是正式入门前端了。</p><h3 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h3><p>继续深入前端就必然避不开<code>TypeScript</code>，作为<code>JavaScript</code>的超集，ts在开发应用级程序上有着无可比拟的优点，学习ts可以直接去看ts的官方文档。</p><p>如果你在之前的前端入门阶段都一直在使用原生的三剑客来编写代码，那么学习到这个阶段，你就可以开始去接触三大UI框架（<code>Vue</code>、<code>React</code>、<code>Angular</code>），使用框架能够让我们的开发速度大幅提升，同时使用框架构建项目还可以使文档结构会更加清晰。学习框架可以先通过看视频入门，但是深入了解还是要回归官方文档。</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a><u>后端</u></h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>什么是后端？</p><p>我们访问网站时，除了一打开就映入眼帘的各色界面，还有隐藏在其中的各种数据，而后端就负责对这些数据进行一系列管理与操作。</p><p>后端需要学习什么？</p><h3 id="后端入门"><a href="#后端入门" class="headerlink" title="后端入门"></a><strong>后端入门</strong></h3><p>不积跬步，无以至千里；不积小流，无以成江海。在了解和上手<strong>Web开发后端</strong>之前，需要先掌握最基础的开发能力。</p><ul><li>首先，当然是掌握最基础的一门语言。在WEB开发中，<code>Java</code>是后端最常用的语言之一，掌握好Java也是最基础的一个环节。</li></ul><ol><li>除了掌握好基础语法，还需要了解几大模块，异常处理、IO流、线程、集合、封装、周期、反射等等。</li><li>掌握好Java语言的设计思想，弄懂设计思路，你会发现阅读代码、理解模块以及设计程序的能力大大提升。</li></ol><ul><li>其次，学习完<code>JavaSE</code>后，我们可以逐渐过渡到学习<code>JavaEE</code>。 </li></ul><ol><li><code>JavaEE</code>是一套使用Java进行企业级Web应用开发的大家一致遵循的工业标准。</li><li>掌握好<code>JavaEE</code>的13种核心技术规范，你就会拥有最基础的Web开发能力。</li></ol><ul><li>学习<code>JavaEE</code>整个体系，你将会了解和掌握后端事务的业务流程、数据库、<code>Servlet</code>、<code>JSP</code>等等在开发过程中起着重要作用的技术应用。</li><li>学习<code>Git</code>，了解<code>Git</code>仓库原理，掌握<code>Git</code>使用技巧，学会使用<code>Git</code>管理代码。</li><li>在这里，推荐学习Web开发前，先掌握最基础的Web知识，了解<code>HTTP</code>工作原理。（这里推荐《图解HTTP》这本书，对刚入门者非常友好易懂）</li><li>最后，为了对整体Web开发有一个完整的理解以及展现出我们后端的数据，除了学习后端的知识，我们还需要掌握一些前端知识（<code>HTML</code>、<code>CSS</code>、<code>JS</code>）。</li><li>成果：通过处理好后端数据以及接口，结合前端页面，我们就可以成功搭建我们的Web网站啦，成就感满满。</li></ul><h3 id="后端进阶"><a href="#后端进阶" class="headerlink" title="后端进阶"></a><strong>后端进阶</strong></h3><ul><li><p>通过入门阶段的学习，我们已经有一定的能力可以搭建自己的网站了，但是，后端远远不止于此。</p></li><li><p><code>maven</code>学习</p></li><li><p>在这一阶段，我们更注重开发效率以及模块封装性和性能。我们需要掌握<code>SSM</code>框架，也就是<code>Spring+</code>、<code>pringMVC</code>、<code>MyBatis</code>集合框架。</p></li><li><p>学习<code>Spring</code>时，我们要掌握<code>Spring</code>的核心思想，<code>IOC</code>控制反转，了解<code>bean</code>工厂的强大作用。</p></li><li><p>学习<code>SpringMVC</code>将有助于我们了解整个请求在框架中的执行过程，对拦截有更深刻的了解。</p></li><li><p>学习<code>mybatis</code>，我们对数据库底层的操作将变得更加简便透明，体验自定义<code>SQL</code>以及高级映射的简便性。</p></li></ul><h3 id="升华阶段"><a href="#升华阶段" class="headerlink" title="升华阶段"></a><strong>升华阶段</strong></h3><ul><li>在掌握好了<code>SSM</code>框架后，为了让开发更加简便，我们需要简化<code>Spring</code>繁琐的各种配置依赖，学习<code>SpringBoot</code>框架。</li><li><code>SpringBoot</code>框架是目前最常用的开发框架，掌握好他，是成为一个后端开发者的必经之路。</li><li>掌握<code>linux</code>基础知识，学会配置服务器，部署项目等等知识。</li><li><code>redis</code>等其他类型数据库</li><li>除了了解更多包和工具，掌握核心基础，作为后端开发者，我们还要与时俱进，学习了解一些优秀的中间件，微服务以及分布式开发等等。</li><li>对<code>ssm</code>框架源码深入理解</li></ul><h3 id="一入后端深似海，从此红尘是路人"><a href="#一入后端深似海，从此红尘是路人" class="headerlink" title="一入后端深似海，从此红尘是路人"></a><strong>一入后端深似海，从此红尘是路人</strong></h3><p>前期准备：</p><ul><li>下载开发工具<code>IDEA</code>、配置好JDK和环境（常用JDK1.8版本）</li><li>找到适合自己的学习方法（推荐书籍配合视频进行学习）</li><li>一颗热爱学习后端，不断进取的心。</li></ul><p><strong>学习资源推荐：</strong></p><p><a href="https://img-blog.csdnimg.cn/20200524092940998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiY19sbWw=,size_16,color_FFFFFF,t_70#pic_center">后端路线图</a></p><p><a href="https://blog.csdn.net/wangshuaiwsws95/article/details/106049247?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164451026616780357296280%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164451026616780357296280&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-106049247.pc_search_result_cache&amp;utm_term=%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%BA%BF&amp;spm=1018.2226.3001.4187">学习路线</a></p><p>黑马<code>JavaSE</code>、<code>JavaEE</code>等系列视频</p><p>书籍：《Java核心基础》、《图解HTTP》、《HTTP权威指南》、《深入理解java虚拟机》</p><h2 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a><u>安卓</u></h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p><strong>Android</strong>作为全球第一大的智能手机操作系统，拥有着手机操作系统中最活跃的用户群体和开发者。在当下这个人们重度依赖手机的时代，学习掌握安卓开发技术，一定能为你创造格外的价值。</p><p><strong>Android</strong>软件的开发包括原生开发和跨平台多端开发，其多样的开发方式能让我们能学到多种开发技术和创造出更多的可能。学习好<strong>Android</strong>开发，用技术创造艺术。</p><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>作为安卓开发者，我们的开发基础就是掌握如何使用<code>Java</code>语言进行<strong>Android</strong>原生开发。这时，有的小伙伴要问了，谷歌官方现在不是不推荐使用<code>Java</code>，转而推荐使用<code>Kotlin</code>开发了么？为什么我们不直接学习<code>Kotlin</code>呢。首先，让我们来看一下菜鸟教程中对<code>Kotlin</code>的定义。<strong>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的Swift，由 JetBrains 设计开发并开源。</strong><code>Kotlin</code>语言依旧是运行在Java虚拟机上面的；并且在很多的开源项目中，依旧使用的是<code>Java</code>，所以我们现在依旧要以<code>Java</code>为学习基础。</p><p>对于<code>Java</code>学习，我推荐先学会一些基本的Java语言特性及其基本使用再去学习<strong>Android</strong>开发，如果大家着急上手<strong>Android</strong>，可以到B站看18年尚学堂的教学视频学习，我们需要学习完多线程即可。下面是视频的链接</p><p><a href="https://www.bilibili.com/video/BV1st411v7Uo">（最新）尚学堂 JAVA300集附源码高清版_哔哩哔哩_bilibili</a></p><p>再接下来，我们需要一本好的<strong>Android</strong>入门书籍或者是学习视频，作如下的推荐</p><p>书籍：<strong>《第一行代码》第二版 ——郭霖</strong></p><p>学习视频：<a href="https://space.bilibili.com/44272436/channel/seriesdetail?sid=1272606">程序猿拉大锯的个人空间_哔哩哔哩_bilibili</a></p><h3 id="能力提升"><a href="#能力提升" class="headerlink" title="能力提升"></a>能力提升</h3><p>在掌握<strong>Android</strong>基础之后，我们除了实战去复现一些APP，还需要对这项技术进行深入了解；深入浅出，唯有深入，方能浅出。</p><p>我推荐大家边阅读<strong>《Android开发艺术探索》</strong>这本书，同时附上一份笔记博客：<a href="https://blog.csdn.net/willway_wang/category_9278890.html">《Android开发艺术探索》读书笔记_willwaywang6-CSDN博客</a></p><p>同时，我们不断去阅读官方的开发文档也是十分必要的，这个才是最一手的资料。英文阅读也许对我们来说有些困难，但我们不该让它成为我们变得更强的拦路虎</p><h3 id="更多的技能"><a href="#更多的技能" class="headerlink" title="更多的技能"></a>更多的技能</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>由于原生开发使用到的<code>Java</code>或是<code>Kotlin</code>都是运行在Java虚拟机上面的，我们是有必要去学习更多的<code>Java</code>知识的。如果你还是想看视频学习的话，我还是推荐尚学堂的视频，你可以继续看上面的旧版视频，也可以去B站搜索官方最新版的(使用IDEA开发的)。</p><p>相关书籍推荐：<strong>《Java核心技术卷》</strong>/<strong>《Java编程思想》</strong>，<strong>《深入理解Java虚拟机》</strong></p><h4 id="kotlin"><a href="#kotlin" class="headerlink" title="kotlin"></a>kotlin</h4><p>现在谷歌强力推荐<strong>Android</strong>开发者使用<code>Kotlin</code>进行开发，很多公司和从业者都已经转向使用<code>Kotlin</code>进行开发，并且几乎所有的<strong>Android</strong>大佬的博客代码都是使用<code>kotlin</code>；不仅如此，由于<code>Kotlin</code>与<code>Java</code>100%兼容，语法简介和更加高级等特性，使用<code>Kotlin</code>去开发<strong>Android</strong>软件在效率上是有极大提升的。作为<strong>Android</strong>开发者，我们很有必要去学习如何使用<code>Kotlin</code>开发软件。</p><p>这里推荐的入门书籍是：<strong>《第一行代码》第三版 ——郭霖</strong></p><h4 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h4><p><strong>Flutter</strong> 是 Google 推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 <code>Dart</code> 语言开发 App，一套代码同时运行在 iOS 和 Android平台(目前 <strong>Flutter</strong> 已经支持 iOS、Android、Web、Windows、macOS、Linux、Fuchsia)。Flutter的跨平台能力很强，因为它是以<strong>自绘UI+原生</strong>的方式来实现跨平台技术的，它利用自绘的引擎调用系统API绘制UI。而其他的跨平台技术，例如web APP，需要借助WebView渲染；或者<strong>React Native</strong>这种<strong>js+原生渲染</strong>的方式，其需要转化为原生控件；这些跨平台方案的性能都不如<strong>自绘UI+原生</strong>的方式要好。</p><p>使用<strong>Flutter</strong>开发软件，其优势不仅在于高性能的跨平台运行，其相对于原生开发有着更高的开发效率，<strong>Flutter</strong>的热重载能帮助我们更好的测试、构建UI、添加功能和修复错误。作为<strong>Android</strong>开发者，掌握<strong>Flutter</strong>无疑如虎添翼</p><p>学习<strong>Flutter</strong>推荐的书籍为：<strong>《Flutter实战.第二版》</strong>；同时，我们需要结合官方文档来学习，逐步复现出<strong>Flutter</strong>的官方示例APP——Gallery。下面给出<strong>Flutter中文网</strong>链接，该网站同时还包括《Flutter实战.第二版》电子版的入口和掘金的<strong>Flutter</strong>社区入口。</p><p><strong>Flutter中文网：</strong><a href="https://flutterchina.club/">Flutter中文网 (flutterchina.club)</a></p><p><strong>推荐的博客专栏：</strong><a href="https://blog.csdn.net/u010055819/category_9428149.html">Flutter相关_lifeidroid的专栏-CSDN博客</a></p><h4 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h4><p><strong>adb</strong>是什么，官方文档的解释是这样子的：<strong>Android</strong> 调试桥 (adb) 是一种功能多样的命令行工具，可让您与设备进行通信。<strong>adb</strong> 命令可用于执行各种设备操作（例如安装和调试应用），并提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。它是一种客户端-服务器程序。顾名思义，就是利用命令行连接设备和调试APP的工具，在开发过程中，我们很有必要去掌握它。网上很多教程教你怎么配置路径和使用电脑的命令行工具使用，其实最新版的<strong>Android studio</strong>中，只要安装配置好SDK，直接使用<strong>Android studio</strong>下栏的命令行工具<strong>Terminal</strong>就可以使用了，你可以直接输入<code>adb version</code>查看一下版本和路径。下附官方文档链接和常用命令博客链接。</p><p>官方文档：<a href="https://developer.android.com/studio/command-line/adb">Android 调试桥 (adb)  | Android 开发者  | Android Developers</a></p><p>博客：<a href="https://juejin.cn/post/7036000323990716423">聊一聊Android开发利器之adb - 掘金 (juejin.cn)</a></p><h3 id="一些回答"><a href="#一些回答" class="headerlink" title="一些回答"></a>一些回答</h3><ul><li><p><strong>劝退客户端？</strong></p><p>在你考虑客户端这一个学习方向的时候，相信会有很多劝退的言论。我来谈一谈我对这个方向的看法。</p><ol><li><strong>当下的客户端很难找工作么？</strong>其实不然，当下是客户端的初级开发者难找工作，但是<strong>市场中级和高级开发者的需求缺口是很大的</strong>。这其实是市场对人才的要求变得高了，不止于客户端，其他方向也是这样子的。</li><li><strong>客户端的学习很难？</strong>对比其他方向，客户端的入门学习的也许是稍微困难些。但我们要知道，每一个方向想要学好，都是不容易的，<strong>我们的目标不是要做一个入门的初级开发者</strong>。这并不应该成为左右我们选择的点。</li><li><strong>前端也可以写APP，客户端完全可以被替代？</strong>通过阅读上文，你也许了解到前端开发者可以有Web APP和React Native这两种开发跨平台APP的技术。先不说H5页面的Web APP使用起来的体验感有些糟糕，就连React Native这种<strong>js+原生渲染</strong>方式写出的APP，由于频繁与原生之间的通信，在渲染较多的页面会必不可免的会出现<strong>卡顿</strong>，且<code>js</code>带来的热更新也会<strong>降低APP的执行效率</strong>。所以，单纯使用前端技术写出来的跨端APP是有较多局限性的，<strong>客户端开发被替代是无稽之谈</strong>，熟悉原生开发的客户端开发者是必不可缺的。</li></ol></li><li><p><strong>加入工作室的付出和收获？</strong></p><ol><li>加入工作室你真正会付出的就是时间。那这个时间用来干什么呢？给老师打工？还是跟着师兄师姐学习？这些都会有，但不是每一个工作室这些的比例都一样，有些偏向于工作，有些偏向于学习。但有一点是相同的吗，那就是它们都会转变为你的收获。</li><li>你所收获的，就有很多了。包括一个学习技术和交流心得的环境和氛围、优秀师兄师姐经验传授、全流程的项目开发实战经验、寒暑假社会实践双创/志愿时长、来自大厂师兄的内推码以及一个成体系的团队协作经验等等，这些都是加入工作室所能带给你的，会让你的大学生活变得无比充实</li></ol></li><li><p><strong>没进工作室该怎么规划学习和提升？</strong></p><p>想要加入工作室，是需要经过层层考核的，那这意味着被淘汰的同学不好么？并不是的，工作室的考核是双向选择，千万不要因为这一次的不如意而否认自己，只不过是这一步稍微走慢或是走错罢了。</p><p>工作室的考核周期是比较长的，最难的其实是坚持，在这一路的坚持中，无论结果如何，你都已经收获很多，未来的学习中，依旧需要保持在考核阶段对技术的热忱和干劲。<strong>掌握上面所写的基础已经有能力去参加工作室考核了</strong>，再接下就可以来按着顺序去学习<strong>进阶</strong>和<strong>更多的技能</strong>部分的内容。学习过程中，我还有一些个人建议：</p><ol><li>数据结构、计算机组成原理、计算机网络和操作系统这类重难的专业课一定要学好，工作的彼时面试都是避不开的。</li><li>学习技术的时候，不要只看书籍或博客，一定要去看官方文档。<strong>Android</strong>的迭代很快，书籍和博客都会过时，但官方文档会不断维护更新的，官方文档才是最全的第一手的资料。</li><li>保持写博客的习惯，你看到的东西不是你的，你写得出来的才是你的。当你去写博客的时候，无形中你是在逼迫自己对这个知识在能力范围内近乎全面的深入学习和了解，也是将自己的学习转化为成果的方式</li><li>纸上得来终觉浅，绝知此事要躬行，计算机是实践的学科，阶段性学习的同时，我们需要在阶段性学习后去找一些开源项目用自己所学复现和找一些免费API写自己的APP。</li><li>积极的和别人交流，我们学习的过程中，一定会遇到一些问题是查阅不到的。这时候我们可以在掘金、StackOverflow等这些社区提问，在GitHub上提交<code>issue</code>，加入业内大佬的Q群讨论提问等这些方式解决我们的困惑。当然啦，当我们遇到我们懂的知识，也需要做一个爱好分享的好心人。</li><li>大胆去尝试，大学是我们的舞台，这个年纪的我们犯错成本是最低的，青春的我们有无限的可能！</li></ol></li></ul><p><strong>关注数智工作室，随时留意我们的招新动态和硬核分享</strong></p><p><img src="https://s2.loli.net/2022/02/10/21PulJyVUvQchjq.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数智工作室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数智工作室 </tag>
            
            <tag> 招新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减肥里的科学和How to 减肥</title>
      <link href="/2022/02/06/jian-fei-li-de-ke-xue-he-how-to-jian-fei/"/>
      <url>/2022/02/06/jian-fei-li-de-ke-xue-he-how-to-jian-fei/</url>
      
        <content type="html"><![CDATA[<h1 id="减肥里的科学和How-to-减肥"><a href="#减肥里的科学和How-to-减肥" class="headerlink" title="减肥里的科学和How to 减肥"></a>减肥里的科学和How to 减肥</h1><h2 id="1-热量公式"><a href="#1-热量公式" class="headerlink" title="1. 热量公式"></a>1. 热量公式</h2><blockquote><p>影响胖瘦最基本的因素：<strong>热量差</strong></p><p><strong>热量差</strong>=<strong>摄入热量</strong>ー<strong>消耗热量</strong></p><p>当摄入热量&gt;消耗热量，体重会增加</p><p>当消耗热量&gt;摄入热量，体重会减轻</p></blockquote><h2 id="2-摄入热量"><a href="#2-摄入热量" class="headerlink" title="2. 摄入热量"></a>2. 摄入热量</h2><blockquote><p><strong>摄入热量是指吃进去的一切食物产生的热量</strong></p><p>减肥是以<strong>天</strong>或者<strong>周</strong>为<strong>单位</strong>计算摄入热量</p><p>例1：一天需要消耗热量为2000kcal，早上狂吃1500kcal食物，中午和晚上不吃。</p><p>例2：三天需要消耗热量为6000kcal，第一天吃3000kcal食物，第二三天吃2000kcal食物。</p><p>那么摄入热量&lt;消耗热量=<strong>减肥成功</strong></p><p>(PS：个人不建议这样，这样会导致晚上或者第2天吃得更多导致长胖。还有就是<strong>一次性吃大量食物消耗不完会转化为脂肪存在体内</strong>)</p><p>例3：一天需要消耗热量为2000kcal，除正餐吃够2000kcal热量外，还可以吃些零食增加摄入热</p><p>那么摄入热量&gt;消耗热量=<strong>增重成功</strong></p><p>想减肥的吃不够，想增重的吃不进去怎么办？</p><p>减肥食物选择：热量低、饱腹感强</p><p>增重食物选择：热量高、饱腹感弱</p></blockquote><ul><li><p>减肥食物推荐</p><p><img src="https://s2.loli.net/2022/02/05/jPKtNbUd5klfzQw.png"></p></li></ul><h2 id="3-消耗热量"><a href="#3-消耗热量" class="headerlink" title="3.消耗热量"></a>3.消耗热量</h2><blockquote><p><strong>a运动</strong></p><p>不管是有氧运动还是无氧运动，心肺运动还是抗阻运动，只要动了热量就会有所消耗</p><p><strong>拿快递外卖、骑共享单车、洗碗、拖地都算是运动</strong></p><p><strong>想要减肥后不反弹，要适当做抗阻运动</strong></p><p><strong>b基础代谢</strong></p><p>基础代谢是指人体在18～25℃室温下，空腹、平卧并处于清醒、安静的状态称为基础状态。此时，维持心跳、呼吸等基本生命活动所必需的最低能量代谢，称基础代谢（BM）</p><p>基础代谢影响因素：</p><p><strong>①体重</strong>，体重越大基础代谢率越大</p><p><strong>②遗传基因</strong>，有些基因可能会导致肥胖</p><p><strong>③甲状腺激素</strong>，甲亢会导致基础代谢率升高</p><p><strong>④肠道菌群</strong>，有些肠道菌群可以帮助消化，提高代谢率</p></blockquote><ul><li><p>基础代谢计算公式**(久坐的工作x1.2,偶尔外出x1.5)**</p><p><img src="https://s2.loli.net/2022/02/05/Bzm9cnZHNTFwq4S.png"></p></li></ul><blockquote><p>1.问：为什么比较胖的人一开始瘦的特别快？</p><p>   答：瘦的快的原因是体重越大基础代谢越大</p><p>2.问：为什么有些人减肥减着就减不动了？</p><p>   答：因为在其他条件都不变的情况下，体重轻了，基础代谢也小了，消耗也少了。</p></blockquote><h2 id="4-肠道杆菌"><a href="#4-肠道杆菌" class="headerlink" title="4.肠道杆菌"></a>4.肠道杆菌</h2><blockquote><p><strong>肠道中一般存在两种细菌：厚壁菌门与拟杆菌门</strong></p><p><strong>厚壁菌</strong>：可以帮助人体更高效的从复杂的碳水化合物里吸收热量</p><p><strong>拟杆菌</strong>：则能够分解人体本身无法消化的多糖（如纤维素等）再向宿主提供营养的同时也为自己和肠道中的其他细菌获得食物。</p><p>一般吃不胖的人肠道中的：拟杆菌&gt;厚壁菌</p><p>一般喝水都胖的人肠道中：拟杆菌&lt;厚壁菌</p><p><strong>如果想长胖，可以多吃热量高、淀粉含量高的食物，增加肠道内厚壁菌的数量</strong></p><p><strong>如果想减肥，可以经常吃纤维多的食物，例如蔬菜、粗粮，增加肠道中拟杆菌的数量</strong></p></blockquote><h2 id="5-饮食"><a href="#5-饮食" class="headerlink" title="5.饮食"></a>5.饮食</h2><blockquote><p><strong>1.维生素与胖瘦</strong></p><p><strong>维生素C</strong></p><p>长期缺乏维生素C，容易越来越胖。维生素C能合成肉碱，促进脂肪代谢，加速脂肪的分解和燃烧。</p><p>新陈代谢的过程中，如果肉碱含量不足，就会导致脂肪囤积，形成脂肪组织。研究发现维生素C摄入充足的人，运动时燃烧的脂肪比维生素摄入不足的人要多30%。</p><p><strong>维生素D</strong>是人体制造瘦素所必需的。瘦素是一种可控制人食欲的激素，它会使人在进餐后产生吃饱的感觉，从而停止进食。</p><p>人体内的瘦素含量若不断降低，胃口就会越来越大，从而更容易患上肥胖症。所以，控制卡路里减肥时，多吸收维生素D可以帮助减肥瘦身的人更加轻松地减肥。</p><p><strong>2.暴饮暴食与不吃早饭</strong></p><p>当你暴饮暴食时，<strong>多吃入的食物会在体内转化为脂肪储存导致长胖</strong>。</p><p>不吃早餐，午饭会吃得更多，导致长胖，长期不吃早饭还可能导致胆结石、胃炎肠道疾病。</p><p><strong>3.饮食结构与胖瘦</strong></p><p>长期以高油、高糖食物为主食的人普遍偏胖(例如炸鸡、披萨、薯条)</p><p><strong>长期以蔬菜、粗粮食物为主食的人普遍偏瘦</strong></p></blockquote><h2 id="6-褐色脂肪与肥瘦的关系"><a href="#6-褐色脂肪与肥瘦的关系" class="headerlink" title="6.褐色脂肪与肥瘦的关系"></a>6.褐色脂肪与肥瘦的关系</h2><blockquote><p>人体内一般包含两种脂肪：白色脂肪与褐色脂肪</p><p><strong>白色脂肪</strong>的主要功能是将体内多余的能量以脂肪的形式储存起来，当我们摄入过多热量时，就会引起肥胖。</p><p><strong>褐色脂肪</strong>的主要特性是消耗能量。棕色脂肪类似于一个“产热器”，它的主要功能就是生热（帮助我们在寒冷的环境下维持体温）。生热需要消耗能量（卡路里）</p><p>褐色脂肪的主要功能是产热，它的产热能力是肝脏的60倍，是肌肉有氧的情况下产热量的10倍。研究发现：仅50克的褐色脂肪可以燃烧的热量可以达到人的基础代谢的20%。</p><p>年龄越大、体形越胖，体内褐色脂肪越少；</p><p>年龄越小、体型越瘦，体内褐色脂肪越多；</p><p>降低温度，体内褐色脂肪就更活跃；</p><p><strong>女人体内比男人更多有褐色脂肪</strong>。</p><p>如何增加体内褐色脂肪</p><p><strong>1.养成良好规律的睡眠习惯，保证充足睡眠</strong></p><p>睡眠激素—褪黑素，会影响褐色脂肪，在一项大鼠研究中发现：具有较高褪黑素的大鼠，拥有更多的褐色脂肪。</p><p><strong>2.每周适当运动</strong></p><p>日常生活中，坚持每天半小时以上的中强度运动，如慢跑、快走、游泳等可以调动褐色脂肪，增加褐色脂肪活性。</p></blockquote><h2 id="7-如何科学减肥呢"><a href="#7-如何科学减肥呢" class="headerlink" title="7.如何科学减肥呢"></a>7.如何科学减肥呢</h2><ul><li><p>饮食习惯</p><blockquote><ol><li>热量要按天控制，尽量吃食物推荐表里面的低热量食物(一般比较香的食物是高热量食物)</li><li>吃饭切记细嚼慢咽和喝清汤，这是给自己饱腹感</li><li>每天给自己<strong>部分能量</strong>来自<strong>粗粮</strong>或者<strong>水果蔬菜</strong></li><li><strong>一定要吃早餐</strong></li></ol></blockquote></li><li><p>作息</p><blockquote><ol><li>早睡早起，12点睡觉，8点起床</li><li>规律午觉时间，尽量每天同一时间睡午觉，周末也不例外</li><li>算上走路等，每天最好有40分钟运动事件。可以是跑步，也可以单纯走快点</li></ol></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 科学减肥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 减肥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 Activity(看得见的活动)|《第一行代码》笔记</title>
      <link href="/2022/02/04/di-er-zhang-activity-kan-de-jian-de-huo-dong/"/>
      <url>/2022/02/04/di-er-zhang-activity-kan-de-jian-de-huo-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-活动是什么"><a href="#1-活动是什么" class="headerlink" title="1. 活动是什么"></a>1. 活动是什么</h2><p>活动是一个包含用户界面的组件，可以理解为一个APP中的页面，是直接展示给用户的组件。</p><h2 id="2-活动创建步骤"><a href="#2-活动创建步骤" class="headerlink" title="2.活动创建步骤"></a>2.活动创建步骤</h2><blockquote><ol><li>项目中new一个<code>Empty Activity</code>,勾选<code>Generate Layout File</code>为<code>Activity</code>自动创建一个布局文件</li><li>在<strong>res/layout</strong>下找到与你刚创建的<code>Activity</code>绑定的布局文件，在布局文件中添加对应组件和编辑布局</li><li>在<strong>AndroidManifest.xml</strong>中注册声明该活动</li></ol></blockquote><p>主活动配置代码</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.actoin.MAIN<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-活动的简单使用"><a href="#3-活动的简单使用" class="headerlink" title="3. 活动的简单使用"></a>3. 活动的简单使用</h2><h3 id="3-1-活动中使用Toast的代码"><a href="#3-1-活动中使用Toast的代码" class="headerlink" title="3.1 活动中使用Toast的代码"></a>3.1 活动中使用Toast的代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//直接在对应的FirstActivity中编辑下列</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在Activity创建阶段就创建绑定好显示型组件</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重写方法的时候，继承原方法特性</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定布局文件</span>    <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新建和绑定组件</span>    button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//为Button组件设置监听事件</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//设置监听到button1被按下时候执行下列事件</span>            <span class="token comment">//通过静态方法makeText创建出一个Toast对象，其三个参数分别为Context,Text,Time;再链式调用show()方法显示</span>            <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"You click Button"</span><span class="token punctuation">,</span>                          <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-活动中使用Menu的代码"><a href="#3-2-活动中使用Menu的代码" class="headerlink" title="3.2 活动中使用Menu的代码"></a>3.2 活动中使用Menu的代码</h3><blockquote><p>到资源文件夹中新建<strong>menu</strong>文件夹，在该文件夹中新建<strong>menu</strong>资源文件</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--menu资源文件，此处为简单试用，只需添加id和title属性--&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/add_item<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Add<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/remove_item<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Remove<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>回到<strong>FirstActivity</strong>中重写关于<strong>menu</strong>的对应方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在OnCreate方法之外编写以下的方法，inflater(充气机)</span><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span><span class="token class-name">Menu</span> menu<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//重写该方法载入绑定menu资源文件</span>       <span class="token function">getMenuInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span>main<span class="token punctuation">,</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用该方法绑定</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//true为显示menu,false为不显示</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">MenuItem</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//重写该方法，定义菜单响应事件</span>       <span class="token keyword">switch</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>add_item<span class="token operator">:</span>               <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"You clicked add_item"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>remove_item<span class="token operator">:</span>               <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"You clicked remove_item"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">default</span><span class="token operator">:</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//记得返true</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-使用Intent在活动中穿梭"><a href="#4-使用Intent在活动中穿梭" class="headerlink" title="4. 使用Intent在活动中穿梭"></a>4. 使用Intent在活动中穿梭</h2><h3 id="4-1-显式Intent"><a href="#4-1-显式Intent" class="headerlink" title="4.1 显式Intent"></a>4.1 显式Intent</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//新建SecondActivity之后，使用Intent从FirstActivity跳转到SecondActivity中</span><span class="token comment">//修改FirstActivity为</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//new一个Intent重载</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用startActivity()重载</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-隐式Intent"><a href="#4-2-隐式Intent" class="headerlink" title="4.2 隐式Intent"></a>4.2 隐式Intent</h3><blockquote><p>概述：恰如其意，隐式调用不直接指明某一个类，而是指定<code>action</code>和<code>category</code>(类别)等信息，让系统去分析应该跳转到哪个app的哪个活动之中。</p><p>注意：</p><ol><li>目标<strong>Activity</strong>需要在<strong>AndroidManifest.xml</strong>文件中配置好<code>&lt;intent-filter&gt;</code>的内容，指定好能响应的<code>action</code>和<code>category</code>等信息。而在执行<code>Intent</code>的<strong>Activity</strong>中，也需要同时匹配上这对应的<code>action</code>和<code>category</code>，活动才可以响应。</li><li>每个<code>Intent</code>中只能指定一个<code>action</code>,但是却可以同时指定多个<code>category</code>，<code>category</code>是包含了附加信息的标签，其功能是让<code>Intent</code>精准定位到对应的<strong>Activity</strong>中。由于<code>action</code>的编写是相对统一的，例如手机中的浏览器都具有被调用打开网页的功能，而它们配置的<code>action</code>都是“<code>Intent.ACTION_VIEW</code>”；多个<code>category</code>的作用在于，当我想固定调用QQ浏览器时，在<code>Intent</code>跳转的时候载入QQ浏览器中配置的<code>category</code>标签即可无需选择直接打开QQ浏览器。</li><li>配置<code>&lt;data&gt;</code>标签，详细看下例</li></ol></blockquote><ul><li><p>普通调用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AndroidManifest.xml文件中SecondActivity的配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.activitytest.ACTION_START<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Activiy中的Intent跳转</span> button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//此处无需指定category，因为它是默认的，调用startActivity的时候会自动添加进去</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.example.activitytest.ACTION_START"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多category调用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AndroidManifest.xml文件中SecondActivity的配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.activitytest.ACTION_START<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.activitytest.MY_CATEGORY<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Activiy中的Intent跳转</span> button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.example.activitytest.ACTION_START"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//此处配置文件中有多个category，需要指定非默认的category</span>                intent<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span><span class="token string">"com.example.activitytest.MY_CATEGORY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带<code>&lt;data&gt;</code>标签的用法</p><blockquote><p><code>&lt;data&gt;</code>标签用于更精确地指定当前活动能够响应什么类型的数据，主要可以配置以下活动</p><p><strong>tips</strong>：下面涉及到计算机网络的知识，入门可以参考<a href="https://pan.baidu.com/share/init?surl=KlvowIliskjXrIwAdeUi9A">《图解HTTP》</a>(提取码：6gpm)</p><p><strong>android:scheme</strong>  用于指定数据的协议部分，如下边的http部分</p><p><strong>android:host</strong>  指定数据的主机名部分，如下边的<a href="http://www.baidu.com部分/">www.baidu.com部分</a></p><p><strong>android:port</strong>  用于指定数据的端口部分，一般紧随在主机名之后</p><p><strong>android:path</strong>  用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容</p><p><strong>android:mimeType</strong>  用于指定可以处理的数据类型，允许使用通配符的方式进行指定</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//此处键入对应的的data，Uri.parse方法把字符串解析为uri对象</span>               intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//跳转到系统拨号界面</span>               <span class="token comment">//Intent intent = new Intent(Intent.ACTION_DIAL);</span>               <span class="token comment">//intent.setData(Uri.parse("tel:10086"));</span>               <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AndroidManifest.xml文件中ThirdActivity的配置，指定了数据协议必须是http--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.ThirdActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.VIEW<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--其他协议：--&gt;</span><span class="token comment">&lt;!--geo表示显示地理位置--&gt;</span><span class="token comment">&lt;!--tel表示拨打电话--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上例中的<strong>http</strong>协议在<strong>Android7</strong>中适用，但是在<strong>Android9</strong>中开始不适用.新版本默认支持<strong>https</strong>，<a href="https://www.jianshu.com/p/97519d17056a">点击查看区别</a></p><p>我们需要在<strong>AndroidManifest.xml</strong>中如下配置，以支持<strong>HTTP</strong>明文</p><p>法1:在<strong>res</strong>目录下新建<strong>xml</strong>目录，在该目录下新建配置文件 <strong>network_security_config.xml</strong>，内容为：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<strong>AndroidManifest.xml</strong>文件的<code>applicaiton</code>段增加了<code>networkSecurityConfig</code>一行</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>             <span class="token attr-name">...</span> <span class="token attr-name"><span class="token namespace">android:</span>networkSecurityConfig</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@xml/network_security_config<span class="token punctuation">"</span></span>             <span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>法2：直接在<strong>AndroidManifest.xml</strong>文件的<code>applicaiton</code>段增加了<code>usesCleartextTraffic</code>一行</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>             <span class="token attr-name">...</span> <span class="token attr-name"><span class="token namespace">android:</span>usesCleartextTraffic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>             <span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><h3 id="4-3-利用Intent向下一个活动传数据"><a href="#4-3-利用Intent向下一个活动传数据" class="headerlink" title="4.3 利用Intent向下一个活动传数据"></a>4.3 利用Intent向下一个活动传数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FirstActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">"Hello Word"</span><span class="token punctuation">;</span>            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"extra_data"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个参数是键，第二个参数是真正的value（数据）</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//调用封装的方法传递数据</span>            <span class="token comment">//SecondActivity.actionStart(FirstActivity.this, "data1", "data2");</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SecondActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>second_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> data <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"extra_data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对应的还有：getIntExtra(),getBooleanExtra()等方法</span><span class="token punctuation">}</span><span class="token comment">//将传递数据的功能封装，方便之后的调用</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionStart</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> data1<span class="token punctuation">,</span> <span class="token class-name">String</span> data2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> data1<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-利用Intent向上一个活动返回数据"><a href="#4-4-利用Intent向上一个活动返回数据" class="headerlink" title="4.4 利用Intent向上一个活动返回数据"></a>4.4 利用Intent向上一个活动返回数据</h3><blockquote><p><code>startActivityForResult(Intent intent,int requestCode )</code> 该方法也是用于启动活动的，但这个方法期望在下一个活动被销毁的时候能够返回一个结果给本活动。顾名思义，该函数声明本活动允许接受下一个活动返回的结果</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FirstActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第二个参数的请求码只需要唯一即可，在重写OnActivityResult()方法的时候会使用到。建议取大于1的值</span>         <span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在SecondActivity销毁的时候会回调这一个方法</span><span class="token comment">/*** @param requestCode 请求码，对应为startActivityForResult中的1* @param resultCode 返回数据的结果，对应为setResult()的第一个参数* @param data 数据，即对应的Intent*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> <span class="token class-name">Intent</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>requestCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//startActivityForResult(Intent intent,int requestCode )传入的1</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultCode <span class="token operator">==</span> RESULT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> returnedData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"data_return"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"FirstActivity"</span><span class="token punctuation">,</span> returnedData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SecondActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"SecondActivity"</span><span class="token punctuation">,</span> <span class="token string">"Task id is "</span> <span class="token operator">+</span> <span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>second_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Button</span> button2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    button2<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//在点下button后向上一活动发送返回值，并且关闭该活动</span>            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"data_return"</span><span class="token punctuation">,</span> <span class="token string">"Hello FirstActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//本方法专门用于返回处理结果，第一个参数可选RESULT_OK或RESULT_CANCELED两个值，第二个则为带数据的intent</span>    <span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_OK<span class="token punctuation">,</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//实现在直接按返回键的时候也达到一样的功能</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"data_return"</span><span class="token punctuation">,</span> <span class="token string">"Hello FirstActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_OK<span class="token punctuation">,</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>温馨提示：最新的sdk中，<code>startActivityForResult</code>方法已经被弃用，想了解和掌握新的API使用方法，参照下面的两篇博客</p><p><a href="https://guolin.blog.csdn.net/article/details/121063078?spm=1001.2014.3001.5502">Activity Result API详解，是时候放弃startActivityForResult了_郭霖的专栏-CSDN博客</a></p><p><a href="https://blog.csdn.net/hx7013/article/details/120916287?spm=1001.2014.3001.5502">startActivityForResult被标记为弃用后，如何优雅的启动Activity?_葫芦娃-CSDN博客</a></p><h2 id="5-活动的生命周期"><a href="#5-活动的生命周期" class="headerlink" title="5. 活动的生命周期"></a>5. 活动的生命周期</h2><h3 id="5-1-活动状态"><a href="#5-1-活动状态" class="headerlink" title="5.1 活动状态"></a>5.1 活动状态</h3><p><a href="https://developer.android.google.cn/guide/components/activities/state-changes">官方指南</a></p><blockquote><ol><li><strong>运行状态</strong>：活动处于栈顶的时候，系统最不愿回收</li><li><strong>暂停状态</strong>：不在栈顶，但仍可见(部分可见)的活动；即跳出一个小弹窗后，下方被覆盖的活动即属于暂停状态。系统也不愿回收</li><li><strong>停止状态</strong>：不在栈顶，不可见的活动；即被新的Activity完全覆盖的活动，系统可能回收</li><li><strong>销毁状态</strong>：不在栈中的活动；即被<code>finish()</code>的活动，系统最愿意回收</li></ol></blockquote><h4 id="5-2-活动的生存期"><a href="#5-2-活动的生存期" class="headerlink" title="5.2 活动的生存期"></a>5.2 活动的生存期</h4><p><a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle">官方指南</a></p><blockquote><ol><li><strong>完整生存期</strong></li><li><strong>可见生存期</strong></li></ol></blockquote><p><img src="https://s2.loli.net/2022/02/04/TF1oHg4rf6bJdlx.png"></p><blockquote><ol><li><code>onCreate()</code>  活动第一次创建的时候会调用这个方法，我们需要在这个方法中完成活动的初始化操作，例如加载布局文件和绑定事件。接下来就进入到<code>onStart()</code>中</li><li><code>onStart()</code>  活动由不可见变可见，<strong>Activity</strong>进入前台，但是仍无法交互。当 <strong>Activity</strong> 进入已开始状态时，与 <strong>Activity</strong> 生命周期相关联的所有生命周期感知型组件都将收到 <code>ON_START</code>事件。，这个状态会迅速完成，进入到<code>onResume()</code>中</li><li><code>onResume()</code>   活动进入到可交互阶段，即正常使用的状态。此时活动一定位于栈顶，正在运行阶段</li><li><code>onPause()</code>  此方法表示Activity不再处于前台(多窗口模式时也是)，但仍然可见。这个方法是暂停，在准备去启动或者恢复另一个活动的时候调用。譬如弹出弹窗，或者在多窗口模式下点击另一活动的时候；本活动便调用<code>onPause()</code>方法，且不处于焦点之中。这时候，系统会释放掉一些与界面无关的消耗CPU的资源。</li><li><code>onStop()</code>  该方法在活动完全不可见的时候调用，此时活动被完全覆盖，进入了停止状态。对应的与界面有关的效果会停止更新或者粗略更新。<strong>我们能重写该方法，在活动调用该方法的时候保存应用或者用户数据、进行网络调用或者执行数据库事务</strong></li><li><code>onDestroy()</code>  在活动被销毁前调用该方法，包括①<strong>Activity</strong>即将结束(被彻底关闭或执行了<code>finish()</code>)； ②配置变更(设备旋转或执行了多窗口模式)，<strong>Activity</strong>被暂时销毁，之后还会重新启用<code>onCreate()</code>。我们可以在该回调释放前面回调未释放的资源。当然，我们也可以配置使得当配置变更时不会执行此回调，这样子在启动全屏播放视频时候不会出现差的用户体验</li><li><code>onRestart()</code>  由<code>onStop()</code>变为<code>onStart()</code>前调用。即被覆盖的页面重新被打开的时候，需要被调用。</li></ol></blockquote><h3 id="5-3-活动被回收怎么办"><a href="#5-3-活动被回收怎么办" class="headerlink" title="5.3 活动被回收怎么办"></a>5.3 活动被回收怎么办</h3><p>前言：当活动被回收之后，再次打开会使用到<code>onCreate()</code>而不是使用<code>onStart()</code>,这种情况下的活动是被重新创建的。当活动被重新创建，我们在页面中保存的数据（譬如输入文本框中的文字）会被清除掉，这样会严重影响用户的使用体验。</p><p>解决方法(类似Intent)：</p><ol><li><p>使用<code>onSaveInstanceState()</code>回调方法，此方法保证活动被回收前一定会被调用。重写此方法能将被回收活动的数据保存下来,以便重新创建活动的时候能够复现出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> tempData <span class="token operator">=</span> <span class="token string">"Something you just typed"</span><span class="token punctuation">;</span>    <span class="token comment">//该参数下的链式方法包括 putString() putInt() 等</span>    <span class="token comment">//对应方法的参数是键值对形式，第一个参数是键，第二个参数是值</span>    outState<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"data_key"</span><span class="token punctuation">,</span>tempData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对应的，我们也需要在<code>onCreate()</code>中处理Bundle类型的数据，让其在重新创建的时候复现出来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> tempData <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data_key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>tempData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>Tips:上例是Bundle数据的存储和取出方式。我们可以把Bundle数据存储到Intent中，然后借助Intent来进行数据传输</p><h2 id="6-活动的启动模式"><a href="#6-活动的启动模式" class="headerlink" title="6.活动的启动模式"></a>6.活动的启动模式</h2><blockquote><p>我们可以通过在<strong>AndroidManifest.xml</strong>中给<activity>标签指定<strong>android:launchMode</strong>的属性，即可确定活动的启动方式</activity></p></blockquote><h3 id="6-1-standard"><a href="#6-1-standard" class="headerlink" title="6.1 standard"></a>6.1 standard</h3><blockquote><p>不会在乎活动是否在返回栈中存在，每次启动都会创建一个新的实例(系统默认的)</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/WOzynQJ9FIBigtk.png"></p><h3 id="6-2-singleTop"><a href="#6-2-singleTop" class="headerlink" title="6.2 singleTop"></a>6.2 singleTop</h3><blockquote><p>启动的时候如果发现返回栈的栈顶是该活动，则不会启动新的，直接使用。否则，启动新的活动</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/fFZL9GYj1pgHtI6.png"></p><h3 id="6-3-singleTask"><a href="#6-3-singleTask" class="headerlink" title="6.3 singleTask"></a>6.3 singleTask</h3><blockquote><p>每次启动该活动的时候，系统首先会在返回栈中检查是否存在该活动的实例，如果发现已经存在该活动的实例，则直接使用该实例，并把在这个活动之上的所有活动<strong>全部出栈</strong>。若不存在该实例，则创建一个新的活动实例。</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/hR64fdV73tLTMJm.png"></p><h3 id="6-4-singleInstance"><a href="#6-4-singleInstance" class="headerlink" title="6.4 singleInstance"></a>6.4 singleInstance</h3><blockquote><p>假设我们的程序中有一个活动是<strong>允许其他程序调用</strong>的(例如从一个APP的广告页面点击到达购物软件的商品详情窗口)，我们需要实现其他程序和我们的程序可以共享这个活动的实例，就要使用到singleInstance。这个共享的实例有自己单独的一个返回栈来管理活动(譬如返回栈B)。</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/Bv4Xoe2FJminxdU.png"></p><h2 id="7-活动的最佳实践"><a href="#7-活动的最佳实践" class="headerlink" title="7. 活动的最佳实践"></a>7. 活动的最佳实践</h2><h3 id="7-1-知晓当前活动"><a href="#7-1-知晓当前活动" class="headerlink" title="7.1 知晓当前活动"></a>7.1 知晓当前活动</h3><blockquote><p>写<strong>BaseActivity</strong>,在该类中加入<code>Log.d("BaseActivity", getClass().getSimpleName());</code>；让所有的<strong>Activity</strong>继承<strong>BaseActivity</strong>，这样子就能每个<strong>Activity</strong>都打印出来了</p></blockquote><h3 id="7-2-设置能随时退出程序"><a href="#7-2-设置能随时退出程序" class="headerlink" title="7.2 设置能随时退出程序"></a>7.2 设置能随时退出程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ActivityCollector</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivityCollector</span> <span class="token punctuation">{</span><span class="token comment">//此类用于管理活动，对活动入栈、出栈和清栈</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Activity</span><span class="token punctuation">&gt;</span></span> activities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addActivity</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        activities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeActivity</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        activities<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">finishAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Activity</span> activity <span class="token operator">:</span> activities<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activity<span class="token punctuation">.</span><span class="token function">isFinishing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                activity<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//BaseActivity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"BaseActivity"</span><span class="token punctuation">,</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ActivityCollector</span><span class="token punctuation">.</span><span class="token function">addActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用入栈</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ActivityCollector</span><span class="token punctuation">.</span><span class="token function">removeActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用出栈</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ThirdActivity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"ThirdActivity"</span><span class="token punctuation">,</span> <span class="token string">"Task id is "</span> <span class="token operator">+</span> <span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>third_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Button</span> button3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_3<span class="token punctuation">)</span><span class="token punctuation">;</span>        button3<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ActivityCollector</span><span class="token punctuation">.</span><span class="token function">finishAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用清栈</span>                <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">killProcess</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//杀掉当前线程</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-启动活动最佳写法"><a href="#7-3-启动活动最佳写法" class="headerlink" title="7.3 启动活动最佳写法"></a>7.3 启动活动最佳写法</h3><blockquote><p>优点：在实际合作开发对接中，让对接者直观了解启动本活动需要传递哪些数据</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SecondActivity</span><span class="token comment">//将传递数据的功能封装，方便之后的调用。让调用者直观了解需要传入什么数据</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionStart</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> data1<span class="token punctuation">,</span> <span class="token class-name">String</span> data2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> data1<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FirstActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//调用封装的方法传递数据</span>            <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token function">actionStart</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"data1"</span><span class="token punctuation">,</span> <span class="token string">"data2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android第一行代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 安卓开发整体介绍|《第一行代码》笔记</title>
      <link href="/2021/12/14/di-yi-zhang-an-zhuo-kai-fa-zheng-ti-jie-shao-kai-shi-qi-cheng/"/>
      <url>/2021/12/14/di-yi-zhang-an-zhuo-kai-fa-zheng-ti-jie-shao-kai-shi-qi-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="1-1-系统架构"><a href="#1-1-系统架构" class="headerlink" title="1.1 系统架构"></a>1.1 系统架构</h3><p><img src="https://i.loli.net/2021/10/09/iFWTetAq6OBwRZn.png" alt="Android架构图"></p><h4 id="1-1-1-Linux内核层"><a href="#1-1-1-Linux内核层" class="headerlink" title="1.1.1 Linux内核层"></a>1.1.1 Linux内核层</h4><ul><li>允许写底层硬件驱动</li><li>依靠Linux执行底层功能，例如线程和低层内存管理</li></ul><h4 id="1-1-2-硬件抽象层（HAL）"><a href="#1-1-2-硬件抽象层（HAL）" class="headerlink" title="1.1.2 硬件抽象层（HAL）"></a>1.1.2 硬件抽象层（HAL）</h4><ul><li>为特定类型硬件实现界面，例如相机和蓝牙模块。在API框架层要访问该硬件时，Android系统就是向API框架层提供此界面。</li></ul><h4 id="1-1-3-系统运行库层"><a href="#1-1-3-系统运行库层" class="headerlink" title="1.1.3 系统运行库层"></a>1.1.3 系统运行库层</h4><ul><li><p>本层中系统组件等（例如ART和HAL）使用到的是C/C++库提供的特性支持。例如SQLite提供的数据库，OpenGL ES 提供的2D/3D绘图，Webkit提供的浏览器内核。<br>如果在应用层需要使用到C/C++的代码，则需要Android NDK来访问这些原生库。</p></li><li><p>除了上述的库，还有Android运行时库。Android的核心库中可提供Java API框架的大部分功能，我们也可以使用Java语言编Android应用。此外，Android还包含了一款虚拟机——<a href="https://source.android.com/devices/tech/dalvik/index.html?hl=zh-cn">ART</a>(Android Runtime)，在Android 5.0前使用的是Dalvik，现在的ART是Dalvik的改进版。ART使得每一个应用都能运行在<strong>独立的进程</strong>中。</p></li><li><p>ART 编写执行 DEX 文件,DEX可以在低内存设备上运行多个虚拟机，其是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。其中编译工具链（例如 <a href="https://source.android.com/source/jack.html?hl=zh-cn">Jack</a>)）将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台上运行。</p></li></ul><blockquote><h5 id="ART特性"><a href="#ART特性" class="headerlink" title="ART特性"></a>ART特性</h5><h6 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1. 预编译"></a>1. 预编译</h6><p>Dalvik 中的应用每次运行时，字节码都需要通过即时编译器 JIT 转换为机器码，这会使得应用的运行效率降低。在 ART 中，系统在安装应用时会进行一次预编译（AOT，Ahead-Of-Time），将字节码预先编译成机器码并存储在本地，这样应用就不用在每次运行时执行编译了，运行效率也大大提高。</p><h6 id="2-垃圾回收算法"><a href="#2-垃圾回收算法" class="headerlink" title="2. 垃圾回收算法"></a>2. 垃圾回收算法</h6><p>在 Dalvik 采用的垃圾回收算法是<strong>标记-清除算法</strong>，启动垃圾回收机制会造成两次暂停（一次在遍历阶段，另一次在标记阶段）。而在 ART 下，GC 速度比 Dalvik 要快，这是因为应用本身做了垃圾回收的一些工作，启动 GC 后，不再是两次暂停，而是一次暂停，而且 ART 使用了一种新技术（packard pre-cleaning），在暂停前做了许多事情，减轻了暂停时的工作量。</p><h6 id="3-64-位"><a href="#3-64-位" class="headerlink" title="3. 64 位"></a>3. 64 位</h6><p>Dalvik 是为 32 位 CPU 设计的，而 ART 支持 64 位并兼容 32 位 CPU，这也是 Dalvik 被淘汰的主要原因。</p></blockquote><h4 id="1-1-4-应用框架层-Java-API框架"><a href="#1-1-4-应用框架层-Java-API框架" class="headerlink" title="1.1.4 应用框架层(Java API框架)"></a>1.1.4 应用框架层(Java API框架)</h4><ul><li>提供构建程序的各种API框架，Android系统自身会用到，我们开发应用也会用到</li></ul><h4 id="1-1-5-应用层"><a href="#1-1-5-应用层" class="headerlink" title="1.1.5 应用层"></a>1.1.5 应用层</h4><ul><li>本层包括系统自身的应用，也包括我们开发或者下载安装的应用。就是手机软件，是对使用者最直观的体现。</li></ul><h3 id="1-2-Android应用开发特性"><a href="#1-2-Android应用开发特性" class="headerlink" title="1.2 Android应用开发特性"></a>1.2 Android应用开发特性</h3><ul><li><p><strong>四大组件</strong></p><blockquote><p>Activity： 程序的页面<br>Service：后台服务，例如后台闹钟，自动定位<br>Broadcast Receiver：接收来自各处的广播<br>Content Provider：使得程序之间可以共享数据，例如读取电话簿的联系人</p></blockquote></li><li><p><strong>各种系统控件</strong>，例如按钮输入框啥的</p></li><li><p><strong>SQLite数据库</strong>，也可借用第三方库(LitePal)更容易上手</p></li><li><p><strong>多媒体</strong>，使用程序控制音乐、视频等</p></li><li><p><strong>定位</strong>，可借用定位开发很多功能</p></li></ul><h2 id="2-开发工具"><a href="#2-开发工具" class="headerlink" title="2. 开发工具"></a>2. 开发工具</h2><ul><li>现在的Android studio 已经更新到4的版本了，界面相比以前更美观，多了许多功能等，实际上手体验即可</li></ul><h2 id="3-资源文件"><a href="#3-资源文件" class="headerlink" title="3. 资源文件"></a>3. 资源文件</h2><h3 id="3-1-无需过多关心的文件"><a href="#3-1-无需过多关心的文件" class="headerlink" title="3.1 无需过多关心的文件"></a>3.1 无需过多关心的文件</h3><blockquote><ul><li>.gradle 和.idea </li><li>build</li><li>gradle：支持gradle自下载</li><li> gradle.properties</li><li>gradlew/gradlew.bat：第一个mac/Linux系统的，第二个win系统的</li><li>xxx.iml：IDEA自生成</li><li>setting.gradle</li></ul></blockquote><h3 id="3-2-gitignore"><a href="#3-2-gitignore" class="headerlink" title="3.2 .gitignore"></a>3.2 .gitignore</h3><ul><li>在这可指定啥目录不关联到git</li></ul><h3 id="3-3-local-properties"><a href="#3-3-local-properties" class="headerlink" title="3.3 local.properties"></a>3.3 local.properties</h3><ul><li>本机的Android SDK路径，我之前把sdk安装到了d盘，那么这里就需要更改一下路径</li></ul><h3 id="3-4-app"><a href="#3-4-app" class="headerlink" title="3.4 app"></a>3.4 app</h3><ul><li>build：不用理</li><li>libs：使用到第三方jar包的时候放这</li><li>androidTest：可在此对项目编写一些自动化测试</li><li>main/java：所有java代码</li><li>main/res：各种资源目录</li><li>main/AndroidManifest.xml：项目的配置文件，四大组件、各种权限都要在这里注册</li><li>test：另一种自动测试</li><li>.gitignore：和上边的作用一样</li><li>app.xml：IDEA自生成</li><li>build.gradle</li><li>proguard-rule.pro：指定代码的混淆规则，如果不希望代码被破解者容易阅读的话</li></ul><h3 id="3-5-build-gradle"><a href="#3-5-build-gradle" class="headerlink" title="3.5 build.gradle"></a>3.5 build.gradle</h3><ul><li><p>AS是采用Gradle来构建整个项目的</p><h4 id="3-5-1-外层"><a href="#3-5-1-外层" class="headerlink" title="3.5.1 外层"></a>3.5.1 外层</h4><p><img src="https://i.loli.net/2021/10/09/DB8MzgyZhnLJb9c.png"></p></li><li><p>由上图可以看出两处的repositories都包含google()和jcenter(),这是我们声明要引用这些代码仓库的开源项目</p></li><li><p>接下来dependencies处使用classpath声明了一个插件，是因为需要使用这样一个Android插件来利用Gradle构建项目（Gradle不是专为Android开发的）</p></li></ul><h4 id="3-5-2-内层"><a href="#3-5-2-内层" class="headerlink" title="3.5.2 内层"></a>3.5.2 内层</h4><p><img src="https://i.loli.net/2021/10/09/xLc4mzpWFeaCDtv.png"></p><h3 id="3-6-AndroidManifest-xml"><a href="#3-6-AndroidManifest-xml" class="headerlink" title="3.6 AndroidManifest.xml"></a>3.6 AndroidManifest.xml</h3><p><img src="https://i.loli.net/2021/10/09/rgW7vHw5SoplJfk.png"></p><h3 id="3-7-res资源文件"><a href="#3-7-res资源文件" class="headerlink" title="3.7 res资源文件"></a>3.7 res资源文件</h3><p><img src="https://i.loli.net/2021/10/09/5rBj9DJGylaxQWv.png"></p><h2 id="4-使用日志"><a href="#4-使用日志" class="headerlink" title="4. 使用日志"></a>4. 使用日志</h2><p>按升序的log级别</p><ul><li>Log.v()：verbose级别</li><li>Log.d()：debug级别</li><li>Log.i()：info级别</li><li>Log.w()：warn级别</li><li>Log.e()：error级别</li></ul><blockquote><ul><li><p>小tips</p><p>可以使用logd+Tab/Enter，快捷编写日志打印</p><p>可以在外部使用lodt+Tab/Enter，快捷编写String TAG私有类</p></li></ul></blockquote><p>相关链接：</p><p><a href="https://juejin.cn/post/6844903897958449166#heading-15">探索 Android 内存优化方法 - 掘金 (juejin.cn)</a></p><p><a href="https://developer.android.com/guide/platform?hl=zh-cn">平台架构  | Android 开发者  | Android Developers</a></p>]]></content>
      
      
      <categories>
          
          <category> Android第一行代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
