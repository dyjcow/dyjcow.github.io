<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法|前缀和解法</title>
      <link href="/2022/05/02/suan-fa-qian-zhui-he-jie-fa/"/>
      <url>/2022/05/02/suan-fa-qian-zhui-he-jie-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>前置知识</strong>：</p><ul><li>基本数据结构知识(数组)</li><li>Java中HashMap容器基本了解</li></ul><p><strong>文章目的</strong>：</p><p>文章为笔记记录和一些思考，是对应 <code>labuladong</code> 的刷题秘籍记录，下边贴出 <code>labuladong</code> 官方链接</p><p><a href="https://labuladong.github.io/algo/">labuladong 的算法小抄 :: labuladong的算法小抄</a></p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>顾名思义，前缀和的意思就是一段数字中，某一个数字前面一段数字的和。在数组中解释的意思就是，数组索引前面的数据和。我们常用一个新数组（索引错位值为1）来记录数组的前缀和，以此辅助我们更好的<strong>解决数组中某一段数据和的问题</strong>。下图中 <code>nums</code> 为数组， <code>preSum</code> 为前缀和。</p><ul><li><p>计算前缀和的原始思路：$sumRange(i,j)=\sum_{k=i}^{j}nums[k]$</p></li><li><p>升级后前缀和的计算思路为：$sumRange(i,j)=\sum_{k=0}^{j}nums[k]-\sum_{k=0}^{i-1}nums[k]$</p></li><li><p>用数组 $sums$ 记录对应 $nums$ 索引的前缀和，$sum$ 的长度为 $n+1$ （<strong>方便计算，无需对 $i=0$ 做特殊处理</strong>），其满足 $sums[i+1] = sums[i]+nums[i]$ ，</p><p>即$sums[i+1]$ 表示 $\sum_{n=0}^{i}nums[n]$ 。那么有 $sumRange(i,j)=sums[j+1]-sum[i]$ </p></li></ul><p><img src="https://labuladong.github.io/algo/images/%e5%b7%ae%e5%88%86%e6%95%b0%e7%bb%84/1.jpeg"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="区域和检索-数组不可变-力扣（LeetCode）"><a href="#区域和检索-数组不可变-力扣（LeetCode）" class="headerlink" title="区域和检索 - 数组不可变 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">区域和检索 - 数组不可变 - 力扣（LeetCode）</a></h3><blockquote><p>题目大意：</p><p>计算数组 <code>nums</code> 中 $nums[left]$ 到 $nums[right]$ 的元素和，</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//标准前缀和思路，直接使用前缀和即可解题</span><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">{</span><span class="token comment">//全局初始化前缀和</span>    <span class="token keyword">int</span> preNum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//      在构造函数中就建立好前缀和数组，让 sumRange 被多次调用时候减少运算</span>        preNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> preNum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preNum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> preNum<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维区域和检索-矩阵不可变-力扣（LeetCode）"><a href="#二维区域和检索-矩阵不可变-力扣（LeetCode）" class="headerlink" title=" 二维区域和检索 - 矩阵不可变 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/"> 二维区域和检索 - 矩阵不可变 - 力扣（LeetCode）</a></h3><blockquote><p>题目大意：</p><p>在一个二维矩阵 <code>matrix</code> 里面，任意选两个点，计算这两点所形成的子矩阵的元素总和</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span><span class="token comment">//全局初始化前缀和邻接数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preNum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        preNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//  二维前缀和  </span>                preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> preNum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//   由二维前缀利用四则运算得出子矩阵元素和</span>        <span class="token keyword">return</span> preNum<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>row2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">+</span> preNum<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/02/AB4kGgXj3Jf9VaP.png"></p><center>二维前缀和<p><img src="https://s2.loli.net/2022/05/02/8W94kXYfcIvt6sy.png"></p><center>由二维前缀利用四则运算得出子矩阵元素和<h3 id="和为-K-的子数组-力扣（LeetCode）"><a href="#和为-K-的子数组-力扣（LeetCode）" class="headerlink" title="和为 K 的子数组 - 力扣（LeetCode） "></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/">和为 K 的子数组 - 力扣（LeetCode） </a></h3><blockquote><p>题目：</p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回 <em>该数组中和为 <code>k</code> 的子数组的个数</em> 。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//直接使用前缀和+双重遍历枚举的解法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> preNum<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preNum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//双重遍历，计算出满足的数</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>preNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> preNum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">==</span> k<span class="token punctuation">)</span> result<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/02/14nbsOETzBpo5tN.png"></p><blockquote><p> 由此提交记录可知该算法的执行用时比较大，我们可以再次优化该算法</p></blockquote><h4 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h4><p>该算式 $preNum[i] - preNum[j]  = k$ 为判断是否符合条件的核心式子，对该式子进行简单的变换 $preNum[i] - k  = preNum[j]$。利用该式子和哈希表，使用一轮遍历将前缀和以及满足 <code>k</code> 的 <code>result</code>记录下来，继而达到优化的目的。</p><p><img src="https://s2.loli.net/2022/05/02/4BrlXPt6aHLCYGx.png"></p><blockquote><p><code>HashMap</code> 中的 <code>key</code> 记录的是前缀和，<code>value</code> 记录的是该 <code>key</code> 出现的次数。在每一轮遍历检测中，当容器中的 <code>key</code> 存在等于式子 $preNum[i] - k  = preNum[j]$ 中的 <code>preNum[j]</code> 的情况时，则让 <code>result</code> 累加该 <code>key</code> 的 <code>value</code> 。</p><p>遍历完整个数组后，所有符合条件的 <code>key</code> 都被找出并累加到 <code>result</code> 中</p><p>其中，当 $key=0$ 时，设置 $value=1$ 是由于当该前缀和被创建时候，未添加值的时候，前缀和就是 0 。这样子也才能保证第一次得出 $key=0$ 时，其对应值 <code>value</code> 为 1。  </p><p>注：<code>HashMap</code> 不会允许多个相同的 <code>key</code> 值存在，因此，上例中只有一个 $key=8$ 存在，只是 <code>value</code> 不断在被更改，图像这样子画出来只是为了方便理解</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> preNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preNum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里不可缺，相当于添加了个队头(前缀和为0)，这是只要有队就存在的</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s_i <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> s_j <span class="token operator">=</span> s_i <span class="token operator">-</span> k<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>preNum<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s_j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//累加对应 key 中的 value</span>                result <span class="token operator">+=</span> preNum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s_j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//记录 key 出现的次数</span>            preNum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s_i<span class="token punctuation">,</span>preNum<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>s_i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/02/sZavku5jmHMq8t7.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/">和为K的子数组 - 和为 K 的子数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/solution/qu-yu-he-jian-suo-shu-zu-bu-ke-bian-by-l-px41/">区域和检索 - 数组不可变 - 区域和检索 - 数组不可变 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://labuladong.github.io/algo/">labuladong 的算法小抄 :: labuladong的算法小抄</a></p><blockquote><p>末尾小记：</p><p><img src="https://pic.lxtlovely.top//blog/1651480162530.png"></p><p><img src="https://pic.lxtlovely.top//blog/1651480130310.png"></p><center>英语听力学习<p><img src="https://pic.lxtlovely.top//blog/alleip439.png"></p><p><img src="https://pic.lxtlovely.top//blog/alleip440.png"></p><p><img src="https://pic.lxtlovely.top//blog/alleip441.png"></p><center>句子学习</center></center></blockquote></center></center>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次hexo博客部署的问题</title>
      <link href="/2022/04/10/ji-yi-ci-hexo-bo-ke-bu-shu-de-wen-ti/"/>
      <url>/2022/04/10/ji-yi-ci-hexo-bo-ke-bu-shu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="前置条件："><a href="#前置条件：" class="headerlink" title="前置条件："></a>前置条件：</h2><ol><li>一台云服务器（已占用 127.0.0.1:3000 端口部署了网易云后端，并且反向代理到了服务器的 3000 端口）</li><li>在 GitHub 上面已经部署了 hexo 博客</li></ol><h2 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h2><blockquote><p>本地博客仓库和GitHub以及服务器仓库的连接</p></blockquote><p><a href="https://blog.meta-code.top/2021/11/20/2021-41/">【Hexo博客】部署到腾讯云轻量应用服务器（使用宝塔面板） | 百里飞洋 (meta-code.top)</a></p><ul><li><strong>遇到的 bug：</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none"># 在本地电脑 Bash 窗口ssh -v git@SERVER# 注意！别直接复制SERVER这个单词！@后面替换成服务器IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这一步，发现无法使用密钥连接到服务器</p><ul><li><p>解决：</p><p>本地的git连接Github配置了代理，把代理软件关闭就可以连接了</p></li></ul></blockquote><blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment（部署）</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@你的服务器IP地址<span class="token punctuation">:</span>/home/git/repos/hexoBlog.git <span class="token comment">#服务器仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步中，由于，我有多个仓库，查阅hexo文档后，将此处配置成这样子</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment（部署）</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span> <span class="token key atrule">-type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//xxxxx.git <span class="token comment">#GitHub仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token key atrule">deploy</span><span class="token punctuation">:</span> <span class="token key atrule">-type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@你的服务器IP地址<span class="token punctuation">:</span>/home/git/repos/hexoBlog.git <span class="token comment">#服务器仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是问题来了，我的GitHub是需要代理的，服务器的就不需要。</p><p>在不使用代理的时候，有一个github登录框弹出，直接点密码登录，就可以直接上传了，但是GitHub仓库的上传不成功</p><p>后改为使用代理上传，就上传成功了</p></blockquote><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>一般来说，资源文件上传好了，直接在宝塔的网站处点击部署，引到文件夹就可以了，但是我的老是不成功。</p><p><strong>解决历程</strong></p><ol><li>查阅博客后，猜测是 Nginx 的问题，尝试在宝塔重启 Nginx ，发现重启失败，报端口占用的错误（3000）端口</li><li>尝试kill掉占用3000端口的进程，是node占用，无法杀掉。是PM2管理器一直开启占用3000端口</li><li>多次尝试之后解决顺序是：在网站处<strong>删除</strong>（一定要删除）网易云后端的网站项目 -&gt; 重启 Nginx -&gt; 重新映射网易云后端的项目</li><li>再次查看是否能访问博客，发现还是不行。尝试重新解析域名，发现就可以了，腾讯云的解析也有些bug。</li></ol><p><strong>问题本质</strong>：</p><p>​    Nginx 无法正常运行</p><h2 id="Nginx更改"><a href="#Nginx更改" class="headerlink" title="Nginx更改"></a>Nginx更改</h2><p>部署后更改同端口的域名，nginx无法立即修改，需要重启nginx才可以完成修改，本地浏览器也需要刷新看到效果。发现添加域名后无法立即显示，重启nginx就可以解决。</p>]]></content>
      
      
      <categories>
          
          <category> 乱搞服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>干货|进入工作室所需的储备</title>
      <link href="/2022/02/10/gan-huo-jin-ru-gong-zuo-shi-suo-xu-de-chu-bei/"/>
      <url>/2022/02/10/gan-huo-jin-ru-gong-zuo-shi-suo-xu-de-chu-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="干货-进入工作室所需的储备"><a href="#干货-进入工作室所需的储备" class="headerlink" title="干货|进入工作室所需的储备"></a>干货|进入工作室所需的储备</h1><p>新的学期即将开始，计算机学院各大工作室也陆续会在本学期开始招新。但是想要加入工作室，我们需要一定的知识储备，并顺利通过所有的考核。此刻的你也许还很迷茫，对工作室的各大方向和和该如何学习都还不够了解。</p><p>为此，我邀请了数智工作室各方向的负责人共同完成这篇推文，下面将以数智工作室的五大方向为例，给大家说明各方向是做什么的和针对初学者做一个学习推荐。</p><hr><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a><u>UI</u></h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>UI即用户界面设计，也称人机界面。最普遍的应用是在软件开发中，指程序的用户操作界面设计。UI在网站界面、软件界面、手机应用界面等多图形用户界面的设计都属于UI设计。学习UI将需要熟练使用<code>PS</code>，<code>AI</code>等设计软件，同时也需要学习动效建模和用户心理学，UI是和用户最直接接触的环节，优秀的UI能最大程度提高用户体验，最大化实现功能的应用。</p><h3 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h3><p>UI其实早已出现在我们生活的方方面面，当我们刷着手机，看着电视，在互联网上的时时刻刻我们都接触UI作品，小到开机界面大到软件流程，优秀的作品甚至能产生品牌效应，通过优秀的设计实现培养强大的用户粘度，最有名的就是苹果的设计，通过精益求精<strong>less is more</strong>的前期设计，引领一波设计风潮。那，如果要入门UI设计，该从哪里开始呢？</p><ul><li><p><strong>一、入门准备</strong></p><p>你是否热衷于各种好玩新奇的产品呢？</p><p>你是否平时喜欢使用各种各样的产品并研究它是否好用呢？</p><p>你是否更容易发现使用中的各种问题，并积极想办法解决它呢？</p><p>你是否充满各种灵感和创意？</p><p>你是否喜欢思考问题，清晰的罗列各种解决方案，并寻找其中的逻辑关系而乐此不疲呢？</p><p>在绘制草图的时候，你是否有一种莫名的兴奋感呢？</p><p>你喜欢跟人沟通和交流、展示你的想法和创意吗？</p><p>如果问题答案大部分是肯定的，那恭喜你！这说明你很适合接触设计类工作，接下来可以进行基本了解，多多观察手机内app页面设计和跳转逻辑，可以开始下一步了解啦。</p></li><li><p><strong>二、软件了解</strong></p><p>UI设计需要熟练掌握基础软件<code>PSAIAE</code>以及专业UI设计软件<code>sketch</code>/<code>figma</code>等。入门可以在B站观看相关视频学习，建议应当了解先着重弄懂每个软件基本功能并熟练使用，再学习较为复杂的效果制作，这样不仅能锻炼好基本功，也更方便在做效果时能更快理解更快掌握，最终实现举一反三的操作。这里推荐<strong>GenJi</strong>是真想教会你的一系列视频进行软件的入门。</p><p>（小建议：软件下载尽量下载较新的版本，此时练习作品也最好建立分类法来归类，方便以后查询）</p></li><li><p><strong>三、设计了解，学习设计</strong></p><p>这个有内容就有点多了，因为是养成思维的必经之路。</p><p>比如配色、排版、字体设计三大构成，消费心理学、沟通学，以及思维导图、原型图，还有交互逻辑、规范、切图、了解程序、互联网思维、用户体验，还有一些网络营销都是需要学习的，因为这和产品商业价值有关。当然这些都是后期进阶了，总而言之，多看优秀作品，提高设计审美，到这一步就可以开始尝试创作自己的作品啦!</p><p><a href="http://hao.shejidaren.com/book.html">设计书籍推荐 - 100本改变设计命运的书籍 (shejidaren.com)</a></p></li></ul><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a><u>深度学习</u></h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>数智深度学习组主要以<code>NLP</code>（自然语言处理）作为总体研究方向，使用知识图谱技术；团队内本科生与研究生可共同学习、讨论，已有本科师兄发表学术论文，参加数学建模比赛取得奖项。该方向更注重当前学术界先进的知识理论，掌握部分基础之后，主要以通过论文的阅读来进行知识补充，如果需要，则会与开发方向的伙伴们进行合作开发。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><p><strong>部分理论知识：</strong><code>概率论，线性代数</code>，<code>深度学习基础</code></p><ul><li>说到底是矩阵的操作，这类知识是逃不掉的。</li><li>前者可以需要这类知识的时候进行补充，后者可看B站<strong>吴恩达深度学习</strong>进行了解。</li></ul></li><li><p><strong>编程语言基础：</strong> <code>python</code></p></li><li><p><strong>部分第三方库</strong>：</p><p>​        无论是深度学习还是其他相关方向，数据的获取和处理都是十分重要的，有时候世界上现存的数据集或者词库可以满足需求，而有时候更需要自己获取清洗再生成。从这个方向来看，便需要大家掌握以下内容：</p><ul><li><p><strong>数据处理：</strong><code>numpy</code>、<code>pandas</code>、<code>re</code> 库…等等</p></li><li><p><strong>爬虫：</strong>请求库 <code>request\selenium</code>;  解析库<code>beautifulsoup\lxml</code></p></li><li><p><strong>机器学习：</strong><code>scikit-learn</code> (熟悉部分经典机器学习算法，掌握查询官方文档会使用即可</p></li></ul></li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li><strong>深度学习使用框架：</strong><code>tensorflow2.0</code>以上的库，主要使用其中的<code>keras</code>进行编程，实现所需的神经网络。</li></ul><h3 id="重要能力"><a href="#重要能力" class="headerlink" title="重要能力"></a>重要能力</h3><ul><li><strong>看论文以及复现论文模型的能力</strong></li></ul><p>※<strong>以上内容大部分都可在B站学习，科研道路很长、需要沉得下心，才能有所收获！</strong></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a><u>前端</u></h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>前端技术已将深入到人们生活的方方面面之中，在目前互联网时代，只要公司有需要开发互联网产品，包括网站，网页，H5，小程序，APP等等，就需要前端开发工程师岗位，具体的就业方向还可以按公司的技术需求来区分，侧重点各有不同，就业行业随着互联网的发展，已经变得越来越广泛了。</p><p>只要你想做，前端几乎无所不能，<code>JavaScript</code>作为前端的主要编程语言，既可以与UI框架（例如：<code>Vue</code>、<code>React</code>、<code>Angular</code>）结合做业务，、又可以和游戏引擎（例如：<code>Cocos2D-X</code>、白鹭引擎）结合制作HTML5游戏、还可以结合<code>Node.js</code>写后台，甚至还可以结合<code>Three.js</code>创建3D场景。</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>学习路线：<code>HTML</code>  =&gt;  <code>CSS</code>  =&gt;  <code>JavaScript</code> </p><p>我们建议先从三剑客（<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>）学起，万丈高楼平地起，坚实的基础能帮助我们在接下来的学习技术之路上走得更稳健。</p><p>学习前端，与专业无关、任何热爱技术的人都可以学习，请不要给自己设限。前端的入门门槛并不高，你甚至可以没有编程基础，三剑客的基础知识可以先通过观看视频来学习，b站中任意播放量高的零基础入门前端视频都行。由于前端技术发展很快，视频的内容很有可能已经有些过时了，这时候就可以到<code>MDN</code>、或<code>W3Cschool</code>查看最新标准。三剑客中最重要的就是<code>JavaScript</code>，单看视频只能学会基础用法，想要深入学习就必须要看权威的书籍，如《JavaScript高级程序设计（第四版）》或《JavaScript权威指南（第七版）》，其中前一本现在在网络上已经有电子版可以下载阅读。目前网上已经有很多开放的api接口，如果觉得自己三剑客已经学得不错的时候，可以继续学习<code>Ajax</code>，然后利用开放的api接口以及原生的三剑客制作一个属于自己的完整的应用程序，体验前后端交互以及独立完成一个项目的感觉，至此，就算是正式入门前端了。</p><h3 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h3><p>继续深入前端就必然避不开<code>TypeScript</code>，作为<code>JavaScript</code>的超集，ts在开发应用级程序上有着无可比拟的优点，学习ts可以直接去看ts的官方文档。</p><p>如果你在之前的前端入门阶段都一直在使用原生的三剑客来编写代码，那么学习到这个阶段，你就可以开始去接触三大UI框架（<code>Vue</code>、<code>React</code>、<code>Angular</code>），使用框架能够让我们的开发速度大幅提升，同时使用框架构建项目还可以使文档结构会更加清晰。学习框架可以先通过看视频入门，但是深入了解还是要回归官方文档。</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a><u>后端</u></h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>什么是后端？</p><p>我们访问网站时，除了一打开就映入眼帘的各色界面，还有隐藏在其中的各种数据，而后端就负责对这些数据进行一系列管理与操作。</p><p>后端需要学习什么？</p><h3 id="后端入门"><a href="#后端入门" class="headerlink" title="后端入门"></a><strong>后端入门</strong></h3><p>不积跬步，无以至千里；不积小流，无以成江海。在了解和上手<strong>Web开发后端</strong>之前，需要先掌握最基础的开发能力。</p><ul><li>首先，当然是掌握最基础的一门语言。在WEB开发中，<code>Java</code>是后端最常用的语言之一，掌握好Java也是最基础的一个环节。</li></ul><ol><li>除了掌握好基础语法，还需要了解几大模块，异常处理、IO流、线程、集合、封装、周期、反射等等。</li><li>掌握好Java语言的设计思想，弄懂设计思路，你会发现阅读代码、理解模块以及设计程序的能力大大提升。</li></ol><ul><li>其次，学习完<code>JavaSE</code>后，我们可以逐渐过渡到学习<code>JavaEE</code>。 </li></ul><ol><li><code>JavaEE</code>是一套使用Java进行企业级Web应用开发的大家一致遵循的工业标准。</li><li>掌握好<code>JavaEE</code>的13种核心技术规范，你就会拥有最基础的Web开发能力。</li></ol><ul><li>学习<code>JavaEE</code>整个体系，你将会了解和掌握后端事务的业务流程、数据库、<code>Servlet</code>、<code>JSP</code>等等在开发过程中起着重要作用的技术应用。</li><li>学习<code>Git</code>，了解<code>Git</code>仓库原理，掌握<code>Git</code>使用技巧，学会使用<code>Git</code>管理代码。</li><li>在这里，推荐学习Web开发前，先掌握最基础的Web知识，了解<code>HTTP</code>工作原理。（这里推荐《图解HTTP》这本书，对刚入门者非常友好易懂）</li><li>最后，为了对整体Web开发有一个完整的理解以及展现出我们后端的数据，除了学习后端的知识，我们还需要掌握一些前端知识（<code>HTML</code>、<code>CSS</code>、<code>JS</code>）。</li><li>成果：通过处理好后端数据以及接口，结合前端页面，我们就可以成功搭建我们的Web网站啦，成就感满满。</li></ul><h3 id="后端进阶"><a href="#后端进阶" class="headerlink" title="后端进阶"></a><strong>后端进阶</strong></h3><ul><li><p>通过入门阶段的学习，我们已经有一定的能力可以搭建自己的网站了，但是，后端远远不止于此。</p></li><li><p><code>maven</code>学习</p></li><li><p>在这一阶段，我们更注重开发效率以及模块封装性和性能。我们需要掌握<code>SSM</code>框架，也就是<code>Spring+</code>、<code>pringMVC</code>、<code>MyBatis</code>集合框架。</p></li><li><p>学习<code>Spring</code>时，我们要掌握<code>Spring</code>的核心思想，<code>IOC</code>控制反转，了解<code>bean</code>工厂的强大作用。</p></li><li><p>学习<code>SpringMVC</code>将有助于我们了解整个请求在框架中的执行过程，对拦截有更深刻的了解。</p></li><li><p>学习<code>mybatis</code>，我们对数据库底层的操作将变得更加简便透明，体验自定义<code>SQL</code>以及高级映射的简便性。</p></li></ul><h3 id="升华阶段"><a href="#升华阶段" class="headerlink" title="升华阶段"></a><strong>升华阶段</strong></h3><ul><li>在掌握好了<code>SSM</code>框架后，为了让开发更加简便，我们需要简化<code>Spring</code>繁琐的各种配置依赖，学习<code>SpringBoot</code>框架。</li><li><code>SpringBoot</code>框架是目前最常用的开发框架，掌握好他，是成为一个后端开发者的必经之路。</li><li>掌握<code>linux</code>基础知识，学会配置服务器，部署项目等等知识。</li><li><code>redis</code>等其他类型数据库</li><li>除了了解更多包和工具，掌握核心基础，作为后端开发者，我们还要与时俱进，学习了解一些优秀的中间件，微服务以及分布式开发等等。</li><li>对<code>ssm</code>框架源码深入理解</li></ul><h3 id="一入后端深似海，从此红尘是路人"><a href="#一入后端深似海，从此红尘是路人" class="headerlink" title="一入后端深似海，从此红尘是路人"></a><strong>一入后端深似海，从此红尘是路人</strong></h3><p>前期准备：</p><ul><li>下载开发工具<code>IDEA</code>、配置好JDK和环境（常用JDK1.8版本）</li><li>找到适合自己的学习方法（推荐书籍配合视频进行学习）</li><li>一颗热爱学习后端，不断进取的心。</li></ul><p><strong>学习资源推荐：</strong></p><p><a href="https://img-blog.csdnimg.cn/20200524092940998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiY19sbWw=,size_16,color_FFFFFF,t_70#pic_center">后端路线图</a></p><p><a href="https://blog.csdn.net/wangshuaiwsws95/article/details/106049247?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164451026616780357296280%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164451026616780357296280&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-106049247.pc_search_result_cache&amp;utm_term=%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%BA%BF&amp;spm=1018.2226.3001.4187">学习路线</a></p><p>黑马<code>JavaSE</code>、<code>JavaEE</code>等系列视频</p><p>书籍：《Java核心基础》、《图解HTTP》、《HTTP权威指南》、《深入理解java虚拟机》</p><h2 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a><u>安卓</u></h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p><strong>Android</strong>作为全球第一大的智能手机操作系统，拥有着手机操作系统中最活跃的用户群体和开发者。在当下这个人们重度依赖手机的时代，学习掌握安卓开发技术，一定能为你创造格外的价值。</p><p><strong>Android</strong>软件的开发包括原生开发和跨平台多端开发，其多样的开发方式能让我们能学到多种开发技术和创造出更多的可能。学习好<strong>Android</strong>开发，用技术创造艺术。</p><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>作为安卓开发者，我们的开发基础就是掌握如何使用<code>Java</code>语言进行<strong>Android</strong>原生开发。这时，有的小伙伴要问了，谷歌官方现在不是不推荐使用<code>Java</code>，转而推荐使用<code>Kotlin</code>开发了么？为什么我们不直接学习<code>Kotlin</code>呢。首先，让我们来看一下菜鸟教程中对<code>Kotlin</code>的定义。<strong>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的Swift，由 JetBrains 设计开发并开源。</strong><code>Kotlin</code>语言依旧是运行在Java虚拟机上面的；并且在很多的开源项目中，依旧使用的是<code>Java</code>，所以我们现在依旧要以<code>Java</code>为学习基础。</p><p>对于<code>Java</code>学习，我推荐先学会一些基本的Java语言特性及其基本使用再去学习<strong>Android</strong>开发，如果大家着急上手<strong>Android</strong>，可以到B站看18年尚学堂的教学视频学习，我们需要学习完多线程即可。下面是视频的链接</p><p><a href="https://www.bilibili.com/video/BV1st411v7Uo">（最新）尚学堂 JAVA300集附源码高清版_哔哩哔哩_bilibili</a></p><p>再接下来，我们需要一本好的<strong>Android</strong>入门书籍或者是学习视频，作如下的推荐</p><p>书籍：<strong>《第一行代码》第二版 ——郭霖</strong></p><p>学习视频：<a href="https://space.bilibili.com/44272436/channel/seriesdetail?sid=1272606">程序猿拉大锯的个人空间_哔哩哔哩_bilibili</a></p><h3 id="能力提升"><a href="#能力提升" class="headerlink" title="能力提升"></a>能力提升</h3><p>在掌握<strong>Android</strong>基础之后，我们除了实战去复现一些APP，还需要对这项技术进行深入了解；深入浅出，唯有深入，方能浅出。</p><p>我推荐大家边阅读<strong>《Android开发艺术探索》</strong>这本书，同时附上一份笔记博客：<a href="https://blog.csdn.net/willway_wang/category_9278890.html">《Android开发艺术探索》读书笔记_willwaywang6-CSDN博客</a></p><p>同时，我们不断去阅读官方的开发文档也是十分必要的，这个才是最一手的资料。英文阅读也许对我们来说有些困难，但我们不该让它成为我们变得更强的拦路虎</p><h3 id="更多的技能"><a href="#更多的技能" class="headerlink" title="更多的技能"></a>更多的技能</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>由于原生开发使用到的<code>Java</code>或是<code>Kotlin</code>都是运行在Java虚拟机上面的，我们是有必要去学习更多的<code>Java</code>知识的。如果你还是想看视频学习的话，我还是推荐尚学堂的视频，你可以继续看上面的旧版视频，也可以去B站搜索官方最新版的(使用IDEA开发的)。</p><p>相关书籍推荐：<strong>《Java核心技术卷》</strong>/<strong>《Java编程思想》</strong>，<strong>《深入理解Java虚拟机》</strong></p><h4 id="kotlin"><a href="#kotlin" class="headerlink" title="kotlin"></a>kotlin</h4><p>现在谷歌强力推荐<strong>Android</strong>开发者使用<code>Kotlin</code>进行开发，很多公司和从业者都已经转向使用<code>Kotlin</code>进行开发，并且几乎所有的<strong>Android</strong>大佬的博客代码都是使用<code>kotlin</code>；不仅如此，由于<code>Kotlin</code>与<code>Java</code>100%兼容，语法简介和更加高级等特性，使用<code>Kotlin</code>去开发<strong>Android</strong>软件在效率上是有极大提升的。作为<strong>Android</strong>开发者，我们很有必要去学习如何使用<code>Kotlin</code>开发软件。</p><p>这里推荐的入门书籍是：<strong>《第一行代码》第三版 ——郭霖</strong></p><h4 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h4><p><strong>Flutter</strong> 是 Google 推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 <code>Dart</code> 语言开发 App，一套代码同时运行在 iOS 和 Android平台(目前 <strong>Flutter</strong> 已经支持 iOS、Android、Web、Windows、macOS、Linux、Fuchsia)。Flutter的跨平台能力很强，因为它是以<strong>自绘UI+原生</strong>的方式来实现跨平台技术的，它利用自绘的引擎调用系统API绘制UI。而其他的跨平台技术，例如web APP，需要借助WebView渲染；或者<strong>React Native</strong>这种<strong>js+原生渲染</strong>的方式，其需要转化为原生控件；这些跨平台方案的性能都不如<strong>自绘UI+原生</strong>的方式要好。</p><p>使用<strong>Flutter</strong>开发软件，其优势不仅在于高性能的跨平台运行，其相对于原生开发有着更高的开发效率，<strong>Flutter</strong>的热重载能帮助我们更好的测试、构建UI、添加功能和修复错误。作为<strong>Android</strong>开发者，掌握<strong>Flutter</strong>无疑如虎添翼</p><p>学习<strong>Flutter</strong>推荐的书籍为：<strong>《Flutter实战.第二版》</strong>；同时，我们需要结合官方文档来学习，逐步复现出<strong>Flutter</strong>的官方示例APP——Gallery。下面给出<strong>Flutter中文网</strong>链接，该网站同时还包括《Flutter实战.第二版》电子版的入口和掘金的<strong>Flutter</strong>社区入口。</p><p><strong>Flutter中文网：</strong><a href="https://flutterchina.club/">Flutter中文网 (flutterchina.club)</a></p><p><strong>推荐的博客专栏：</strong><a href="https://blog.csdn.net/u010055819/category_9428149.html">Flutter相关_lifeidroid的专栏-CSDN博客</a></p><h4 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h4><p><strong>adb</strong>是什么，官方文档的解释是这样子的：<strong>Android</strong> 调试桥 (adb) 是一种功能多样的命令行工具，可让您与设备进行通信。<strong>adb</strong> 命令可用于执行各种设备操作（例如安装和调试应用），并提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。它是一种客户端-服务器程序。顾名思义，就是利用命令行连接设备和调试APP的工具，在开发过程中，我们很有必要去掌握它。网上很多教程教你怎么配置路径和使用电脑的命令行工具使用，其实最新版的<strong>Android studio</strong>中，只要安装配置好SDK，直接使用<strong>Android studio</strong>下栏的命令行工具<strong>Terminal</strong>就可以使用了，你可以直接输入<code>adb version</code>查看一下版本和路径。下附官方文档链接和常用命令博客链接。</p><p>官方文档：<a href="https://developer.android.com/studio/command-line/adb">Android 调试桥 (adb)  | Android 开发者  | Android Developers</a></p><p>博客：<a href="https://juejin.cn/post/7036000323990716423">聊一聊Android开发利器之adb - 掘金 (juejin.cn)</a></p><h3 id="一些回答"><a href="#一些回答" class="headerlink" title="一些回答"></a>一些回答</h3><ul><li><p><strong>劝退客户端？</strong></p><p>在你考虑客户端这一个学习方向的时候，相信会有很多劝退的言论。我来谈一谈我对这个方向的看法。</p><ol><li><strong>当下的客户端很难找工作么？</strong>其实不然，当下是客户端的初级开发者难找工作，但是<strong>市场中级和高级开发者的需求缺口是很大的</strong>。这其实是市场对人才的要求变得高了，不止于客户端，其他方向也是这样子的。</li><li><strong>客户端的学习很难？</strong>对比其他方向，客户端的入门学习的也许是稍微困难些。但我们要知道，每一个方向想要学好，都是不容易的，<strong>我们的目标不是要做一个入门的初级开发者</strong>。这并不应该成为左右我们选择的点。</li><li><strong>前端也可以写APP，客户端完全可以被替代？</strong>通过阅读上文，你也许了解到前端开发者可以有Web APP和React Native这两种开发跨平台APP的技术。先不说H5页面的Web APP使用起来的体验感有些糟糕，就连React Native这种<strong>js+原生渲染</strong>方式写出的APP，由于频繁与原生之间的通信，在渲染较多的页面会必不可免的会出现<strong>卡顿</strong>，且<code>js</code>带来的热更新也会<strong>降低APP的执行效率</strong>。所以，单纯使用前端技术写出来的跨端APP是有较多局限性的，<strong>客户端开发被替代是无稽之谈</strong>，熟悉原生开发的客户端开发者是必不可缺的。</li></ol></li><li><p><strong>加入工作室的付出和收获？</strong></p><ol><li>加入工作室你真正会付出的就是时间。那这个时间用来干什么呢？给老师打工？还是跟着师兄师姐学习？这些都会有，但不是每一个工作室这些的比例都一样，有些偏向于工作，有些偏向于学习。但有一点是相同的吗，那就是它们都会转变为你的收获。</li><li>你所收获的，就有很多了。包括一个学习技术和交流心得的环境和氛围、优秀师兄师姐经验传授、全流程的项目开发实战经验、寒暑假社会实践双创/志愿时长、来自大厂师兄的内推码以及一个成体系的团队协作经验等等，这些都是加入工作室所能带给你的，会让你的大学生活变得无比充实</li></ol></li><li><p><strong>没进工作室该怎么规划学习和提升？</strong></p><p>想要加入工作室，是需要经过层层考核的，那这意味着被淘汰的同学不好么？并不是的，工作室的考核是双向选择，千万不要因为这一次的不如意而否认自己，只不过是这一步稍微走慢或是走错罢了。</p><p>工作室的考核周期是比较长的，最难的其实是坚持，在这一路的坚持中，无论结果如何，你都已经收获很多，未来的学习中，依旧需要保持在考核阶段对技术的热忱和干劲。<strong>掌握上面所写的基础已经有能力去参加工作室考核了</strong>，再接下就可以来按着顺序去学习<strong>进阶</strong>和<strong>更多的技能</strong>部分的内容。学习过程中，我还有一些个人建议：</p><ol><li>数据结构、计算机组成原理、计算机网络和操作系统这类重难的专业课一定要学好，工作的彼时面试都是避不开的。</li><li>学习技术的时候，不要只看书籍或博客，一定要去看官方文档。<strong>Android</strong>的迭代很快，书籍和博客都会过时，但官方文档会不断维护更新的，官方文档才是最全的第一手的资料。</li><li>保持写博客的习惯，你看到的东西不是你的，你写得出来的才是你的。当你去写博客的时候，无形中你是在逼迫自己对这个知识在能力范围内近乎全面的深入学习和了解，也是将自己的学习转化为成果的方式</li><li>纸上得来终觉浅，绝知此事要躬行，计算机是实践的学科，阶段性学习的同时，我们需要在阶段性学习后去找一些开源项目用自己所学复现和找一些免费API写自己的APP。</li><li>积极的和别人交流，我们学习的过程中，一定会遇到一些问题是查阅不到的。这时候我们可以在掘金、StackOverflow等这些社区提问，在GitHub上提交<code>issue</code>，加入业内大佬的Q群讨论提问等这些方式解决我们的困惑。当然啦，当我们遇到我们懂的知识，也需要做一个爱好分享的好心人。</li><li>大胆去尝试，大学是我们的舞台，这个年纪的我们犯错成本是最低的，青春的我们有无限的可能！</li></ol></li></ul><p><strong>关注数智工作室，随时留意我们的招新动态和硬核分享</strong></p><p><img src="https://s2.loli.net/2022/02/10/21PulJyVUvQchjq.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数智工作室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数智工作室 </tag>
            
            <tag> 招新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减肥里的科学和How to 减肥</title>
      <link href="/2022/02/06/jian-fei-li-de-ke-xue-he-how-to-jian-fei/"/>
      <url>/2022/02/06/jian-fei-li-de-ke-xue-he-how-to-jian-fei/</url>
      
        <content type="html"><![CDATA[<h1 id="减肥里的科学和How-to-减肥"><a href="#减肥里的科学和How-to-减肥" class="headerlink" title="减肥里的科学和How to 减肥"></a>减肥里的科学和How to 减肥</h1><h2 id="1-热量公式"><a href="#1-热量公式" class="headerlink" title="1. 热量公式"></a>1. 热量公式</h2><blockquote><p>影响胖瘦最基本的因素：<strong>热量差</strong></p><p><strong>热量差</strong>=<strong>摄入热量</strong>ー<strong>消耗热量</strong></p><p>当摄入热量&gt;消耗热量，体重会增加</p><p>当消耗热量&gt;摄入热量，体重会减轻</p></blockquote><h2 id="2-摄入热量"><a href="#2-摄入热量" class="headerlink" title="2. 摄入热量"></a>2. 摄入热量</h2><blockquote><p><strong>摄入热量是指吃进去的一切食物产生的热量</strong></p><p>减肥是以<strong>天</strong>或者<strong>周</strong>为<strong>单位</strong>计算摄入热量</p><p>例1：一天需要消耗热量为2000kcal，早上狂吃1500kcal食物，中午和晚上不吃。</p><p>例2：三天需要消耗热量为6000kcal，第一天吃3000kcal食物，第二三天吃2000kcal食物。</p><p>那么摄入热量&lt;消耗热量=<strong>减肥成功</strong></p><p>(PS：个人不建议这样，这样会导致晚上或者第2天吃得更多导致长胖。还有就是<strong>一次性吃大量食物消耗不完会转化为脂肪存在体内</strong>)</p><p>例3：一天需要消耗热量为2000kcal，除正餐吃够2000kcal热量外，还可以吃些零食增加摄入热</p><p>那么摄入热量&gt;消耗热量=<strong>增重成功</strong></p><p>想减肥的吃不够，想增重的吃不进去怎么办？</p><p>减肥食物选择：热量低、饱腹感强</p><p>增重食物选择：热量高、饱腹感弱</p></blockquote><ul><li><p>减肥食物推荐</p><p><img src="https://s2.loli.net/2022/02/05/jPKtNbUd5klfzQw.png"></p></li></ul><h2 id="3-消耗热量"><a href="#3-消耗热量" class="headerlink" title="3.消耗热量"></a>3.消耗热量</h2><blockquote><p><strong>a运动</strong></p><p>不管是有氧运动还是无氧运动，心肺运动还是抗阻运动，只要动了热量就会有所消耗</p><p><strong>拿快递外卖、骑共享单车、洗碗、拖地都算是运动</strong></p><p><strong>想要减肥后不反弹，要适当做抗阻运动</strong></p><p><strong>b基础代谢</strong></p><p>基础代谢是指人体在18～25℃室温下，空腹、平卧并处于清醒、安静的状态称为基础状态。此时，维持心跳、呼吸等基本生命活动所必需的最低能量代谢，称基础代谢（BM）</p><p>基础代谢影响因素：</p><p><strong>①体重</strong>，体重越大基础代谢率越大</p><p><strong>②遗传基因</strong>，有些基因可能会导致肥胖</p><p><strong>③甲状腺激素</strong>，甲亢会导致基础代谢率升高</p><p><strong>④肠道菌群</strong>，有些肠道菌群可以帮助消化，提高代谢率</p></blockquote><ul><li><p>基础代谢计算公式**(久坐的工作x1.2,偶尔外出x1.5)**</p><p><img src="https://s2.loli.net/2022/02/05/Bzm9cnZHNTFwq4S.png"></p></li></ul><blockquote><p>1.问：为什么比较胖的人一开始瘦的特别快？</p><p>   答：瘦的快的原因是体重越大基础代谢越大</p><p>2.问：为什么有些人减肥减着就减不动了？</p><p>   答：因为在其他条件都不变的情况下，体重轻了，基础代谢也小了，消耗也少了。</p></blockquote><h2 id="4-肠道杆菌"><a href="#4-肠道杆菌" class="headerlink" title="4.肠道杆菌"></a>4.肠道杆菌</h2><blockquote><p><strong>肠道中一般存在两种细菌：厚壁菌门与拟杆菌门</strong></p><p><strong>厚壁菌</strong>：可以帮助人体更高效的从复杂的碳水化合物里吸收热量</p><p><strong>拟杆菌</strong>：则能够分解人体本身无法消化的多糖（如纤维素等）再向宿主提供营养的同时也为自己和肠道中的其他细菌获得食物。</p><p>一般吃不胖的人肠道中的：拟杆菌&gt;厚壁菌</p><p>一般喝水都胖的人肠道中：拟杆菌&lt;厚壁菌</p><p><strong>如果想长胖，可以多吃热量高、淀粉含量高的食物，增加肠道内厚壁菌的数量</strong></p><p><strong>如果想减肥，可以经常吃纤维多的食物，例如蔬菜、粗粮，增加肠道中拟杆菌的数量</strong></p></blockquote><h2 id="5-饮食"><a href="#5-饮食" class="headerlink" title="5.饮食"></a>5.饮食</h2><blockquote><p><strong>1.维生素与胖瘦</strong></p><p><strong>维生素C</strong></p><p>长期缺乏维生素C，容易越来越胖。维生素C能合成肉碱，促进脂肪代谢，加速脂肪的分解和燃烧。</p><p>新陈代谢的过程中，如果肉碱含量不足，就会导致脂肪囤积，形成脂肪组织。研究发现维生素C摄入充足的人，运动时燃烧的脂肪比维生素摄入不足的人要多30%。</p><p><strong>维生素D</strong>是人体制造瘦素所必需的。瘦素是一种可控制人食欲的激素，它会使人在进餐后产生吃饱的感觉，从而停止进食。</p><p>人体内的瘦素含量若不断降低，胃口就会越来越大，从而更容易患上肥胖症。所以，控制卡路里减肥时，多吸收维生素D可以帮助减肥瘦身的人更加轻松地减肥。</p><p><strong>2.暴饮暴食与不吃早饭</strong></p><p>当你暴饮暴食时，<strong>多吃入的食物会在体内转化为脂肪储存导致长胖</strong>。</p><p>不吃早餐，午饭会吃得更多，导致长胖，长期不吃早饭还可能导致胆结石、胃炎肠道疾病。</p><p><strong>3.饮食结构与胖瘦</strong></p><p>长期以高油、高糖食物为主食的人普遍偏胖(例如炸鸡、披萨、薯条)</p><p><strong>长期以蔬菜、粗粮食物为主食的人普遍偏瘦</strong></p></blockquote><h2 id="6-褐色脂肪与肥瘦的关系"><a href="#6-褐色脂肪与肥瘦的关系" class="headerlink" title="6.褐色脂肪与肥瘦的关系"></a>6.褐色脂肪与肥瘦的关系</h2><blockquote><p>人体内一般包含两种脂肪：白色脂肪与褐色脂肪</p><p><strong>白色脂肪</strong>的主要功能是将体内多余的能量以脂肪的形式储存起来，当我们摄入过多热量时，就会引起肥胖。</p><p><strong>褐色脂肪</strong>的主要特性是消耗能量。棕色脂肪类似于一个“产热器”，它的主要功能就是生热（帮助我们在寒冷的环境下维持体温）。生热需要消耗能量（卡路里）</p><p>褐色脂肪的主要功能是产热，它的产热能力是肝脏的60倍，是肌肉有氧的情况下产热量的10倍。研究发现：仅50克的褐色脂肪可以燃烧的热量可以达到人的基础代谢的20%。</p><p>年龄越大、体形越胖，体内褐色脂肪越少；</p><p>年龄越小、体型越瘦，体内褐色脂肪越多；</p><p>降低温度，体内褐色脂肪就更活跃；</p><p><strong>女人体内比男人更多有褐色脂肪</strong>。</p><p>如何增加体内褐色脂肪</p><p><strong>1.养成良好规律的睡眠习惯，保证充足睡眠</strong></p><p>睡眠激素—褪黑素，会影响褐色脂肪，在一项大鼠研究中发现：具有较高褪黑素的大鼠，拥有更多的褐色脂肪。</p><p><strong>2.每周适当运动</strong></p><p>日常生活中，坚持每天半小时以上的中强度运动，如慢跑、快走、游泳等可以调动褐色脂肪，增加褐色脂肪活性。</p></blockquote><h2 id="7-如何科学减肥呢"><a href="#7-如何科学减肥呢" class="headerlink" title="7.如何科学减肥呢"></a>7.如何科学减肥呢</h2><ul><li><p>饮食习惯</p><blockquote><ol><li>热量要按天控制，尽量吃食物推荐表里面的低热量食物(一般比较香的食物是高热量食物)</li><li>吃饭切记细嚼慢咽和喝清汤，这是给自己饱腹感</li><li>每天给自己<strong>部分能量</strong>来自<strong>粗粮</strong>或者<strong>水果蔬菜</strong></li><li><strong>一定要吃早餐</strong></li></ol></blockquote></li><li><p>作息</p><blockquote><ol><li>早睡早起，12点睡觉，8点起床</li><li>规律午觉时间，尽量每天同一时间睡午觉，周末也不例外</li><li>算上走路等，每天最好有40分钟运动事件。可以是跑步，也可以单纯走快点</li></ol></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 科学减肥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 减肥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 Activity(看得见的活动)|《第一行代码》笔记</title>
      <link href="/2022/02/04/di-er-zhang-activity-kan-de-jian-de-huo-dong/"/>
      <url>/2022/02/04/di-er-zhang-activity-kan-de-jian-de-huo-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-活动是什么"><a href="#1-活动是什么" class="headerlink" title="1. 活动是什么"></a>1. 活动是什么</h2><p>活动是一个包含用户界面的组件，可以理解为一个APP中的页面，是直接展示给用户的组件。</p><h2 id="2-活动创建步骤"><a href="#2-活动创建步骤" class="headerlink" title="2.活动创建步骤"></a>2.活动创建步骤</h2><blockquote><ol><li>项目中new一个<code>Empty Activity</code>,勾选<code>Generate Layout File</code>为<code>Activity</code>自动创建一个布局文件</li><li>在<strong>res/layout</strong>下找到与你刚创建的<code>Activity</code>绑定的布局文件，在布局文件中添加对应组件和编辑布局</li><li>在<strong>AndroidManifest.xml</strong>中注册声明该活动</li></ol></blockquote><p>主活动配置代码</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.actoin.MAIN<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-活动的简单使用"><a href="#3-活动的简单使用" class="headerlink" title="3. 活动的简单使用"></a>3. 活动的简单使用</h2><h3 id="3-1-活动中使用Toast的代码"><a href="#3-1-活动中使用Toast的代码" class="headerlink" title="3.1 活动中使用Toast的代码"></a>3.1 活动中使用Toast的代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//直接在对应的FirstActivity中编辑下列</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在Activity创建阶段就创建绑定好显示型组件</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重写方法的时候，继承原方法特性</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定布局文件</span>    <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新建和绑定组件</span>    button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//为Button组件设置监听事件</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//设置监听到button1被按下时候执行下列事件</span>            <span class="token comment">//通过静态方法makeText创建出一个Toast对象，其三个参数分别为Context,Text,Time;再链式调用show()方法显示</span>            <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"You click Button"</span><span class="token punctuation">,</span>                          <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-活动中使用Menu的代码"><a href="#3-2-活动中使用Menu的代码" class="headerlink" title="3.2 活动中使用Menu的代码"></a>3.2 活动中使用Menu的代码</h3><blockquote><p>到资源文件夹中新建<strong>menu</strong>文件夹，在该文件夹中新建<strong>menu</strong>资源文件</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--menu资源文件，此处为简单试用，只需添加id和title属性--&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/add_item<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Add<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/remove_item<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Remove<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>回到<strong>FirstActivity</strong>中重写关于<strong>menu</strong>的对应方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在OnCreate方法之外编写以下的方法，inflater(充气机)</span><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span><span class="token class-name">Menu</span> menu<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//重写该方法载入绑定menu资源文件</span>       <span class="token function">getMenuInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span>main<span class="token punctuation">,</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用该方法绑定</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//true为显示menu,false为不显示</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">MenuItem</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//重写该方法，定义菜单响应事件</span>       <span class="token keyword">switch</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>add_item<span class="token operator">:</span>               <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"You clicked add_item"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>remove_item<span class="token operator">:</span>               <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"You clicked remove_item"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">default</span><span class="token operator">:</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//记得返true</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-使用Intent在活动中穿梭"><a href="#4-使用Intent在活动中穿梭" class="headerlink" title="4. 使用Intent在活动中穿梭"></a>4. 使用Intent在活动中穿梭</h2><h3 id="4-1-显式Intent"><a href="#4-1-显式Intent" class="headerlink" title="4.1 显式Intent"></a>4.1 显式Intent</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//新建SecondActivity之后，使用Intent从FirstActivity跳转到SecondActivity中</span><span class="token comment">//修改FirstActivity为</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//new一个Intent重载</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用startActivity()重载</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-隐式Intent"><a href="#4-2-隐式Intent" class="headerlink" title="4.2 隐式Intent"></a>4.2 隐式Intent</h3><blockquote><p>概述：恰如其意，隐式调用不直接指明某一个类，而是指定<code>action</code>和<code>category</code>(类别)等信息，让系统去分析应该跳转到哪个app的哪个活动之中。</p><p>注意：</p><ol><li>目标<strong>Activity</strong>需要在<strong>AndroidManifest.xml</strong>文件中配置好<code>&lt;intent-filter&gt;</code>的内容，指定好能响应的<code>action</code>和<code>category</code>等信息。而在执行<code>Intent</code>的<strong>Activity</strong>中，也需要同时匹配上这对应的<code>action</code>和<code>category</code>，活动才可以响应。</li><li>每个<code>Intent</code>中只能指定一个<code>action</code>,但是却可以同时指定多个<code>category</code>，<code>category</code>是包含了附加信息的标签，其功能是让<code>Intent</code>精准定位到对应的<strong>Activity</strong>中。由于<code>action</code>的编写是相对统一的，例如手机中的浏览器都具有被调用打开网页的功能，而它们配置的<code>action</code>都是“<code>Intent.ACTION_VIEW</code>”；多个<code>category</code>的作用在于，当我想固定调用QQ浏览器时，在<code>Intent</code>跳转的时候载入QQ浏览器中配置的<code>category</code>标签即可无需选择直接打开QQ浏览器。</li><li>配置<code>&lt;data&gt;</code>标签，详细看下例</li></ol></blockquote><ul><li><p>普通调用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AndroidManifest.xml文件中SecondActivity的配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.activitytest.ACTION_START<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Activiy中的Intent跳转</span> button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//此处无需指定category，因为它是默认的，调用startActivity的时候会自动添加进去</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.example.activitytest.ACTION_START"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多category调用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AndroidManifest.xml文件中SecondActivity的配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.activitytest.ACTION_START<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.activitytest.MY_CATEGORY<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Activiy中的Intent跳转</span> button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.example.activitytest.ACTION_START"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//此处配置文件中有多个category，需要指定非默认的category</span>                intent<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span><span class="token string">"com.example.activitytest.MY_CATEGORY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带<code>&lt;data&gt;</code>标签的用法</p><blockquote><p><code>&lt;data&gt;</code>标签用于更精确地指定当前活动能够响应什么类型的数据，主要可以配置以下活动</p><p><strong>tips</strong>：下面涉及到计算机网络的知识，入门可以参考<a href="https://pan.baidu.com/share/init?surl=KlvowIliskjXrIwAdeUi9A">《图解HTTP》</a>(提取码：6gpm)</p><p><strong>android:scheme</strong>  用于指定数据的协议部分，如下边的http部分</p><p><strong>android:host</strong>  指定数据的主机名部分，如下边的<a href="http://www.baidu.com部分/">www.baidu.com部分</a></p><p><strong>android:port</strong>  用于指定数据的端口部分，一般紧随在主机名之后</p><p><strong>android:path</strong>  用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容</p><p><strong>android:mimeType</strong>  用于指定可以处理的数据类型，允许使用通配符的方式进行指定</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//此处键入对应的的data，Uri.parse方法把字符串解析为uri对象</span>               intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//跳转到系统拨号界面</span>               <span class="token comment">//Intent intent = new Intent(Intent.ACTION_DIAL);</span>               <span class="token comment">//intent.setData(Uri.parse("tel:10086"));</span>               <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--AndroidManifest.xml文件中ThirdActivity的配置，指定了数据协议必须是http--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.ThirdActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.VIEW<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--其他协议：--&gt;</span><span class="token comment">&lt;!--geo表示显示地理位置--&gt;</span><span class="token comment">&lt;!--tel表示拨打电话--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上例中的<strong>http</strong>协议在<strong>Android7</strong>中适用，但是在<strong>Android9</strong>中开始不适用.新版本默认支持<strong>https</strong>，<a href="https://www.jianshu.com/p/97519d17056a">点击查看区别</a></p><p>我们需要在<strong>AndroidManifest.xml</strong>中如下配置，以支持<strong>HTTP</strong>明文</p><p>法1:在<strong>res</strong>目录下新建<strong>xml</strong>目录，在该目录下新建配置文件 <strong>network_security_config.xml</strong>，内容为：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<strong>AndroidManifest.xml</strong>文件的<code>applicaiton</code>段增加了<code>networkSecurityConfig</code>一行</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>             <span class="token attr-name">...</span> <span class="token attr-name"><span class="token namespace">android:</span>networkSecurityConfig</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@xml/network_security_config<span class="token punctuation">"</span></span>             <span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>法2：直接在<strong>AndroidManifest.xml</strong>文件的<code>applicaiton</code>段增加了<code>usesCleartextTraffic</code>一行</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>             <span class="token attr-name">...</span> <span class="token attr-name"><span class="token namespace">android:</span>usesCleartextTraffic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>             <span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><h3 id="4-3-利用Intent向下一个活动传数据"><a href="#4-3-利用Intent向下一个活动传数据" class="headerlink" title="4.3 利用Intent向下一个活动传数据"></a>4.3 利用Intent向下一个活动传数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FirstActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">"Hello Word"</span><span class="token punctuation">;</span>            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"extra_data"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个参数是键，第二个参数是真正的value（数据）</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//调用封装的方法传递数据</span>            <span class="token comment">//SecondActivity.actionStart(FirstActivity.this, "data1", "data2");</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SecondActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>second_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> data <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"extra_data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对应的还有：getIntExtra(),getBooleanExtra()等方法</span><span class="token punctuation">}</span><span class="token comment">//将传递数据的功能封装，方便之后的调用</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionStart</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> data1<span class="token punctuation">,</span> <span class="token class-name">String</span> data2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> data1<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-利用Intent向上一个活动返回数据"><a href="#4-4-利用Intent向上一个活动返回数据" class="headerlink" title="4.4 利用Intent向上一个活动返回数据"></a>4.4 利用Intent向上一个活动返回数据</h3><blockquote><p><code>startActivityForResult(Intent intent,int requestCode )</code> 该方法也是用于启动活动的，但这个方法期望在下一个活动被销毁的时候能够返回一个结果给本活动。顾名思义，该函数声明本活动允许接受下一个活动返回的结果</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FirstActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第二个参数的请求码只需要唯一即可，在重写OnActivityResult()方法的时候会使用到。建议取大于1的值</span>         <span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在SecondActivity销毁的时候会回调这一个方法</span><span class="token comment">/*** @param requestCode 请求码，对应为startActivityForResult中的1* @param resultCode 返回数据的结果，对应为setResult()的第一个参数* @param data 数据，即对应的Intent*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> <span class="token class-name">Intent</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>requestCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//startActivityForResult(Intent intent,int requestCode )传入的1</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultCode <span class="token operator">==</span> RESULT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> returnedData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"data_return"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"FirstActivity"</span><span class="token punctuation">,</span> returnedData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SecondActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"SecondActivity"</span><span class="token punctuation">,</span> <span class="token string">"Task id is "</span> <span class="token operator">+</span> <span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>second_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Button</span> button2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    button2<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//在点下button后向上一活动发送返回值，并且关闭该活动</span>            <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"data_return"</span><span class="token punctuation">,</span> <span class="token string">"Hello FirstActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//本方法专门用于返回处理结果，第一个参数可选RESULT_OK或RESULT_CANCELED两个值，第二个则为带数据的intent</span>    <span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_OK<span class="token punctuation">,</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//实现在直接按返回键的时候也达到一样的功能</span>    <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"data_return"</span><span class="token punctuation">,</span> <span class="token string">"Hello FirstActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_OK<span class="token punctuation">,</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>温馨提示：最新的sdk中，<code>startActivityForResult</code>方法已经被弃用，想了解和掌握新的API使用方法，参照下面的两篇博客</p><p><a href="https://guolin.blog.csdn.net/article/details/121063078?spm=1001.2014.3001.5502">Activity Result API详解，是时候放弃startActivityForResult了_郭霖的专栏-CSDN博客</a></p><p><a href="https://blog.csdn.net/hx7013/article/details/120916287?spm=1001.2014.3001.5502">startActivityForResult被标记为弃用后，如何优雅的启动Activity?_葫芦娃-CSDN博客</a></p><h2 id="5-活动的生命周期"><a href="#5-活动的生命周期" class="headerlink" title="5. 活动的生命周期"></a>5. 活动的生命周期</h2><h3 id="5-1-活动状态"><a href="#5-1-活动状态" class="headerlink" title="5.1 活动状态"></a>5.1 活动状态</h3><p><a href="https://developer.android.google.cn/guide/components/activities/state-changes">官方指南</a></p><blockquote><ol><li><strong>运行状态</strong>：活动处于栈顶的时候，系统最不愿回收</li><li><strong>暂停状态</strong>：不在栈顶，但仍可见(部分可见)的活动；即跳出一个小弹窗后，下方被覆盖的活动即属于暂停状态。系统也不愿回收</li><li><strong>停止状态</strong>：不在栈顶，不可见的活动；即被新的Activity完全覆盖的活动，系统可能回收</li><li><strong>销毁状态</strong>：不在栈中的活动；即被<code>finish()</code>的活动，系统最愿意回收</li></ol></blockquote><h4 id="5-2-活动的生存期"><a href="#5-2-活动的生存期" class="headerlink" title="5.2 活动的生存期"></a>5.2 活动的生存期</h4><p><a href="https://developer.android.google.cn/guide/components/activities/activity-lifecycle">官方指南</a></p><blockquote><ol><li><strong>完整生存期</strong></li><li><strong>可见生存期</strong></li></ol></blockquote><p><img src="https://s2.loli.net/2022/02/04/TF1oHg4rf6bJdlx.png"></p><blockquote><ol><li><code>onCreate()</code>  活动第一次创建的时候会调用这个方法，我们需要在这个方法中完成活动的初始化操作，例如加载布局文件和绑定事件。接下来就进入到<code>onStart()</code>中</li><li><code>onStart()</code>  活动由不可见变可见，<strong>Activity</strong>进入前台，但是仍无法交互。当 <strong>Activity</strong> 进入已开始状态时，与 <strong>Activity</strong> 生命周期相关联的所有生命周期感知型组件都将收到 <code>ON_START</code>事件。，这个状态会迅速完成，进入到<code>onResume()</code>中</li><li><code>onResume()</code>   活动进入到可交互阶段，即正常使用的状态。此时活动一定位于栈顶，正在运行阶段</li><li><code>onPause()</code>  此方法表示Activity不再处于前台(多窗口模式时也是)，但仍然可见。这个方法是暂停，在准备去启动或者恢复另一个活动的时候调用。譬如弹出弹窗，或者在多窗口模式下点击另一活动的时候；本活动便调用<code>onPause()</code>方法，且不处于焦点之中。这时候，系统会释放掉一些与界面无关的消耗CPU的资源。</li><li><code>onStop()</code>  该方法在活动完全不可见的时候调用，此时活动被完全覆盖，进入了停止状态。对应的与界面有关的效果会停止更新或者粗略更新。<strong>我们能重写该方法，在活动调用该方法的时候保存应用或者用户数据、进行网络调用或者执行数据库事务</strong></li><li><code>onDestroy()</code>  在活动被销毁前调用该方法，包括①<strong>Activity</strong>即将结束(被彻底关闭或执行了<code>finish()</code>)； ②配置变更(设备旋转或执行了多窗口模式)，<strong>Activity</strong>被暂时销毁，之后还会重新启用<code>onCreate()</code>。我们可以在该回调释放前面回调未释放的资源。当然，我们也可以配置使得当配置变更时不会执行此回调，这样子在启动全屏播放视频时候不会出现差的用户体验</li><li><code>onRestart()</code>  由<code>onStop()</code>变为<code>onStart()</code>前调用。即被覆盖的页面重新被打开的时候，需要被调用。</li></ol></blockquote><h3 id="5-3-活动被回收怎么办"><a href="#5-3-活动被回收怎么办" class="headerlink" title="5.3 活动被回收怎么办"></a>5.3 活动被回收怎么办</h3><p>前言：当活动被回收之后，再次打开会使用到<code>onCreate()</code>而不是使用<code>onStart()</code>,这种情况下的活动是被重新创建的。当活动被重新创建，我们在页面中保存的数据（譬如输入文本框中的文字）会被清除掉，这样会严重影响用户的使用体验。</p><p>解决方法(类似Intent)：</p><ol><li><p>使用<code>onSaveInstanceState()</code>回调方法，此方法保证活动被回收前一定会被调用。重写此方法能将被回收活动的数据保存下来,以便重新创建活动的时候能够复现出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> tempData <span class="token operator">=</span> <span class="token string">"Something you just typed"</span><span class="token punctuation">;</span>    <span class="token comment">//该参数下的链式方法包括 putString() putInt() 等</span>    <span class="token comment">//对应方法的参数是键值对形式，第一个参数是键，第二个参数是值</span>    outState<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"data_key"</span><span class="token punctuation">,</span>tempData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对应的，我们也需要在<code>onCreate()</code>中处理Bundle类型的数据，让其在重新创建的时候复现出来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> tempData <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data_key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>tempData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>Tips:上例是Bundle数据的存储和取出方式。我们可以把Bundle数据存储到Intent中，然后借助Intent来进行数据传输</p><h2 id="6-活动的启动模式"><a href="#6-活动的启动模式" class="headerlink" title="6.活动的启动模式"></a>6.活动的启动模式</h2><blockquote><p>我们可以通过在<strong>AndroidManifest.xml</strong>中给<activity>标签指定<strong>android:launchMode</strong>的属性，即可确定活动的启动方式</activity></p></blockquote><h3 id="6-1-standard"><a href="#6-1-standard" class="headerlink" title="6.1 standard"></a>6.1 standard</h3><blockquote><p>不会在乎活动是否在返回栈中存在，每次启动都会创建一个新的实例(系统默认的)</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/WOzynQJ9FIBigtk.png"></p><h3 id="6-2-singleTop"><a href="#6-2-singleTop" class="headerlink" title="6.2 singleTop"></a>6.2 singleTop</h3><blockquote><p>启动的时候如果发现返回栈的栈顶是该活动，则不会启动新的，直接使用。否则，启动新的活动</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/fFZL9GYj1pgHtI6.png"></p><h3 id="6-3-singleTask"><a href="#6-3-singleTask" class="headerlink" title="6.3 singleTask"></a>6.3 singleTask</h3><blockquote><p>每次启动该活动的时候，系统首先会在返回栈中检查是否存在该活动的实例，如果发现已经存在该活动的实例，则直接使用该实例，并把在这个活动之上的所有活动<strong>全部出栈</strong>。若不存在该实例，则创建一个新的活动实例。</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/hR64fdV73tLTMJm.png"></p><h3 id="6-4-singleInstance"><a href="#6-4-singleInstance" class="headerlink" title="6.4 singleInstance"></a>6.4 singleInstance</h3><blockquote><p>假设我们的程序中有一个活动是<strong>允许其他程序调用</strong>的(例如从一个APP的广告页面点击到达购物软件的商品详情窗口)，我们需要实现其他程序和我们的程序可以共享这个活动的实例，就要使用到singleInstance。这个共享的实例有自己单独的一个返回栈来管理活动(譬如返回栈B)。</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/Bv4Xoe2FJminxdU.png"></p><h2 id="7-活动的最佳实践"><a href="#7-活动的最佳实践" class="headerlink" title="7. 活动的最佳实践"></a>7. 活动的最佳实践</h2><h3 id="7-1-知晓当前活动"><a href="#7-1-知晓当前活动" class="headerlink" title="7.1 知晓当前活动"></a>7.1 知晓当前活动</h3><blockquote><p>写<strong>BaseActivity</strong>,在该类中加入<code>Log.d("BaseActivity", getClass().getSimpleName());</code>；让所有的<strong>Activity</strong>继承<strong>BaseActivity</strong>，这样子就能每个<strong>Activity</strong>都打印出来了</p></blockquote><h3 id="7-2-设置能随时退出程序"><a href="#7-2-设置能随时退出程序" class="headerlink" title="7.2 设置能随时退出程序"></a>7.2 设置能随时退出程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ActivityCollector</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivityCollector</span> <span class="token punctuation">{</span><span class="token comment">//此类用于管理活动，对活动入栈、出栈和清栈</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Activity</span><span class="token punctuation">&gt;</span></span> activities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addActivity</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        activities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeActivity</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        activities<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">finishAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Activity</span> activity <span class="token operator">:</span> activities<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activity<span class="token punctuation">.</span><span class="token function">isFinishing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                activity<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//BaseActivity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"BaseActivity"</span><span class="token punctuation">,</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ActivityCollector</span><span class="token punctuation">.</span><span class="token function">addActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用入栈</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ActivityCollector</span><span class="token punctuation">.</span><span class="token function">removeActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用出栈</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ThirdActivity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"ThirdActivity"</span><span class="token punctuation">,</span> <span class="token string">"Task id is "</span> <span class="token operator">+</span> <span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>third_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Button</span> button3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_3<span class="token punctuation">)</span><span class="token punctuation">;</span>        button3<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ActivityCollector</span><span class="token punctuation">.</span><span class="token function">finishAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用清栈</span>                <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">killProcess</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//杀掉当前线程</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-启动活动最佳写法"><a href="#7-3-启动活动最佳写法" class="headerlink" title="7.3 启动活动最佳写法"></a>7.3 启动活动最佳写法</h3><blockquote><p>优点：在实际合作开发对接中，让对接者直观了解启动本活动需要传递哪些数据</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SecondActivity</span><span class="token comment">//将传递数据的功能封装，方便之后的调用。让调用者直观了解需要传入什么数据</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionStart</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> data1<span class="token punctuation">,</span> <span class="token class-name">String</span> data2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> data1<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FirstActivity</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//调用封装的方法传递数据</span>            <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token function">actionStart</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"data1"</span><span class="token punctuation">,</span> <span class="token string">"data2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android第一行代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 安卓开发整体介绍|《第一行代码》笔记</title>
      <link href="/2021/12/14/di-yi-zhang-an-zhuo-kai-fa-zheng-ti-jie-shao-kai-shi-qi-cheng/"/>
      <url>/2021/12/14/di-yi-zhang-an-zhuo-kai-fa-zheng-ti-jie-shao-kai-shi-qi-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="1-1-系统架构"><a href="#1-1-系统架构" class="headerlink" title="1.1 系统架构"></a>1.1 系统架构</h3><p><img src="https://i.loli.net/2021/10/09/iFWTetAq6OBwRZn.png" alt="Android架构图"></p><h4 id="1-1-1-Linux内核层"><a href="#1-1-1-Linux内核层" class="headerlink" title="1.1.1 Linux内核层"></a>1.1.1 Linux内核层</h4><ul><li>允许写底层硬件驱动</li><li>依靠Linux执行底层功能，例如线程和低层内存管理</li></ul><h4 id="1-1-2-硬件抽象层（HAL）"><a href="#1-1-2-硬件抽象层（HAL）" class="headerlink" title="1.1.2 硬件抽象层（HAL）"></a>1.1.2 硬件抽象层（HAL）</h4><ul><li>为特定类型硬件实现界面，例如相机和蓝牙模块。在API框架层要访问该硬件时，Android系统就是向API框架层提供此界面。</li></ul><h4 id="1-1-3-系统运行库层"><a href="#1-1-3-系统运行库层" class="headerlink" title="1.1.3 系统运行库层"></a>1.1.3 系统运行库层</h4><ul><li><p>本层中系统组件等（例如ART和HAL）使用到的是C/C++库提供的特性支持。例如SQLite提供的数据库，OpenGL ES 提供的2D/3D绘图，Webkit提供的浏览器内核。<br>如果在应用层需要使用到C/C++的代码，则需要Android NDK来访问这些原生库。</p></li><li><p>除了上述的库，还有Android运行时库。Android的核心库中可提供Java API框架的大部分功能，我们也可以使用Java语言编Android应用。此外，Android还包含了一款虚拟机——<a href="https://source.android.com/devices/tech/dalvik/index.html?hl=zh-cn">ART</a>(Android Runtime)，在Android 5.0前使用的是Dalvik，现在的ART是Dalvik的改进版。ART使得每一个应用都能运行在<strong>独立的进程</strong>中。</p></li><li><p>ART 编写执行 DEX 文件,DEX可以在低内存设备上运行多个虚拟机，其是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。其中编译工具链（例如 <a href="https://source.android.com/source/jack.html?hl=zh-cn">Jack</a>)）将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台上运行。</p></li></ul><blockquote><h5 id="ART特性"><a href="#ART特性" class="headerlink" title="ART特性"></a>ART特性</h5><h6 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1. 预编译"></a>1. 预编译</h6><p>Dalvik 中的应用每次运行时，字节码都需要通过即时编译器 JIT 转换为机器码，这会使得应用的运行效率降低。在 ART 中，系统在安装应用时会进行一次预编译（AOT，Ahead-Of-Time），将字节码预先编译成机器码并存储在本地，这样应用就不用在每次运行时执行编译了，运行效率也大大提高。</p><h6 id="2-垃圾回收算法"><a href="#2-垃圾回收算法" class="headerlink" title="2. 垃圾回收算法"></a>2. 垃圾回收算法</h6><p>在 Dalvik 采用的垃圾回收算法是<strong>标记-清除算法</strong>，启动垃圾回收机制会造成两次暂停（一次在遍历阶段，另一次在标记阶段）。而在 ART 下，GC 速度比 Dalvik 要快，这是因为应用本身做了垃圾回收的一些工作，启动 GC 后，不再是两次暂停，而是一次暂停，而且 ART 使用了一种新技术（packard pre-cleaning），在暂停前做了许多事情，减轻了暂停时的工作量。</p><h6 id="3-64-位"><a href="#3-64-位" class="headerlink" title="3. 64 位"></a>3. 64 位</h6><p>Dalvik 是为 32 位 CPU 设计的，而 ART 支持 64 位并兼容 32 位 CPU，这也是 Dalvik 被淘汰的主要原因。</p></blockquote><h4 id="1-1-4-应用框架层-Java-API框架"><a href="#1-1-4-应用框架层-Java-API框架" class="headerlink" title="1.1.4 应用框架层(Java API框架)"></a>1.1.4 应用框架层(Java API框架)</h4><ul><li>提供构建程序的各种API框架，Android系统自身会用到，我们开发应用也会用到</li></ul><h4 id="1-1-5-应用层"><a href="#1-1-5-应用层" class="headerlink" title="1.1.5 应用层"></a>1.1.5 应用层</h4><ul><li>本层包括系统自身的应用，也包括我们开发或者下载安装的应用。就是手机软件，是对使用者最直观的体现。</li></ul><h3 id="1-2-Android应用开发特性"><a href="#1-2-Android应用开发特性" class="headerlink" title="1.2 Android应用开发特性"></a>1.2 Android应用开发特性</h3><ul><li><p><strong>四大组件</strong></p><blockquote><p>Activity： 程序的页面<br>Service：后台服务，例如后台闹钟，自动定位<br>Broadcast Receiver：接收来自各处的广播<br>Content Provider：使得程序之间可以共享数据，例如读取电话簿的联系人</p></blockquote></li><li><p><strong>各种系统控件</strong>，例如按钮输入框啥的</p></li><li><p><strong>SQLite数据库</strong>，也可借用第三方库(LitePal)更容易上手</p></li><li><p><strong>多媒体</strong>，使用程序控制音乐、视频等</p></li><li><p><strong>定位</strong>，可借用定位开发很多功能</p></li></ul><h2 id="2-开发工具"><a href="#2-开发工具" class="headerlink" title="2. 开发工具"></a>2. 开发工具</h2><ul><li>现在的Android studio 已经更新到4的版本了，界面相比以前更美观，多了许多功能等，实际上手体验即可</li></ul><h2 id="3-资源文件"><a href="#3-资源文件" class="headerlink" title="3. 资源文件"></a>3. 资源文件</h2><h3 id="3-1-无需过多关心的文件"><a href="#3-1-无需过多关心的文件" class="headerlink" title="3.1 无需过多关心的文件"></a>3.1 无需过多关心的文件</h3><blockquote><ul><li>.gradle 和.idea </li><li>build</li><li>gradle：支持gradle自下载</li><li> gradle.properties</li><li>gradlew/gradlew.bat：第一个mac/Linux系统的，第二个win系统的</li><li>xxx.iml：IDEA自生成</li><li>setting.gradle</li></ul></blockquote><h3 id="3-2-gitignore"><a href="#3-2-gitignore" class="headerlink" title="3.2 .gitignore"></a>3.2 .gitignore</h3><ul><li>在这可指定啥目录不关联到git</li></ul><h3 id="3-3-local-properties"><a href="#3-3-local-properties" class="headerlink" title="3.3 local.properties"></a>3.3 local.properties</h3><ul><li>本机的Android SDK路径，我之前把sdk安装到了d盘，那么这里就需要更改一下路径</li></ul><h3 id="3-4-app"><a href="#3-4-app" class="headerlink" title="3.4 app"></a>3.4 app</h3><ul><li>build：不用理</li><li>libs：使用到第三方jar包的时候放这</li><li>androidTest：可在此对项目编写一些自动化测试</li><li>main/java：所有java代码</li><li>main/res：各种资源目录</li><li>main/AndroidManifest.xml：项目的配置文件，四大组件、各种权限都要在这里注册</li><li>test：另一种自动测试</li><li>.gitignore：和上边的作用一样</li><li>app.xml：IDEA自生成</li><li>build.gradle</li><li>proguard-rule.pro：指定代码的混淆规则，如果不希望代码被破解者容易阅读的话</li></ul><h3 id="3-5-build-gradle"><a href="#3-5-build-gradle" class="headerlink" title="3.5 build.gradle"></a>3.5 build.gradle</h3><ul><li><p>AS是采用Gradle来构建整个项目的</p><h4 id="3-5-1-外层"><a href="#3-5-1-外层" class="headerlink" title="3.5.1 外层"></a>3.5.1 外层</h4><p><img src="https://i.loli.net/2021/10/09/DB8MzgyZhnLJb9c.png"></p></li><li><p>由上图可以看出两处的repositories都包含google()和jcenter(),这是我们声明要引用这些代码仓库的开源项目</p></li><li><p>接下来dependencies处使用classpath声明了一个插件，是因为需要使用这样一个Android插件来利用Gradle构建项目（Gradle不是专为Android开发的）</p></li></ul><h4 id="3-5-2-内层"><a href="#3-5-2-内层" class="headerlink" title="3.5.2 内层"></a>3.5.2 内层</h4><p><img src="https://i.loli.net/2021/10/09/xLc4mzpWFeaCDtv.png"></p><h3 id="3-6-AndroidManifest-xml"><a href="#3-6-AndroidManifest-xml" class="headerlink" title="3.6 AndroidManifest.xml"></a>3.6 AndroidManifest.xml</h3><p><img src="https://i.loli.net/2021/10/09/rgW7vHw5SoplJfk.png"></p><h3 id="3-7-res资源文件"><a href="#3-7-res资源文件" class="headerlink" title="3.7 res资源文件"></a>3.7 res资源文件</h3><p><img src="https://i.loli.net/2021/10/09/5rBj9DJGylaxQWv.png"></p><h2 id="4-使用日志"><a href="#4-使用日志" class="headerlink" title="4. 使用日志"></a>4. 使用日志</h2><p>按升序的log级别</p><ul><li>Log.v()：verbose级别</li><li>Log.d()：debug级别</li><li>Log.i()：info级别</li><li>Log.w()：warn级别</li><li>Log.e()：error级别</li></ul><blockquote><ul><li><p>小tips</p><p>可以使用logd+Tab/Enter，快捷编写日志打印</p><p>可以在外部使用lodt+Tab/Enter，快捷编写String TAG私有类</p></li></ul></blockquote><p>相关链接：</p><p><a href="https://juejin.cn/post/6844903897958449166#heading-15">探索 Android 内存优化方法 - 掘金 (juejin.cn)</a></p><p><a href="https://developer.android.com/guide/platform?hl=zh-cn">平台架构  | Android 开发者  | Android Developers</a></p>]]></content>
      
      
      <categories>
          
          <category> Android第一行代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
